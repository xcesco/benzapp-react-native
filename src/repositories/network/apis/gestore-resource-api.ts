/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Gestore } from '../models';
/**
 * GestoreResourceApi - axios parameter creator
 * @export
 */
export const GestoreResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countGestoresUsingGET: async (benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gestores/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (benzinaPrezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.equals'] = benzinaPrezzoAlLitroEquals;
            }

            if (benzinaPrezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.greaterThan'] = benzinaPrezzoAlLitroGreaterThan;
            }

            if (benzinaPrezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.greaterThanOrEqual'] = benzinaPrezzoAlLitroGreaterThanOrEqual;
            }

            if (benzinaPrezzoAlLitroIn) {
                localVarQueryParameter['benzinaPrezzoAlLitro.in'] = benzinaPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipe);
            }

            if (benzinaPrezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.lessThan'] = benzinaPrezzoAlLitroLessThan;
            }

            if (benzinaPrezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.lessThanOrEqual'] = benzinaPrezzoAlLitroLessThanOrEqual;
            }

            if (benzinaPrezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.notEquals'] = benzinaPrezzoAlLitroNotEquals;
            }

            if (benzinaPrezzoAlLitroNotIn) {
                localVarQueryParameter['benzinaPrezzoAlLitro.notIn'] = benzinaPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (benzinaPrezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.specified'] = benzinaPrezzoAlLitroSpecified;
            }

            if (comuneContains !== undefined) {
                localVarQueryParameter['comune.contains'] = comuneContains;
            }

            if (comuneDoesNotContain !== undefined) {
                localVarQueryParameter['comune.doesNotContain'] = comuneDoesNotContain;
            }

            if (comuneEquals !== undefined) {
                localVarQueryParameter['comune.equals'] = comuneEquals;
            }

            if (comuneIn) {
                localVarQueryParameter['comune.in'] = comuneIn.join(COLLECTION_FORMATS.pipe);
            }

            if (comuneNotEquals !== undefined) {
                localVarQueryParameter['comune.notEquals'] = comuneNotEquals;
            }

            if (comuneNotIn) {
                localVarQueryParameter['comune.notIn'] = comuneNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (comuneSpecified !== undefined) {
                localVarQueryParameter['comune.specified'] = comuneSpecified;
            }

            if (gasolioPrezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.equals'] = gasolioPrezzoAlLitroEquals;
            }

            if (gasolioPrezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.greaterThan'] = gasolioPrezzoAlLitroGreaterThan;
            }

            if (gasolioPrezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.greaterThanOrEqual'] = gasolioPrezzoAlLitroGreaterThanOrEqual;
            }

            if (gasolioPrezzoAlLitroIn) {
                localVarQueryParameter['gasolioPrezzoAlLitro.in'] = gasolioPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipe);
            }

            if (gasolioPrezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.lessThan'] = gasolioPrezzoAlLitroLessThan;
            }

            if (gasolioPrezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.lessThanOrEqual'] = gasolioPrezzoAlLitroLessThanOrEqual;
            }

            if (gasolioPrezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.notEquals'] = gasolioPrezzoAlLitroNotEquals;
            }

            if (gasolioPrezzoAlLitroNotIn) {
                localVarQueryParameter['gasolioPrezzoAlLitro.notIn'] = gasolioPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (gasolioPrezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.specified'] = gasolioPrezzoAlLitroSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (indirizzoContains !== undefined) {
                localVarQueryParameter['indirizzo.contains'] = indirizzoContains;
            }

            if (indirizzoDoesNotContain !== undefined) {
                localVarQueryParameter['indirizzo.doesNotContain'] = indirizzoDoesNotContain;
            }

            if (indirizzoEquals !== undefined) {
                localVarQueryParameter['indirizzo.equals'] = indirizzoEquals;
            }

            if (indirizzoIn) {
                localVarQueryParameter['indirizzo.in'] = indirizzoIn.join(COLLECTION_FORMATS.pipe);
            }

            if (indirizzoNotEquals !== undefined) {
                localVarQueryParameter['indirizzo.notEquals'] = indirizzoNotEquals;
            }

            if (indirizzoNotIn) {
                localVarQueryParameter['indirizzo.notIn'] = indirizzoNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (indirizzoSpecified !== undefined) {
                localVarQueryParameter['indirizzo.specified'] = indirizzoSpecified;
            }

            if (latitudineEquals !== undefined) {
                localVarQueryParameter['latitudine.equals'] = latitudineEquals;
            }

            if (latitudineGreaterThan !== undefined) {
                localVarQueryParameter['latitudine.greaterThan'] = latitudineGreaterThan;
            }

            if (latitudineGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['latitudine.greaterThanOrEqual'] = latitudineGreaterThanOrEqual;
            }

            if (latitudineIn) {
                localVarQueryParameter['latitudine.in'] = latitudineIn.join(COLLECTION_FORMATS.pipe);
            }

            if (latitudineLessThan !== undefined) {
                localVarQueryParameter['latitudine.lessThan'] = latitudineLessThan;
            }

            if (latitudineLessThanOrEqual !== undefined) {
                localVarQueryParameter['latitudine.lessThanOrEqual'] = latitudineLessThanOrEqual;
            }

            if (latitudineNotEquals !== undefined) {
                localVarQueryParameter['latitudine.notEquals'] = latitudineNotEquals;
            }

            if (latitudineNotIn) {
                localVarQueryParameter['latitudine.notIn'] = latitudineNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (latitudineSpecified !== undefined) {
                localVarQueryParameter['latitudine.specified'] = latitudineSpecified;
            }

            if (longitudineEquals !== undefined) {
                localVarQueryParameter['longitudine.equals'] = longitudineEquals;
            }

            if (longitudineGreaterThan !== undefined) {
                localVarQueryParameter['longitudine.greaterThan'] = longitudineGreaterThan;
            }

            if (longitudineGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['longitudine.greaterThanOrEqual'] = longitudineGreaterThanOrEqual;
            }

            if (longitudineIn) {
                localVarQueryParameter['longitudine.in'] = longitudineIn.join(COLLECTION_FORMATS.pipe);
            }

            if (longitudineLessThan !== undefined) {
                localVarQueryParameter['longitudine.lessThan'] = longitudineLessThan;
            }

            if (longitudineLessThanOrEqual !== undefined) {
                localVarQueryParameter['longitudine.lessThanOrEqual'] = longitudineLessThanOrEqual;
            }

            if (longitudineNotEquals !== undefined) {
                localVarQueryParameter['longitudine.notEquals'] = longitudineNotEquals;
            }

            if (longitudineNotIn) {
                localVarQueryParameter['longitudine.notIn'] = longitudineNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (longitudineSpecified !== undefined) {
                localVarQueryParameter['longitudine.specified'] = longitudineSpecified;
            }

            if (marchioIdEquals !== undefined) {
                localVarQueryParameter['marchioId.equals'] = marchioIdEquals;
            }

            if (marchioIdGreaterThan !== undefined) {
                localVarQueryParameter['marchioId.greaterThan'] = marchioIdGreaterThan;
            }

            if (marchioIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['marchioId.greaterThanOrEqual'] = marchioIdGreaterThanOrEqual;
            }

            if (marchioIdIn) {
                localVarQueryParameter['marchioId.in'] = marchioIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (marchioIdLessThan !== undefined) {
                localVarQueryParameter['marchioId.lessThan'] = marchioIdLessThan;
            }

            if (marchioIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['marchioId.lessThanOrEqual'] = marchioIdLessThanOrEqual;
            }

            if (marchioIdNotEquals !== undefined) {
                localVarQueryParameter['marchioId.notEquals'] = marchioIdNotEquals;
            }

            if (marchioIdNotIn) {
                localVarQueryParameter['marchioId.notIn'] = marchioIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (marchioIdSpecified !== undefined) {
                localVarQueryParameter['marchioId.specified'] = marchioIdSpecified;
            }

            if (ownerContains !== undefined) {
                localVarQueryParameter['owner.contains'] = ownerContains;
            }

            if (ownerDoesNotContain !== undefined) {
                localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
            }

            if (ownerEquals !== undefined) {
                localVarQueryParameter['owner.equals'] = ownerEquals;
            }

            if (ownerIn) {
                localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerNotEquals !== undefined) {
                localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
            }

            if (ownerNotIn) {
                localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerSpecified !== undefined) {
                localVarQueryParameter['owner.specified'] = ownerSpecified;
            }

            if (provinciaContains !== undefined) {
                localVarQueryParameter['provincia.contains'] = provinciaContains;
            }

            if (provinciaDoesNotContain !== undefined) {
                localVarQueryParameter['provincia.doesNotContain'] = provinciaDoesNotContain;
            }

            if (provinciaEquals !== undefined) {
                localVarQueryParameter['provincia.equals'] = provinciaEquals;
            }

            if (provinciaIn) {
                localVarQueryParameter['provincia.in'] = provinciaIn.join(COLLECTION_FORMATS.pipe);
            }

            if (provinciaNotEquals !== undefined) {
                localVarQueryParameter['provincia.notEquals'] = provinciaNotEquals;
            }

            if (provinciaNotIn) {
                localVarQueryParameter['provincia.notIn'] = provinciaNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (provinciaSpecified !== undefined) {
                localVarQueryParameter['provincia.specified'] = provinciaSpecified;
            }

            if (rifornimentoIdEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
            }

            if (rifornimentoIdGreaterThan !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
            }

            if (rifornimentoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
            }

            if (rifornimentoIdIn) {
                localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdLessThan !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
            }

            if (rifornimentoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
            }

            if (rifornimentoIdNotEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
            }

            if (rifornimentoIdNotIn) {
                localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdSpecified !== undefined) {
                localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
            }

            if (tipoEquals !== undefined) {
                localVarQueryParameter['tipo.equals'] = tipoEquals;
            }

            if (tipoIn) {
                localVarQueryParameter['tipo.in'] = tipoIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tipoNotEquals !== undefined) {
                localVarQueryParameter['tipo.notEquals'] = tipoNotEquals;
            }

            if (tipoNotIn) {
                localVarQueryParameter['tipo.notIn'] = tipoNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tipoSpecified !== undefined) {
                localVarQueryParameter['tipo.specified'] = tipoSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGestoreUsingPOST: async (body?: Gestore, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gestores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGestoreUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGestoreUsingDELETE.');
            }
            const localVarPath = `/api/gestores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGestoresUsingGET: async (benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gestores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (benzinaPrezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.equals'] = benzinaPrezzoAlLitroEquals;
            }

            if (benzinaPrezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.greaterThan'] = benzinaPrezzoAlLitroGreaterThan;
            }

            if (benzinaPrezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.greaterThanOrEqual'] = benzinaPrezzoAlLitroGreaterThanOrEqual;
            }

            if (benzinaPrezzoAlLitroIn) {
                localVarQueryParameter['benzinaPrezzoAlLitro.in'] = benzinaPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipe);
            }

            if (benzinaPrezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.lessThan'] = benzinaPrezzoAlLitroLessThan;
            }

            if (benzinaPrezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.lessThanOrEqual'] = benzinaPrezzoAlLitroLessThanOrEqual;
            }

            if (benzinaPrezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.notEquals'] = benzinaPrezzoAlLitroNotEquals;
            }

            if (benzinaPrezzoAlLitroNotIn) {
                localVarQueryParameter['benzinaPrezzoAlLitro.notIn'] = benzinaPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (benzinaPrezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['benzinaPrezzoAlLitro.specified'] = benzinaPrezzoAlLitroSpecified;
            }

            if (comuneContains !== undefined) {
                localVarQueryParameter['comune.contains'] = comuneContains;
            }

            if (comuneDoesNotContain !== undefined) {
                localVarQueryParameter['comune.doesNotContain'] = comuneDoesNotContain;
            }

            if (comuneEquals !== undefined) {
                localVarQueryParameter['comune.equals'] = comuneEquals;
            }

            if (comuneIn) {
                localVarQueryParameter['comune.in'] = comuneIn.join(COLLECTION_FORMATS.pipe);
            }

            if (comuneNotEquals !== undefined) {
                localVarQueryParameter['comune.notEquals'] = comuneNotEquals;
            }

            if (comuneNotIn) {
                localVarQueryParameter['comune.notIn'] = comuneNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (comuneSpecified !== undefined) {
                localVarQueryParameter['comune.specified'] = comuneSpecified;
            }

            if (gasolioPrezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.equals'] = gasolioPrezzoAlLitroEquals;
            }

            if (gasolioPrezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.greaterThan'] = gasolioPrezzoAlLitroGreaterThan;
            }

            if (gasolioPrezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.greaterThanOrEqual'] = gasolioPrezzoAlLitroGreaterThanOrEqual;
            }

            if (gasolioPrezzoAlLitroIn) {
                localVarQueryParameter['gasolioPrezzoAlLitro.in'] = gasolioPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipe);
            }

            if (gasolioPrezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.lessThan'] = gasolioPrezzoAlLitroLessThan;
            }

            if (gasolioPrezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.lessThanOrEqual'] = gasolioPrezzoAlLitroLessThanOrEqual;
            }

            if (gasolioPrezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.notEquals'] = gasolioPrezzoAlLitroNotEquals;
            }

            if (gasolioPrezzoAlLitroNotIn) {
                localVarQueryParameter['gasolioPrezzoAlLitro.notIn'] = gasolioPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (gasolioPrezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['gasolioPrezzoAlLitro.specified'] = gasolioPrezzoAlLitroSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (indirizzoContains !== undefined) {
                localVarQueryParameter['indirizzo.contains'] = indirizzoContains;
            }

            if (indirizzoDoesNotContain !== undefined) {
                localVarQueryParameter['indirizzo.doesNotContain'] = indirizzoDoesNotContain;
            }

            if (indirizzoEquals !== undefined) {
                localVarQueryParameter['indirizzo.equals'] = indirizzoEquals;
            }

            if (indirizzoIn) {
                localVarQueryParameter['indirizzo.in'] = indirizzoIn.join(COLLECTION_FORMATS.pipe);
            }

            if (indirizzoNotEquals !== undefined) {
                localVarQueryParameter['indirizzo.notEquals'] = indirizzoNotEquals;
            }

            if (indirizzoNotIn) {
                localVarQueryParameter['indirizzo.notIn'] = indirizzoNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (indirizzoSpecified !== undefined) {
                localVarQueryParameter['indirizzo.specified'] = indirizzoSpecified;
            }

            if (latitudineEquals !== undefined) {
                localVarQueryParameter['latitudine.equals'] = latitudineEquals;
            }

            if (latitudineGreaterThan !== undefined) {
                localVarQueryParameter['latitudine.greaterThan'] = latitudineGreaterThan;
            }

            if (latitudineGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['latitudine.greaterThanOrEqual'] = latitudineGreaterThanOrEqual;
            }

            if (latitudineIn) {
                localVarQueryParameter['latitudine.in'] = latitudineIn.join(COLLECTION_FORMATS.pipe);
            }

            if (latitudineLessThan !== undefined) {
                localVarQueryParameter['latitudine.lessThan'] = latitudineLessThan;
            }

            if (latitudineLessThanOrEqual !== undefined) {
                localVarQueryParameter['latitudine.lessThanOrEqual'] = latitudineLessThanOrEqual;
            }

            if (latitudineNotEquals !== undefined) {
                localVarQueryParameter['latitudine.notEquals'] = latitudineNotEquals;
            }

            if (latitudineNotIn) {
                localVarQueryParameter['latitudine.notIn'] = latitudineNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (latitudineSpecified !== undefined) {
                localVarQueryParameter['latitudine.specified'] = latitudineSpecified;
            }

            if (longitudineEquals !== undefined) {
                localVarQueryParameter['longitudine.equals'] = longitudineEquals;
            }

            if (longitudineGreaterThan !== undefined) {
                localVarQueryParameter['longitudine.greaterThan'] = longitudineGreaterThan;
            }

            if (longitudineGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['longitudine.greaterThanOrEqual'] = longitudineGreaterThanOrEqual;
            }

            if (longitudineIn) {
                localVarQueryParameter['longitudine.in'] = longitudineIn.join(COLLECTION_FORMATS.pipe);
            }

            if (longitudineLessThan !== undefined) {
                localVarQueryParameter['longitudine.lessThan'] = longitudineLessThan;
            }

            if (longitudineLessThanOrEqual !== undefined) {
                localVarQueryParameter['longitudine.lessThanOrEqual'] = longitudineLessThanOrEqual;
            }

            if (longitudineNotEquals !== undefined) {
                localVarQueryParameter['longitudine.notEquals'] = longitudineNotEquals;
            }

            if (longitudineNotIn) {
                localVarQueryParameter['longitudine.notIn'] = longitudineNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (longitudineSpecified !== undefined) {
                localVarQueryParameter['longitudine.specified'] = longitudineSpecified;
            }

            if (marchioIdEquals !== undefined) {
                localVarQueryParameter['marchioId.equals'] = marchioIdEquals;
            }

            if (marchioIdGreaterThan !== undefined) {
                localVarQueryParameter['marchioId.greaterThan'] = marchioIdGreaterThan;
            }

            if (marchioIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['marchioId.greaterThanOrEqual'] = marchioIdGreaterThanOrEqual;
            }

            if (marchioIdIn) {
                localVarQueryParameter['marchioId.in'] = marchioIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (marchioIdLessThan !== undefined) {
                localVarQueryParameter['marchioId.lessThan'] = marchioIdLessThan;
            }

            if (marchioIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['marchioId.lessThanOrEqual'] = marchioIdLessThanOrEqual;
            }

            if (marchioIdNotEquals !== undefined) {
                localVarQueryParameter['marchioId.notEquals'] = marchioIdNotEquals;
            }

            if (marchioIdNotIn) {
                localVarQueryParameter['marchioId.notIn'] = marchioIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (marchioIdSpecified !== undefined) {
                localVarQueryParameter['marchioId.specified'] = marchioIdSpecified;
            }

            if (ownerContains !== undefined) {
                localVarQueryParameter['owner.contains'] = ownerContains;
            }

            if (ownerDoesNotContain !== undefined) {
                localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
            }

            if (ownerEquals !== undefined) {
                localVarQueryParameter['owner.equals'] = ownerEquals;
            }

            if (ownerIn) {
                localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerNotEquals !== undefined) {
                localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
            }

            if (ownerNotIn) {
                localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerSpecified !== undefined) {
                localVarQueryParameter['owner.specified'] = ownerSpecified;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (provinciaContains !== undefined) {
                localVarQueryParameter['provincia.contains'] = provinciaContains;
            }

            if (provinciaDoesNotContain !== undefined) {
                localVarQueryParameter['provincia.doesNotContain'] = provinciaDoesNotContain;
            }

            if (provinciaEquals !== undefined) {
                localVarQueryParameter['provincia.equals'] = provinciaEquals;
            }

            if (provinciaIn) {
                localVarQueryParameter['provincia.in'] = provinciaIn.join(COLLECTION_FORMATS.pipe);
            }

            if (provinciaNotEquals !== undefined) {
                localVarQueryParameter['provincia.notEquals'] = provinciaNotEquals;
            }

            if (provinciaNotIn) {
                localVarQueryParameter['provincia.notIn'] = provinciaNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (provinciaSpecified !== undefined) {
                localVarQueryParameter['provincia.specified'] = provinciaSpecified;
            }

            if (rifornimentoIdEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
            }

            if (rifornimentoIdGreaterThan !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
            }

            if (rifornimentoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
            }

            if (rifornimentoIdIn) {
                localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdLessThan !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
            }

            if (rifornimentoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
            }

            if (rifornimentoIdNotEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
            }

            if (rifornimentoIdNotIn) {
                localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdSpecified !== undefined) {
                localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (tipoEquals !== undefined) {
                localVarQueryParameter['tipo.equals'] = tipoEquals;
            }

            if (tipoIn) {
                localVarQueryParameter['tipo.in'] = tipoIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tipoNotEquals !== undefined) {
                localVarQueryParameter['tipo.notEquals'] = tipoNotEquals;
            }

            if (tipoNotIn) {
                localVarQueryParameter['tipo.notIn'] = tipoNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tipoSpecified !== undefined) {
                localVarQueryParameter['tipo.specified'] = tipoSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGestoreUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGestoreUsingGET.');
            }
            const localVarPath = `/api/gestores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary partialUpdateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGestoreUsingPATCH: async (body?: Gestore, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gestores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGestoreUsingPUT: async (body?: Gestore, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gestores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GestoreResourceApi - functional programming interface
 * @export
 */
export const GestoreResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGestoreUsingPOST(body?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).createGestoreUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGestoreUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).deleteGestoreUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAllGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Gestore>>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGestoreUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).getGestoreUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary partialUpdateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateGestoreUsingPATCH(body?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).partialUpdateGestoreUsingPATCH(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGestoreUsingPUT(body?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
            const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).updateGestoreUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GestoreResourceApi - factory interface
 * @export
 */
export const GestoreResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary countGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): AxiosPromise<number> {
            return GestoreResourceApiFp(configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGestoreUsingPOST(body?: Gestore, options?: any): AxiosPromise<Gestore> {
            return GestoreResourceApiFp(configuration).createGestoreUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGestoreUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return GestoreResourceApiFp(configuration).deleteGestoreUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllGestores
         * @param {number} [benzinaPrezzoAlLitroEquals] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
         * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
         * @param {number} [benzinaPrezzoAlLitroLessThan] 
         * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [benzinaPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
         * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
         * @param {string} [comuneContains] 
         * @param {string} [comuneDoesNotContain] 
         * @param {string} [comuneEquals] 
         * @param {Array&lt;string&gt;} [comuneIn] 
         * @param {string} [comuneNotEquals] 
         * @param {Array&lt;string&gt;} [comuneNotIn] 
         * @param {boolean} [comuneSpecified] 
         * @param {number} [gasolioPrezzoAlLitroEquals] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
         * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
         * @param {number} [gasolioPrezzoAlLitroLessThan] 
         * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
         * @param {number} [gasolioPrezzoAlLitroNotEquals] 
         * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
         * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [indirizzoContains] 
         * @param {string} [indirizzoDoesNotContain] 
         * @param {string} [indirizzoEquals] 
         * @param {Array&lt;string&gt;} [indirizzoIn] 
         * @param {string} [indirizzoNotEquals] 
         * @param {Array&lt;string&gt;} [indirizzoNotIn] 
         * @param {boolean} [indirizzoSpecified] 
         * @param {number} [latitudineEquals] 
         * @param {number} [latitudineGreaterThan] 
         * @param {number} [latitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [latitudineIn] 
         * @param {number} [latitudineLessThan] 
         * @param {number} [latitudineLessThanOrEqual] 
         * @param {number} [latitudineNotEquals] 
         * @param {Array&lt;number&gt;} [latitudineNotIn] 
         * @param {boolean} [latitudineSpecified] 
         * @param {number} [longitudineEquals] 
         * @param {number} [longitudineGreaterThan] 
         * @param {number} [longitudineGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [longitudineIn] 
         * @param {number} [longitudineLessThan] 
         * @param {number} [longitudineLessThanOrEqual] 
         * @param {number} [longitudineNotEquals] 
         * @param {Array&lt;number&gt;} [longitudineNotIn] 
         * @param {boolean} [longitudineSpecified] 
         * @param {number} [marchioIdEquals] 
         * @param {number} [marchioIdGreaterThan] 
         * @param {number} [marchioIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [marchioIdIn] 
         * @param {number} [marchioIdLessThan] 
         * @param {number} [marchioIdLessThanOrEqual] 
         * @param {number} [marchioIdNotEquals] 
         * @param {Array&lt;number&gt;} [marchioIdNotIn] 
         * @param {boolean} [marchioIdSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {string} [provinciaContains] 
         * @param {string} [provinciaDoesNotContain] 
         * @param {string} [provinciaEquals] 
         * @param {Array&lt;string&gt;} [provinciaIn] 
         * @param {string} [provinciaNotEquals] 
         * @param {Array&lt;string&gt;} [provinciaNotIn] 
         * @param {boolean} [provinciaSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [tipoEquals] 
         * @param {Array&lt;string&gt;} [tipoIn] 
         * @param {string} [tipoNotEquals] 
         * @param {Array&lt;string&gt;} [tipoNotIn] 
         * @param {boolean} [tipoSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): AxiosPromise<Array<Gestore>> {
            return GestoreResourceApiFp(configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getGestore
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGestoreUsingGET(id: number, options?: any): AxiosPromise<Gestore> {
            return GestoreResourceApiFp(configuration).getGestoreUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary partialUpdateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGestoreUsingPATCH(body?: Gestore, options?: any): AxiosPromise<Gestore> {
            return GestoreResourceApiFp(configuration).partialUpdateGestoreUsingPATCH(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateGestore
         * @param {Gestore} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGestoreUsingPUT(body?: Gestore, options?: any): AxiosPromise<Gestore> {
            return GestoreResourceApiFp(configuration).updateGestoreUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GestoreResourceApi - object-oriented interface
 * @export
 * @class GestoreResourceApi
 * @extends {BaseAPI}
 */
export class GestoreResourceApi extends BaseAPI {
    /**
     * 
     * @summary countGestores
     * @param {number} [benzinaPrezzoAlLitroEquals] 
     * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
     * @param {number} [benzinaPrezzoAlLitroLessThan] 
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
     * @param {number} [benzinaPrezzoAlLitroNotEquals] 
     * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
     * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
     * @param {string} [comuneContains] 
     * @param {string} [comuneDoesNotContain] 
     * @param {string} [comuneEquals] 
     * @param {Array&lt;string&gt;} [comuneIn] 
     * @param {string} [comuneNotEquals] 
     * @param {Array&lt;string&gt;} [comuneNotIn] 
     * @param {boolean} [comuneSpecified] 
     * @param {number} [gasolioPrezzoAlLitroEquals] 
     * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
     * @param {number} [gasolioPrezzoAlLitroLessThan] 
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
     * @param {number} [gasolioPrezzoAlLitroNotEquals] 
     * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
     * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {string} [indirizzoContains] 
     * @param {string} [indirizzoDoesNotContain] 
     * @param {string} [indirizzoEquals] 
     * @param {Array&lt;string&gt;} [indirizzoIn] 
     * @param {string} [indirizzoNotEquals] 
     * @param {Array&lt;string&gt;} [indirizzoNotIn] 
     * @param {boolean} [indirizzoSpecified] 
     * @param {number} [latitudineEquals] 
     * @param {number} [latitudineGreaterThan] 
     * @param {number} [latitudineGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [latitudineIn] 
     * @param {number} [latitudineLessThan] 
     * @param {number} [latitudineLessThanOrEqual] 
     * @param {number} [latitudineNotEquals] 
     * @param {Array&lt;number&gt;} [latitudineNotIn] 
     * @param {boolean} [latitudineSpecified] 
     * @param {number} [longitudineEquals] 
     * @param {number} [longitudineGreaterThan] 
     * @param {number} [longitudineGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [longitudineIn] 
     * @param {number} [longitudineLessThan] 
     * @param {number} [longitudineLessThanOrEqual] 
     * @param {number} [longitudineNotEquals] 
     * @param {Array&lt;number&gt;} [longitudineNotIn] 
     * @param {boolean} [longitudineSpecified] 
     * @param {number} [marchioIdEquals] 
     * @param {number} [marchioIdGreaterThan] 
     * @param {number} [marchioIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [marchioIdIn] 
     * @param {number} [marchioIdLessThan] 
     * @param {number} [marchioIdLessThanOrEqual] 
     * @param {number} [marchioIdNotEquals] 
     * @param {Array&lt;number&gt;} [marchioIdNotIn] 
     * @param {boolean} [marchioIdSpecified] 
     * @param {string} [ownerContains] 
     * @param {string} [ownerDoesNotContain] 
     * @param {string} [ownerEquals] 
     * @param {Array&lt;string&gt;} [ownerIn] 
     * @param {string} [ownerNotEquals] 
     * @param {Array&lt;string&gt;} [ownerNotIn] 
     * @param {boolean} [ownerSpecified] 
     * @param {string} [provinciaContains] 
     * @param {string} [provinciaDoesNotContain] 
     * @param {string} [provinciaEquals] 
     * @param {Array&lt;string&gt;} [provinciaIn] 
     * @param {string} [provinciaNotEquals] 
     * @param {Array&lt;string&gt;} [provinciaNotIn] 
     * @param {boolean} [provinciaSpecified] 
     * @param {number} [rifornimentoIdEquals] 
     * @param {number} [rifornimentoIdGreaterThan] 
     * @param {number} [rifornimentoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
     * @param {number} [rifornimentoIdLessThan] 
     * @param {number} [rifornimentoIdLessThanOrEqual] 
     * @param {number} [rifornimentoIdNotEquals] 
     * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
     * @param {boolean} [rifornimentoIdSpecified] 
     * @param {string} [tipoEquals] 
     * @param {Array&lt;string&gt;} [tipoIn] 
     * @param {string} [tipoNotEquals] 
     * @param {Array&lt;string&gt;} [tipoNotIn] 
     * @param {boolean} [tipoSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any) {
        return GestoreResourceApiFp(this.configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary createGestore
     * @param {Gestore} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public createGestoreUsingPOST(body?: Gestore, options?: any) {
        return GestoreResourceApiFp(this.configuration).createGestoreUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary deleteGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public deleteGestoreUsingDELETE(id: number, options?: any) {
        return GestoreResourceApiFp(this.configuration).deleteGestoreUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getAllGestores
     * @param {number} [benzinaPrezzoAlLitroEquals] 
     * @param {number} [benzinaPrezzoAlLitroGreaterThan] 
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroIn] 
     * @param {number} [benzinaPrezzoAlLitroLessThan] 
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual] 
     * @param {number} [benzinaPrezzoAlLitroNotEquals] 
     * @param {Array&lt;number&gt;} [benzinaPrezzoAlLitroNotIn] 
     * @param {boolean} [benzinaPrezzoAlLitroSpecified] 
     * @param {string} [comuneContains] 
     * @param {string} [comuneDoesNotContain] 
     * @param {string} [comuneEquals] 
     * @param {Array&lt;string&gt;} [comuneIn] 
     * @param {string} [comuneNotEquals] 
     * @param {Array&lt;string&gt;} [comuneNotIn] 
     * @param {boolean} [comuneSpecified] 
     * @param {number} [gasolioPrezzoAlLitroEquals] 
     * @param {number} [gasolioPrezzoAlLitroGreaterThan] 
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroIn] 
     * @param {number} [gasolioPrezzoAlLitroLessThan] 
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual] 
     * @param {number} [gasolioPrezzoAlLitroNotEquals] 
     * @param {Array&lt;number&gt;} [gasolioPrezzoAlLitroNotIn] 
     * @param {boolean} [gasolioPrezzoAlLitroSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {string} [indirizzoContains] 
     * @param {string} [indirizzoDoesNotContain] 
     * @param {string} [indirizzoEquals] 
     * @param {Array&lt;string&gt;} [indirizzoIn] 
     * @param {string} [indirizzoNotEquals] 
     * @param {Array&lt;string&gt;} [indirizzoNotIn] 
     * @param {boolean} [indirizzoSpecified] 
     * @param {number} [latitudineEquals] 
     * @param {number} [latitudineGreaterThan] 
     * @param {number} [latitudineGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [latitudineIn] 
     * @param {number} [latitudineLessThan] 
     * @param {number} [latitudineLessThanOrEqual] 
     * @param {number} [latitudineNotEquals] 
     * @param {Array&lt;number&gt;} [latitudineNotIn] 
     * @param {boolean} [latitudineSpecified] 
     * @param {number} [longitudineEquals] 
     * @param {number} [longitudineGreaterThan] 
     * @param {number} [longitudineGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [longitudineIn] 
     * @param {number} [longitudineLessThan] 
     * @param {number} [longitudineLessThanOrEqual] 
     * @param {number} [longitudineNotEquals] 
     * @param {Array&lt;number&gt;} [longitudineNotIn] 
     * @param {boolean} [longitudineSpecified] 
     * @param {number} [marchioIdEquals] 
     * @param {number} [marchioIdGreaterThan] 
     * @param {number} [marchioIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [marchioIdIn] 
     * @param {number} [marchioIdLessThan] 
     * @param {number} [marchioIdLessThanOrEqual] 
     * @param {number} [marchioIdNotEquals] 
     * @param {Array&lt;number&gt;} [marchioIdNotIn] 
     * @param {boolean} [marchioIdSpecified] 
     * @param {string} [ownerContains] 
     * @param {string} [ownerDoesNotContain] 
     * @param {string} [ownerEquals] 
     * @param {Array&lt;string&gt;} [ownerIn] 
     * @param {string} [ownerNotEquals] 
     * @param {Array&lt;string&gt;} [ownerNotIn] 
     * @param {boolean} [ownerSpecified] 
     * @param {number} [page] Page number of the requested page
     * @param {string} [provinciaContains] 
     * @param {string} [provinciaDoesNotContain] 
     * @param {string} [provinciaEquals] 
     * @param {Array&lt;string&gt;} [provinciaIn] 
     * @param {string} [provinciaNotEquals] 
     * @param {Array&lt;string&gt;} [provinciaNotIn] 
     * @param {boolean} [provinciaSpecified] 
     * @param {number} [rifornimentoIdEquals] 
     * @param {number} [rifornimentoIdGreaterThan] 
     * @param {number} [rifornimentoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
     * @param {number} [rifornimentoIdLessThan] 
     * @param {number} [rifornimentoIdLessThanOrEqual] 
     * @param {number} [rifornimentoIdNotEquals] 
     * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
     * @param {boolean} [rifornimentoIdSpecified] 
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [tipoEquals] 
     * @param {Array&lt;string&gt;} [tipoIn] 
     * @param {string} [tipoNotEquals] 
     * @param {Array&lt;string&gt;} [tipoNotIn] 
     * @param {boolean} [tipoSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: string, tipoIn?: Array<string>, tipoNotEquals?: string, tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any) {
        return GestoreResourceApiFp(this.configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public getGestoreUsingGET(id: number, options?: any) {
        return GestoreResourceApiFp(this.configuration).getGestoreUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary partialUpdateGestore
     * @param {Gestore} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public partialUpdateGestoreUsingPATCH(body?: Gestore, options?: any) {
        return GestoreResourceApiFp(this.configuration).partialUpdateGestoreUsingPATCH(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary updateGestore
     * @param {Gestore} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestoreResourceApi
     */
    public updateGestoreUsingPUT(body?: Gestore, options?: any) {
        return GestoreResourceApiFp(this.configuration).updateGestoreUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
