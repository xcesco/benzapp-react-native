/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { UserDTO } from '../models';
/**
 * PublicUserResourceApi - axios parameter creator
 * @export
 */
export const PublicUserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAllPublicUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicUsersUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAuthorities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthoritiesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicUserResourceApi - functional programming interface
 * @export
 */
export const PublicUserResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAllPublicUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await PublicUserResourceApiAxiosParamCreator(configuration).getAllPublicUsersUsingGET(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAuthorities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthoritiesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await PublicUserResourceApiAxiosParamCreator(configuration).getAuthoritiesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicUserResourceApi - factory interface
 * @export
 */
export const PublicUserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAllPublicUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserDTO>> {
            return PublicUserResourceApiFp(configuration).getAllPublicUsersUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAuthorities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthoritiesUsingGET(options?: any): AxiosPromise<Array<string>> {
            return PublicUserResourceApiFp(configuration).getAuthoritiesUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicUserResourceApi - object-oriented interface
 * @export
 * @class PublicUserResourceApi
 * @extends {BaseAPI}
 */
export class PublicUserResourceApi extends BaseAPI {
    /**
     * 
     * @summary getAllPublicUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicUserResourceApi
     */
    public getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
        return PublicUserResourceApiFp(this.configuration).getAllPublicUsersUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getAuthorities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicUserResourceApi
     */
    public getAuthoritiesUsingGET(options?: any) {
        return PublicUserResourceApiFp(this.configuration).getAuthoritiesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}
