/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Rifornimento } from '../models';
/**
 * RifornimentoResourceApi - axios parameter creator
 * @export
 */
export const RifornimentoResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary countRifornimentos
         * @param {Date} [dataEquals]
         * @param {Date} [dataGreaterThan]
         * @param {Date} [dataGreaterThanOrEqual]
         * @param {number} [dataIn0DayOfMonth]
         * @param {string} [dataIn0DayOfWeek]
         * @param {number} [dataIn0DayOfYear]
         * @param {number} [dataIn0Hour]
         * @param {number} [dataIn0Minute]
         * @param {string} [dataIn0Month]
         * @param {number} [dataIn0MonthValue]
         * @param {number} [dataIn0Nano]
         * @param {string} [dataIn0OffsetId]
         * @param {boolean} [dataIn0OffsetRulesFixedOffset]
         * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataIn0OffsetTotalSeconds]
         * @param {number} [dataIn0Second]
         * @param {number} [dataIn0Year]
         * @param {string} [dataIn0ZoneId]
         * @param {boolean} [dataIn0ZoneRulesFixedOffset]
         * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
         * @param {Date} [dataLessThan]
         * @param {Date} [dataLessThanOrEqual]
         * @param {Date} [dataNotEquals]
         * @param {number} [dataNotIn0DayOfMonth]
         * @param {string} [dataNotIn0DayOfWeek]
         * @param {number} [dataNotIn0DayOfYear]
         * @param {number} [dataNotIn0Hour]
         * @param {number} [dataNotIn0Minute]
         * @param {string} [dataNotIn0Month]
         * @param {number} [dataNotIn0MonthValue]
         * @param {number} [dataNotIn0Nano]
         * @param {string} [dataNotIn0OffsetId]
         * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataNotIn0OffsetTotalSeconds]
         * @param {number} [dataNotIn0Second]
         * @param {number} [dataNotIn0Year]
         * @param {string} [dataNotIn0ZoneId]
         * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
         * @param {boolean} [dataSpecified]
         * @param {number} [gestoreIdEquals]
         * @param {number} [gestoreIdGreaterThan]
         * @param {number} [gestoreIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [gestoreIdIn]
         * @param {number} [gestoreIdLessThan]
         * @param {number} [gestoreIdLessThanOrEqual]
         * @param {number} [gestoreIdNotEquals]
         * @param {Array&lt;number&gt;} [gestoreIdNotIn]
         * @param {boolean} [gestoreIdSpecified]
         * @param {number} [idEquals]
         * @param {number} [idGreaterThan]
         * @param {number} [idGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [idIn]
         * @param {number} [idLessThan]
         * @param {number} [idLessThanOrEqual]
         * @param {number} [idNotEquals]
         * @param {Array&lt;number&gt;} [idNotIn]
         * @param {boolean} [idSpecified]
         * @param {number} [litriErogatiEquals]
         * @param {number} [litriErogatiGreaterThan]
         * @param {number} [litriErogatiGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [litriErogatiIn]
         * @param {number} [litriErogatiLessThan]
         * @param {number} [litriErogatiLessThanOrEqual]
         * @param {number} [litriErogatiNotEquals]
         * @param {Array&lt;number&gt;} [litriErogatiNotIn]
         * @param {boolean} [litriErogatiSpecified]
         * @param {number} [prezzoAlLitroEquals]
         * @param {number} [prezzoAlLitroGreaterThan]
         * @param {number} [prezzoAlLitroGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
         * @param {number} [prezzoAlLitroLessThan]
         * @param {number} [prezzoAlLitroLessThanOrEqual]
         * @param {number} [prezzoAlLitroNotEquals]
         * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
         * @param {boolean} [prezzoAlLitroSpecified]
         * @param {number} [scontoEquals]
         * @param {number} [scontoGreaterThan]
         * @param {number} [scontoGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [scontoIn]
         * @param {number} [scontoLessThan]
         * @param {number} [scontoLessThanOrEqual]
         * @param {number} [scontoNotEquals]
         * @param {Array&lt;number&gt;} [scontoNotIn]
         * @param {boolean} [scontoSpecified]
         * @param {number} [tesseraIdEquals]
         * @param {number} [tesseraIdGreaterThan]
         * @param {number} [tesseraIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [tesseraIdIn]
         * @param {number} [tesseraIdLessThan]
         * @param {number} [tesseraIdLessThanOrEqual]
         * @param {number} [tesseraIdNotEquals]
         * @param {Array&lt;number&gt;} [tesseraIdNotIn]
         * @param {boolean} [tesseraIdSpecified]
         * @param {string} [tipoCarburanteEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteIn]
         * @param {string} [tipoCarburanteNotEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
         * @param {boolean} [tipoCarburanteSpecified]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRifornimentosUsingGET: async (dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rifornimentos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            if (dataEquals !== undefined) {
                localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
                    (dataEquals as any).toISOString() :
                    dataEquals;
            }

            if (dataGreaterThan !== undefined) {
                localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
                    (dataGreaterThan as any).toISOString() :
                    dataGreaterThan;
            }

            if (dataGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
                    (dataGreaterThanOrEqual as any).toISOString() :
                    dataGreaterThanOrEqual;
            }

            if (dataIn0DayOfMonth !== undefined) {
                localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
            }

            if (dataIn0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
            }

            if (dataIn0DayOfYear !== undefined) {
                localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
            }

            if (dataIn0Hour !== undefined) {
                localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
            }

            if (dataIn0Minute !== undefined) {
                localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
            }

            if (dataIn0Month !== undefined) {
                localVarQueryParameter['data.in[0].month'] = dataIn0Month;
            }

            if (dataIn0MonthValue !== undefined) {
                localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
            }

            if (dataIn0Nano !== undefined) {
                localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
            }

            if (dataIn0OffsetId !== undefined) {
                localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
            }

            if (dataIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
            }

            if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
            }

            if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
            }

            if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataIn0OffsetRulesTransitions0Instant;
            }

            if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
            }

            if (dataIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
            }

            if (dataIn0Second !== undefined) {
                localVarQueryParameter['data.in[0].second'] = dataIn0Second;
            }

            if (dataIn0Year !== undefined) {
                localVarQueryParameter['data.in[0].year'] = dataIn0Year;
            }

            if (dataIn0ZoneId !== undefined) {
                localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
            }

            if (dataIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
            }

            if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
            }

            if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataIn0ZoneRulesTransitions0Instant;
            }

            if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
            }

            if (dataLessThan !== undefined) {
                localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
                    (dataLessThan as any).toISOString() :
                    dataLessThan;
            }

            if (dataLessThanOrEqual !== undefined) {
                localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
                    (dataLessThanOrEqual as any).toISOString() :
                    dataLessThanOrEqual;
            }

            if (dataNotEquals !== undefined) {
                localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
                    (dataNotEquals as any).toISOString() :
                    dataNotEquals;
            }

            if (dataNotIn0DayOfMonth !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
            }

            if (dataNotIn0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
            }

            if (dataNotIn0DayOfYear !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
            }

            if (dataNotIn0Hour !== undefined) {
                localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
            }

            if (dataNotIn0Minute !== undefined) {
                localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
            }

            if (dataNotIn0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
            }

            if (dataNotIn0MonthValue !== undefined) {
                localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
            }

            if (dataNotIn0Nano !== undefined) {
                localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
            }

            if (dataNotIn0OffsetId !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
            }

            if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
            }

            if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
            }

            if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
            }

            if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0Instant;
            }

            if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
            }

            if (dataNotIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
            }

            if (dataNotIn0Second !== undefined) {
                localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
            }

            if (dataNotIn0Year !== undefined) {
                localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
            }

            if (dataNotIn0ZoneId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
            }

            if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
            }

            if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
            }

            if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0Instant;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
            }

            if (dataSpecified !== undefined) {
                localVarQueryParameter['data.specified'] = dataSpecified;
            }

            if (gestoreIdEquals !== undefined) {
                localVarQueryParameter['gestoreId.equals'] = gestoreIdEquals;
            }

            if (gestoreIdGreaterThan !== undefined) {
                localVarQueryParameter['gestoreId.greaterThan'] = gestoreIdGreaterThan;
            }

            if (gestoreIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['gestoreId.greaterThanOrEqual'] = gestoreIdGreaterThanOrEqual;
            }


            if (gestoreIdLessThan !== undefined) {
                localVarQueryParameter['gestoreId.lessThan'] = gestoreIdLessThan;
            }

            if (gestoreIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['gestoreId.lessThanOrEqual'] = gestoreIdLessThanOrEqual;
            }

            if (gestoreIdNotEquals !== undefined) {
                localVarQueryParameter['gestoreId.notEquals'] = gestoreIdNotEquals;
            }



            if (gestoreIdSpecified !== undefined) {
                localVarQueryParameter['gestoreId.specified'] = gestoreIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }


            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (litriErogatiEquals !== undefined) {
                localVarQueryParameter['litriErogati.equals'] = litriErogatiEquals;
            }

            if (litriErogatiGreaterThan !== undefined) {
                localVarQueryParameter['litriErogati.greaterThan'] = litriErogatiGreaterThan;
            }

            if (litriErogatiGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['litriErogati.greaterThanOrEqual'] = litriErogatiGreaterThanOrEqual;
            }



            if (litriErogatiLessThan !== undefined) {
                localVarQueryParameter['litriErogati.lessThan'] = litriErogatiLessThan;
            }

            if (litriErogatiLessThanOrEqual !== undefined) {
                localVarQueryParameter['litriErogati.lessThanOrEqual'] = litriErogatiLessThanOrEqual;
            }

            if (litriErogatiNotEquals !== undefined) {
                localVarQueryParameter['litriErogati.notEquals'] = litriErogatiNotEquals;
            }



            if (litriErogatiSpecified !== undefined) {
                localVarQueryParameter['litriErogati.specified'] = litriErogatiSpecified;
            }

            if (prezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['prezzoAlLitro.equals'] = prezzoAlLitroEquals;
            }

            if (prezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['prezzoAlLitro.greaterThan'] = prezzoAlLitroGreaterThan;
            }

            if (prezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['prezzoAlLitro.greaterThanOrEqual'] = prezzoAlLitroGreaterThanOrEqual;
            }


            if (prezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['prezzoAlLitro.lessThan'] = prezzoAlLitroLessThan;
            }

            if (prezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['prezzoAlLitro.lessThanOrEqual'] = prezzoAlLitroLessThanOrEqual;
            }

            if (prezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['prezzoAlLitro.notEquals'] = prezzoAlLitroNotEquals;
            }


            if (prezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['prezzoAlLitro.specified'] = prezzoAlLitroSpecified;
            }

            if (scontoEquals !== undefined) {
                localVarQueryParameter['sconto.equals'] = scontoEquals;
            }

            if (scontoGreaterThan !== undefined) {
                localVarQueryParameter['sconto.greaterThan'] = scontoGreaterThan;
            }

            if (scontoGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['sconto.greaterThanOrEqual'] = scontoGreaterThanOrEqual;
            }


            if (scontoLessThan !== undefined) {
                localVarQueryParameter['sconto.lessThan'] = scontoLessThan;
            }

            if (scontoLessThanOrEqual !== undefined) {
                localVarQueryParameter['sconto.lessThanOrEqual'] = scontoLessThanOrEqual;
            }

            if (scontoNotEquals !== undefined) {
                localVarQueryParameter['sconto.notEquals'] = scontoNotEquals;
            }


            if (scontoSpecified !== undefined) {
                localVarQueryParameter['sconto.specified'] = scontoSpecified;
            }

            if (tesseraIdEquals !== undefined) {
                localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
            }

            if (tesseraIdGreaterThan !== undefined) {
                localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
            }

            if (tesseraIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
            }


            if (tesseraIdLessThan !== undefined) {
                localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
            }

            if (tesseraIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
            }

            if (tesseraIdNotEquals !== undefined) {
                localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
            }


            if (tesseraIdSpecified !== undefined) {
                localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
            }

            if (tipoCarburanteEquals !== undefined) {
                localVarQueryParameter['tipoCarburante.equals'] = tipoCarburanteEquals;
            }


            if (tipoCarburanteNotEquals !== undefined) {
                localVarQueryParameter['tipoCarburante.notEquals'] = tipoCarburanteNotEquals;
            }


            if (tipoCarburanteSpecified !== undefined) {
                localVarQueryParameter['tipoCarburante.specified'] = tipoCarburanteSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary createRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRifornimentoUsingPOST: async (body?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rifornimentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary deleteRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRifornimentoUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRifornimentoUsingDELETE.');
            }
            const localVarPath = `/api/rifornimentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getAllRifornimentos
         * @param {Date} [dataEquals]
         * @param {Date} [dataGreaterThan]
         * @param {Date} [dataGreaterThanOrEqual]
         * @param {number} [dataIn0DayOfMonth]
         * @param {string} [dataIn0DayOfWeek]
         * @param {number} [dataIn0DayOfYear]
         * @param {number} [dataIn0Hour]
         * @param {number} [dataIn0Minute]
         * @param {string} [dataIn0Month]
         * @param {number} [dataIn0MonthValue]
         * @param {number} [dataIn0Nano]
         * @param {string} [dataIn0OffsetId]
         * @param {boolean} [dataIn0OffsetRulesFixedOffset]
         * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataIn0OffsetTotalSeconds]
         * @param {number} [dataIn0Second]
         * @param {number} [dataIn0Year]
         * @param {string} [dataIn0ZoneId]
         * @param {boolean} [dataIn0ZoneRulesFixedOffset]
         * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
         * @param {Date} [dataLessThan]
         * @param {Date} [dataLessThanOrEqual]
         * @param {Date} [dataNotEquals]
         * @param {number} [dataNotIn0DayOfMonth]
         * @param {string} [dataNotIn0DayOfWeek]
         * @param {number} [dataNotIn0DayOfYear]
         * @param {number} [dataNotIn0Hour]
         * @param {number} [dataNotIn0Minute]
         * @param {string} [dataNotIn0Month]
         * @param {number} [dataNotIn0MonthValue]
         * @param {number} [dataNotIn0Nano]
         * @param {string} [dataNotIn0OffsetId]
         * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataNotIn0OffsetTotalSeconds]
         * @param {number} [dataNotIn0Second]
         * @param {number} [dataNotIn0Year]
         * @param {string} [dataNotIn0ZoneId]
         * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
         * @param {boolean} [dataSpecified]
         * @param {number} [gestoreIdEquals]
         * @param {number} [gestoreIdGreaterThan]
         * @param {number} [gestoreIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [gestoreIdIn]
         * @param {number} [gestoreIdLessThan]
         * @param {number} [gestoreIdLessThanOrEqual]
         * @param {number} [gestoreIdNotEquals]
         * @param {Array&lt;number&gt;} [gestoreIdNotIn]
         * @param {boolean} [gestoreIdSpecified]
         * @param {number} [idEquals]
         * @param {number} [idGreaterThan]
         * @param {number} [idGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [idIn]
         * @param {number} [idLessThan]
         * @param {number} [idLessThanOrEqual]
         * @param {number} [idNotEquals]
         * @param {Array&lt;number&gt;} [idNotIn]
         * @param {boolean} [idSpecified]
         * @param {number} [litriErogatiEquals]
         * @param {number} [litriErogatiGreaterThan]
         * @param {number} [litriErogatiGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [litriErogatiIn]
         * @param {number} [litriErogatiLessThan]
         * @param {number} [litriErogatiLessThanOrEqual]
         * @param {number} [litriErogatiNotEquals]
         * @param {Array&lt;number&gt;} [litriErogatiNotIn]
         * @param {boolean} [litriErogatiSpecified]
         * @param {number} [page] Page number of the requested page
         * @param {number} [prezzoAlLitroEquals]
         * @param {number} [prezzoAlLitroGreaterThan]
         * @param {number} [prezzoAlLitroGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
         * @param {number} [prezzoAlLitroLessThan]
         * @param {number} [prezzoAlLitroLessThanOrEqual]
         * @param {number} [prezzoAlLitroNotEquals]
         * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
         * @param {boolean} [prezzoAlLitroSpecified]
         * @param {number} [scontoEquals]
         * @param {number} [scontoGreaterThan]
         * @param {number} [scontoGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [scontoIn]
         * @param {number} [scontoLessThan]
         * @param {number} [scontoLessThanOrEqual]
         * @param {number} [scontoNotEquals]
         * @param {Array&lt;number&gt;} [scontoNotIn]
         * @param {boolean} [scontoSpecified]
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {number} [tesseraIdEquals]
         * @param {number} [tesseraIdGreaterThan]
         * @param {number} [tesseraIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [tesseraIdIn]
         * @param {number} [tesseraIdLessThan]
         * @param {number} [tesseraIdLessThanOrEqual]
         * @param {number} [tesseraIdNotEquals]
         * @param {Array&lt;number&gt;} [tesseraIdNotIn]
         * @param {boolean} [tesseraIdSpecified]
         * @param {string} [tipoCarburanteEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteIn]
         * @param {string} [tipoCarburanteNotEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
         * @param {boolean} [tipoCarburanteSpecified]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRifornimentosUsingGET: async (size?: number, sort?: Array<string>, dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rifornimentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
           const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            if (dataEquals !== undefined) {
                localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
                    (dataEquals as any).toISOString() :
                    dataEquals;
            }

            if (dataGreaterThan !== undefined) {
                localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
                    (dataGreaterThan as any).toISOString() :
                    dataGreaterThan;
            }

            if (dataGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
                    (dataGreaterThanOrEqual as any).toISOString() :
                    dataGreaterThanOrEqual;
            }

            if (dataIn0DayOfMonth !== undefined) {
                localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
            }

            if (dataIn0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
            }

            if (dataIn0DayOfYear !== undefined) {
                localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
            }

            if (dataIn0Hour !== undefined) {
                localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
            }

            if (dataIn0Minute !== undefined) {
                localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
            }

            if (dataIn0Month !== undefined) {
                localVarQueryParameter['data.in[0].month'] = dataIn0Month;
            }

            if (dataIn0MonthValue !== undefined) {
                localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
            }

            if (dataIn0Nano !== undefined) {
                localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
            }

            if (dataIn0OffsetId !== undefined) {
                localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
            }

            if (dataIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
            }

            if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
            }

            if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
            }

            if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataIn0OffsetRulesTransitions0Instant;
            }

            if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
            }

            if (dataIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
            }

            if (dataIn0Second !== undefined) {
                localVarQueryParameter['data.in[0].second'] = dataIn0Second;
            }

            if (dataIn0Year !== undefined) {
                localVarQueryParameter['data.in[0].year'] = dataIn0Year;
            }

            if (dataIn0ZoneId !== undefined) {
                localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
            }

            if (dataIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
            }

            if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
            }

            if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataIn0ZoneRulesTransitions0Instant;
            }

            if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
            }

            if (dataLessThan !== undefined) {
                localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
                    (dataLessThan as any).toISOString() :
                    dataLessThan;
            }

            if (dataLessThanOrEqual !== undefined) {
                localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
                    (dataLessThanOrEqual as any).toISOString() :
                    dataLessThanOrEqual;
            }

            if (dataNotEquals !== undefined) {
                localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
                    (dataNotEquals as any).toISOString() :
                    dataNotEquals;
            }

            if (dataNotIn0DayOfMonth !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
            }

            if (dataNotIn0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
            }

            if (dataNotIn0DayOfYear !== undefined) {
                localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
            }

            if (dataNotIn0Hour !== undefined) {
                localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
            }

            if (dataNotIn0Minute !== undefined) {
                localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
            }

            if (dataNotIn0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
            }

            if (dataNotIn0MonthValue !== undefined) {
                localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
            }

            if (dataNotIn0Nano !== undefined) {
                localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
            }

            if (dataNotIn0OffsetId !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
            }

            if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
            }

            if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
            }

            if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
            }

            if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataNotIn0OffsetRulesTransitions0Instant;
            }

            if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
            }

            if (dataNotIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
            }

            if (dataNotIn0Second !== undefined) {
                localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
            }

            if (dataNotIn0Year !== undefined) {
                localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
            }

            if (dataNotIn0ZoneId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
            }

            if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
            }

            if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
            }

            if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataNotIn0ZoneRulesTransitions0Instant;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
            }

            if (dataSpecified !== undefined) {
                localVarQueryParameter['data.specified'] = dataSpecified;
            }

            if (gestoreIdEquals !== undefined) {
                localVarQueryParameter['gestoreId.equals'] = gestoreIdEquals;
            }

            if (gestoreIdGreaterThan !== undefined) {
                localVarQueryParameter['gestoreId.greaterThan'] = gestoreIdGreaterThan;
            }

            if (gestoreIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['gestoreId.greaterThanOrEqual'] = gestoreIdGreaterThanOrEqual;
            }


            if (gestoreIdLessThan !== undefined) {
                localVarQueryParameter['gestoreId.lessThan'] = gestoreIdLessThan;
            }

            if (gestoreIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['gestoreId.lessThanOrEqual'] = gestoreIdLessThanOrEqual;
            }

            if (gestoreIdNotEquals !== undefined) {
                localVarQueryParameter['gestoreId.notEquals'] = gestoreIdNotEquals;
            }


            if (gestoreIdSpecified !== undefined) {
                localVarQueryParameter['gestoreId.specified'] = gestoreIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }


            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }


            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (litriErogatiEquals !== undefined) {
                localVarQueryParameter['litriErogati.equals'] = litriErogatiEquals;
            }

            if (litriErogatiGreaterThan !== undefined) {
                localVarQueryParameter['litriErogati.greaterThan'] = litriErogatiGreaterThan;
            }

            if (litriErogatiGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['litriErogati.greaterThanOrEqual'] = litriErogatiGreaterThanOrEqual;
            }


            if (litriErogatiLessThan !== undefined) {
                localVarQueryParameter['litriErogati.lessThan'] = litriErogatiLessThan;
            }

            if (litriErogatiLessThanOrEqual !== undefined) {
                localVarQueryParameter['litriErogati.lessThanOrEqual'] = litriErogatiLessThanOrEqual;
            }

            if (litriErogatiNotEquals !== undefined) {
                localVarQueryParameter['litriErogati.notEquals'] = litriErogatiNotEquals;
            }


            if (litriErogatiSpecified !== undefined) {
                localVarQueryParameter['litriErogati.specified'] = litriErogatiSpecified;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (prezzoAlLitroEquals !== undefined) {
                localVarQueryParameter['prezzoAlLitro.equals'] = prezzoAlLitroEquals;
            }

            if (prezzoAlLitroGreaterThan !== undefined) {
                localVarQueryParameter['prezzoAlLitro.greaterThan'] = prezzoAlLitroGreaterThan;
            }

            if (prezzoAlLitroGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['prezzoAlLitro.greaterThanOrEqual'] = prezzoAlLitroGreaterThanOrEqual;
            }

            if (prezzoAlLitroLessThan !== undefined) {
                localVarQueryParameter['prezzoAlLitro.lessThan'] = prezzoAlLitroLessThan;
            }

            if (prezzoAlLitroLessThanOrEqual !== undefined) {
                localVarQueryParameter['prezzoAlLitro.lessThanOrEqual'] = prezzoAlLitroLessThanOrEqual;
            }

            if (prezzoAlLitroNotEquals !== undefined) {
                localVarQueryParameter['prezzoAlLitro.notEquals'] = prezzoAlLitroNotEquals;
            }

            if (prezzoAlLitroSpecified !== undefined) {
                localVarQueryParameter['prezzoAlLitro.specified'] = prezzoAlLitroSpecified;
            }

            if (scontoEquals !== undefined) {
                localVarQueryParameter['sconto.equals'] = scontoEquals;
            }

            if (scontoGreaterThan !== undefined) {
                localVarQueryParameter['sconto.greaterThan'] = scontoGreaterThan;
            }

            if (scontoGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['sconto.greaterThanOrEqual'] = scontoGreaterThanOrEqual;
            }

            if (scontoLessThan !== undefined) {
                localVarQueryParameter['sconto.lessThan'] = scontoLessThan;
            }

            if (scontoLessThanOrEqual !== undefined) {
                localVarQueryParameter['sconto.lessThanOrEqual'] = scontoLessThanOrEqual;
            }

            if (scontoNotEquals !== undefined) {
                localVarQueryParameter['sconto.notEquals'] = scontoNotEquals;
            }

            if (scontoSpecified !== undefined) {
                localVarQueryParameter['sconto.specified'] = scontoSpecified;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (tesseraIdEquals !== undefined) {
                localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
            }

            if (tesseraIdGreaterThan !== undefined) {
                localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
            }

            if (tesseraIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
            }

            if (tesseraIdLessThan !== undefined) {
                localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
            }

            if (tesseraIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
            }

            if (tesseraIdNotEquals !== undefined) {
                localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
            }

            if (tesseraIdSpecified !== undefined) {
                localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
            }

            if (tipoCarburanteEquals !== undefined) {
                localVarQueryParameter['tipoCarburante.equals'] = tipoCarburanteEquals;
            }

            if (tipoCarburanteNotEquals !== undefined) {
                localVarQueryParameter['tipoCarburante.notEquals'] = tipoCarburanteNotEquals;
            }

            if (tipoCarburanteSpecified !== undefined) {
                localVarQueryParameter['tipoCarburante.specified'] = tipoCarburanteSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRifornimentoUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRifornimentoUsingGET.');
            }
            const localVarPath = `/api/rifornimentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary partialUpdateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateRifornimentoUsingPATCH: async (body?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rifornimentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRifornimentoUsingPUT: async (body?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rifornimentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers, ...authHeader};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RifornimentoResourceApi - functional programming interface
 * @export
 */
export const RifornimentoResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary countRifornimentos
         * @param {Date} [dataEquals]
         * @param {Date} [dataGreaterThan]
         * @param {Date} [dataGreaterThanOrEqual]
         * @param {number} [dataIn0DayOfMonth]
         * @param {string} [dataIn0DayOfWeek]
         * @param {number} [dataIn0DayOfYear]
         * @param {number} [dataIn0Hour]
         * @param {number} [dataIn0Minute]
         * @param {string} [dataIn0Month]
         * @param {number} [dataIn0MonthValue]
         * @param {number} [dataIn0Nano]
         * @param {string} [dataIn0OffsetId]
         * @param {boolean} [dataIn0OffsetRulesFixedOffset]
         * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataIn0OffsetTotalSeconds]
         * @param {number} [dataIn0Second]
         * @param {number} [dataIn0Year]
         * @param {string} [dataIn0ZoneId]
         * @param {boolean} [dataIn0ZoneRulesFixedOffset]
         * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
         * @param {Date} [dataLessThan]
         * @param {Date} [dataLessThanOrEqual]
         * @param {Date} [dataNotEquals]
         * @param {number} [dataNotIn0DayOfMonth]
         * @param {string} [dataNotIn0DayOfWeek]
         * @param {number} [dataNotIn0DayOfYear]
         * @param {number} [dataNotIn0Hour]
         * @param {number} [dataNotIn0Minute]
         * @param {string} [dataNotIn0Month]
         * @param {number} [dataNotIn0MonthValue]
         * @param {number} [dataNotIn0Nano]
         * @param {string} [dataNotIn0OffsetId]
         * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataNotIn0OffsetTotalSeconds]
         * @param {number} [dataNotIn0Second]
         * @param {number} [dataNotIn0Year]
         * @param {string} [dataNotIn0ZoneId]
         * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
         * @param {boolean} [dataSpecified]
         * @param {number} [gestoreIdEquals]
         * @param {number} [gestoreIdGreaterThan]
         * @param {number} [gestoreIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [gestoreIdIn]
         * @param {number} [gestoreIdLessThan]
         * @param {number} [gestoreIdLessThanOrEqual]
         * @param {number} [gestoreIdNotEquals]
         * @param {Array&lt;number&gt;} [gestoreIdNotIn]
         * @param {boolean} [gestoreIdSpecified]
         * @param {number} [idEquals]
         * @param {number} [idGreaterThan]
         * @param {number} [idGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [idIn]
         * @param {number} [idLessThan]
         * @param {number} [idLessThanOrEqual]
         * @param {number} [idNotEquals]
         * @param {Array&lt;number&gt;} [idNotIn]
         * @param {boolean} [idSpecified]
         * @param {number} [litriErogatiEquals]
         * @param {number} [litriErogatiGreaterThan]
         * @param {number} [litriErogatiGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [litriErogatiIn]
         * @param {number} [litriErogatiLessThan]
         * @param {number} [litriErogatiLessThanOrEqual]
         * @param {number} [litriErogatiNotEquals]
         * @param {Array&lt;number&gt;} [litriErogatiNotIn]
         * @param {boolean} [litriErogatiSpecified]
         * @param {number} [prezzoAlLitroEquals]
         * @param {number} [prezzoAlLitroGreaterThan]
         * @param {number} [prezzoAlLitroGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
         * @param {number} [prezzoAlLitroLessThan]
         * @param {number} [prezzoAlLitroLessThanOrEqual]
         * @param {number} [prezzoAlLitroNotEquals]
         * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
         * @param {boolean} [prezzoAlLitroSpecified]
         * @param {number} [scontoEquals]
         * @param {number} [scontoGreaterThan]
         * @param {number} [scontoGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [scontoIn]
         * @param {number} [scontoLessThan]
         * @param {number} [scontoLessThanOrEqual]
         * @param {number} [scontoNotEquals]
         * @param {Array&lt;number&gt;} [scontoNotIn]
         * @param {boolean} [scontoSpecified]
         * @param {number} [tesseraIdEquals]
         * @param {number} [tesseraIdGreaterThan]
         * @param {number} [tesseraIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [tesseraIdIn]
         * @param {number} [tesseraIdLessThan]
         * @param {number} [tesseraIdLessThanOrEqual]
         * @param {number} [tesseraIdNotEquals]
         * @param {Array&lt;number&gt;} [tesseraIdNotIn]
         * @param {boolean} [tesseraIdSpecified]
         * @param {string} [tipoCarburanteEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteIn]
         * @param {string} [tipoCarburanteNotEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
         * @param {boolean} [tipoCarburanteSpecified]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countRifornimentosUsingGET(dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary createRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRifornimentoUsingPOST(body?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).createRifornimentoUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRifornimentoUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).deleteRifornimentoUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },

        async getAllRifornimentosUsingGET(size?: number, sort?: Array<string>, dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rifornimento>>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).getAllRifornimentosUsingGET(size, sort,dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRifornimentoUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).getRifornimentoUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary partialUpdateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateRifornimentoUsingPATCH(body?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).partialUpdateRifornimentoUsingPATCH(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRifornimentoUsingPUT(body?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
            const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).updateRifornimentoUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RifornimentoResourceApi - factory interface
 * @export
 */
export const RifornimentoResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary countRifornimentos
         * @param {Date} [dataEquals]
         * @param {Date} [dataGreaterThan]
         * @param {Date} [dataGreaterThanOrEqual]
         * @param {number} [dataIn0DayOfMonth]
         * @param {string} [dataIn0DayOfWeek]
         * @param {number} [dataIn0DayOfYear]
         * @param {number} [dataIn0Hour]
         * @param {number} [dataIn0Minute]
         * @param {string} [dataIn0Month]
         * @param {number} [dataIn0MonthValue]
         * @param {number} [dataIn0Nano]
         * @param {string} [dataIn0OffsetId]
         * @param {boolean} [dataIn0OffsetRulesFixedOffset]
         * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataIn0OffsetTotalSeconds]
         * @param {number} [dataIn0Second]
         * @param {number} [dataIn0Year]
         * @param {string} [dataIn0ZoneId]
         * @param {boolean} [dataIn0ZoneRulesFixedOffset]
         * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
         * @param {Date} [dataLessThan]
         * @param {Date} [dataLessThanOrEqual]
         * @param {Date} [dataNotEquals]
         * @param {number} [dataNotIn0DayOfMonth]
         * @param {string} [dataNotIn0DayOfWeek]
         * @param {number} [dataNotIn0DayOfYear]
         * @param {number} [dataNotIn0Hour]
         * @param {number} [dataNotIn0Minute]
         * @param {string} [dataNotIn0Month]
         * @param {number} [dataNotIn0MonthValue]
         * @param {number} [dataNotIn0Nano]
         * @param {string} [dataNotIn0OffsetId]
         * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataNotIn0OffsetTotalSeconds]
         * @param {number} [dataNotIn0Second]
         * @param {number} [dataNotIn0Year]
         * @param {string} [dataNotIn0ZoneId]
         * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
         * @param {boolean} [dataSpecified]
         * @param {number} [gestoreIdEquals]
         * @param {number} [gestoreIdGreaterThan]
         * @param {number} [gestoreIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [gestoreIdIn]
         * @param {number} [gestoreIdLessThan]
         * @param {number} [gestoreIdLessThanOrEqual]
         * @param {number} [gestoreIdNotEquals]
         * @param {Array&lt;number&gt;} [gestoreIdNotIn]
         * @param {boolean} [gestoreIdSpecified]
         * @param {number} [idEquals]
         * @param {number} [idGreaterThan]
         * @param {number} [idGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [idIn]
         * @param {number} [idLessThan]
         * @param {number} [idLessThanOrEqual]
         * @param {number} [idNotEquals]
         * @param {Array&lt;number&gt;} [idNotIn]
         * @param {boolean} [idSpecified]
         * @param {number} [litriErogatiEquals]
         * @param {number} [litriErogatiGreaterThan]
         * @param {number} [litriErogatiGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [litriErogatiIn]
         * @param {number} [litriErogatiLessThan]
         * @param {number} [litriErogatiLessThanOrEqual]
         * @param {number} [litriErogatiNotEquals]
         * @param {Array&lt;number&gt;} [litriErogatiNotIn]
         * @param {boolean} [litriErogatiSpecified]
         * @param {number} [prezzoAlLitroEquals]
         * @param {number} [prezzoAlLitroGreaterThan]
         * @param {number} [prezzoAlLitroGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
         * @param {number} [prezzoAlLitroLessThan]
         * @param {number} [prezzoAlLitroLessThanOrEqual]
         * @param {number} [prezzoAlLitroNotEquals]
         * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
         * @param {boolean} [prezzoAlLitroSpecified]
         * @param {number} [scontoEquals]
         * @param {number} [scontoGreaterThan]
         * @param {number} [scontoGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [scontoIn]
         * @param {number} [scontoLessThan]
         * @param {number} [scontoLessThanOrEqual]
         * @param {number} [scontoNotEquals]
         * @param {Array&lt;number&gt;} [scontoNotIn]
         * @param {boolean} [scontoSpecified]
         * @param {number} [tesseraIdEquals]
         * @param {number} [tesseraIdGreaterThan]
         * @param {number} [tesseraIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [tesseraIdIn]
         * @param {number} [tesseraIdLessThan]
         * @param {number} [tesseraIdLessThanOrEqual]
         * @param {number} [tesseraIdNotEquals]
         * @param {Array&lt;number&gt;} [tesseraIdNotIn]
         * @param {boolean} [tesseraIdSpecified]
         * @param {string} [tipoCarburanteEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteIn]
         * @param {string} [tipoCarburanteNotEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
         * @param {boolean} [tipoCarburanteSpecified]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRifornimentosUsingGET(dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): AxiosPromise<number> {
            return RifornimentoResourceApiFp(configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary createRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRifornimentoUsingPOST(body?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
            return RifornimentoResourceApiFp(configuration).createRifornimentoUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRifornimentoUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return RifornimentoResourceApiFp(configuration).deleteRifornimentoUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getAllRifornimentos
         * @param {Date} [dataEquals]
         * @param {Date} [dataGreaterThan]
         * @param {Date} [dataGreaterThanOrEqual]
         * @param {number} [dataIn0DayOfMonth]
         * @param {string} [dataIn0DayOfWeek]
         * @param {number} [dataIn0DayOfYear]
         * @param {number} [dataIn0Hour]
         * @param {number} [dataIn0Minute]
         * @param {string} [dataIn0Month]
         * @param {number} [dataIn0MonthValue]
         * @param {number} [dataIn0Nano]
         * @param {string} [dataIn0OffsetId]
         * @param {boolean} [dataIn0OffsetRulesFixedOffset]
         * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataIn0OffsetTotalSeconds]
         * @param {number} [dataIn0Second]
         * @param {number} [dataIn0Year]
         * @param {string} [dataIn0ZoneId]
         * @param {boolean} [dataIn0ZoneRulesFixedOffset]
         * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
         * @param {Date} [dataLessThan]
         * @param {Date} [dataLessThanOrEqual]
         * @param {Date} [dataNotEquals]
         * @param {number} [dataNotIn0DayOfMonth]
         * @param {string} [dataNotIn0DayOfWeek]
         * @param {number} [dataNotIn0DayOfYear]
         * @param {number} [dataNotIn0Hour]
         * @param {number} [dataNotIn0Minute]
         * @param {string} [dataNotIn0Month]
         * @param {number} [dataNotIn0MonthValue]
         * @param {number} [dataNotIn0Nano]
         * @param {string} [dataNotIn0OffsetId]
         * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
         * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
         * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
         * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
         * @param {number} [dataNotIn0OffsetTotalSeconds]
         * @param {number} [dataNotIn0Second]
         * @param {number} [dataNotIn0Year]
         * @param {string} [dataNotIn0ZoneId]
         * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
         * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
         * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
         * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
         * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
         * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
         * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
         * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
         * @param {boolean} [dataSpecified]
         * @param {number} [gestoreIdEquals]
         * @param {number} [gestoreIdGreaterThan]
         * @param {number} [gestoreIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [gestoreIdIn]
         * @param {number} [gestoreIdLessThan]
         * @param {number} [gestoreIdLessThanOrEqual]
         * @param {number} [gestoreIdNotEquals]
         * @param {Array&lt;number&gt;} [gestoreIdNotIn]
         * @param {boolean} [gestoreIdSpecified]
         * @param {number} [idEquals]
         * @param {number} [idGreaterThan]
         * @param {number} [idGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [idIn]
         * @param {number} [idLessThan]
         * @param {number} [idLessThanOrEqual]
         * @param {number} [idNotEquals]
         * @param {Array&lt;number&gt;} [idNotIn]
         * @param {boolean} [idSpecified]
         * @param {number} [litriErogatiEquals]
         * @param {number} [litriErogatiGreaterThan]
         * @param {number} [litriErogatiGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [litriErogatiIn]
         * @param {number} [litriErogatiLessThan]
         * @param {number} [litriErogatiLessThanOrEqual]
         * @param {number} [litriErogatiNotEquals]
         * @param {Array&lt;number&gt;} [litriErogatiNotIn]
         * @param {boolean} [litriErogatiSpecified]
         * @param {number} [page] Page number of the requested page
         * @param {number} [prezzoAlLitroEquals]
         * @param {number} [prezzoAlLitroGreaterThan]
         * @param {number} [prezzoAlLitroGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
         * @param {number} [prezzoAlLitroLessThan]
         * @param {number} [prezzoAlLitroLessThanOrEqual]
         * @param {number} [prezzoAlLitroNotEquals]
         * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
         * @param {boolean} [prezzoAlLitroSpecified]
         * @param {number} [scontoEquals]
         * @param {number} [scontoGreaterThan]
         * @param {number} [scontoGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [scontoIn]
         * @param {number} [scontoLessThan]
         * @param {number} [scontoLessThanOrEqual]
         * @param {number} [scontoNotEquals]
         * @param {Array&lt;number&gt;} [scontoNotIn]
         * @param {boolean} [scontoSpecified]
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {number} [tesseraIdEquals]
         * @param {number} [tesseraIdGreaterThan]
         * @param {number} [tesseraIdGreaterThanOrEqual]
         * @param {Array&lt;number&gt;} [tesseraIdIn]
         * @param {number} [tesseraIdLessThan]
         * @param {number} [tesseraIdLessThanOrEqual]
         * @param {number} [tesseraIdNotEquals]
         * @param {Array&lt;number&gt;} [tesseraIdNotIn]
         * @param {boolean} [tesseraIdSpecified]
         * @param {string} [tipoCarburanteEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteIn]
         * @param {string} [tipoCarburanteNotEquals]
         * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
         * @param {boolean} [tipoCarburanteSpecified]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRifornimentosUsingGET(size?: number, sort?: Array<string>, dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): AxiosPromise<Array<Rifornimento>> {
            return RifornimentoResourceApiFp(configuration).getAllRifornimentosUsingGET(size, sort, dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRifornimento
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRifornimentoUsingGET(id: number, options?: any): AxiosPromise<Rifornimento> {
            return RifornimentoResourceApiFp(configuration).getRifornimentoUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary partialUpdateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateRifornimentoUsingPATCH(body?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
            return RifornimentoResourceApiFp(configuration).partialUpdateRifornimentoUsingPATCH(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateRifornimento
         * @param {Rifornimento} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRifornimentoUsingPUT(body?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
            return RifornimentoResourceApiFp(configuration).updateRifornimentoUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RifornimentoResourceApi - object-oriented interface
 * @export
 * @class RifornimentoResourceApi
 * @extends {BaseAPI}
 */
export class RifornimentoResourceApi extends BaseAPI {
    /**
     *
     * @summary countRifornimentos
     * @param {Date} [dataEquals]
     * @param {Date} [dataGreaterThan]
     * @param {Date} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {string} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {string} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {Date} [dataLessThan]
     * @param {Date} [dataLessThanOrEqual]
     * @param {Date} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {string} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {string} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array&lt;number&gt;} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array&lt;number&gt;} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array&lt;number&gt;} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array&lt;number&gt;} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array&lt;number&gt;} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {string} [tipoCarburanteEquals]
     * @param {Array&lt;string&gt;} [tipoCarburanteIn]
     * @param {string} [tipoCarburanteNotEquals]
     * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public countRifornimentosUsingGET(dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary createRifornimento
     * @param {Rifornimento} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public createRifornimentoUsingPOST(body?: Rifornimento, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).createRifornimentoUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public deleteRifornimentoUsingDELETE(id: number, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).deleteRifornimentoUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getAllRifornimentos
     * @param {Date} [dataEquals]
     * @param {Date} [dataGreaterThan]
     * @param {Date} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {string} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {string} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {string} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {Date} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {Date} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {Date} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {Date} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {Date} [dataLessThan]
     * @param {Date} [dataLessThanOrEqual]
     * @param {Date} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {string} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {string} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {string} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {Date} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {Date} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array&lt;number&gt;} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array&lt;number&gt;} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array&lt;number&gt;} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array&lt;number&gt;} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array&lt;number&gt;} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array&lt;number&gt;} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array&lt;number&gt;} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {string} [tipoCarburanteEquals]
     * @param {Array&lt;string&gt;} [tipoCarburanteIn]
     * @param {string} [tipoCarburanteNotEquals]
     * @param {Array&lt;string&gt;} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public getAllRifornimentosUsingGET(size?: number, sort?: Array<string>, dataEquals?: Date, dataGreaterThan?: Date, dataGreaterThanOrEqual?: Date, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: string, dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: string, dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: string, dataIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: Date, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: Date, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: Date, dataLessThanOrEqual?: Date, dataNotEquals?: Date, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: string, dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: string, dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: string, dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: Date, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: Date, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: string, tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: string, tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).getAllRifornimentosUsingGET(size, sort, dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public getRifornimentoUsingGET(id: number, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).getRifornimentoUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary partialUpdateRifornimento
     * @param {Rifornimento} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public partialUpdateRifornimentoUsingPATCH(body?: Rifornimento, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).partialUpdateRifornimentoUsingPATCH(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateRifornimento
     * @param {Rifornimento} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RifornimentoResourceApi
     */
    public updateRifornimentoUsingPUT(body?: Rifornimento, options?: any) {
        return RifornimentoResourceApiFp(this.configuration).updateRifornimentoUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
