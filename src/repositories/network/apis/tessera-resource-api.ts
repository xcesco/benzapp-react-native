/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Tessera } from '../models';
/**
 * TesseraResourceApi - axios parameter creator
 * @export
 */
export const TesseraResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTesserasUsingGET: async (carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tesseras/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (carburanteEquals !== undefined) {
                localVarQueryParameter['carburante.equals'] = carburanteEquals;
            }

            if (carburanteIn) {
                localVarQueryParameter['carburante.in'] = carburanteIn.join(COLLECTION_FORMATS.pipe);
            }

            if (carburanteNotEquals !== undefined) {
                localVarQueryParameter['carburante.notEquals'] = carburanteNotEquals;
            }

            if (carburanteNotIn) {
                localVarQueryParameter['carburante.notIn'] = carburanteNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (carburanteSpecified !== undefined) {
                localVarQueryParameter['carburante.specified'] = carburanteSpecified;
            }

            if (cittadinoIdEquals !== undefined) {
                localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
            }

            if (cittadinoIdGreaterThan !== undefined) {
                localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
            }

            if (cittadinoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
            }

            if (cittadinoIdIn) {
                localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cittadinoIdLessThan !== undefined) {
                localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
            }

            if (cittadinoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
            }

            if (cittadinoIdNotEquals !== undefined) {
                localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
            }

            if (cittadinoIdNotIn) {
                localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cittadinoIdSpecified !== undefined) {
                localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
            }

            if (codiceContains !== undefined) {
                localVarQueryParameter['codice.contains'] = codiceContains;
            }

            if (codiceDoesNotContain !== undefined) {
                localVarQueryParameter['codice.doesNotContain'] = codiceDoesNotContain;
            }

            if (codiceEquals !== undefined) {
                localVarQueryParameter['codice.equals'] = codiceEquals;
            }

            if (codiceIn) {
                localVarQueryParameter['codice.in'] = codiceIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceNotEquals !== undefined) {
                localVarQueryParameter['codice.notEquals'] = codiceNotEquals;
            }

            if (codiceNotIn) {
                localVarQueryParameter['codice.notIn'] = codiceNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceSpecified !== undefined) {
                localVarQueryParameter['codice.specified'] = codiceSpecified;
            }

            if (dataEmissioneEquals !== undefined) {
                localVarQueryParameter['dataEmissione.equals'] = (dataEmissioneEquals as any instanceof Date) ?
                    (dataEmissioneEquals as any).toISOString() :
                    dataEmissioneEquals;
            }

            if (dataEmissioneGreaterThan !== undefined) {
                localVarQueryParameter['dataEmissione.greaterThan'] = (dataEmissioneGreaterThan as any instanceof Date) ?
                    (dataEmissioneGreaterThan as any).toISOString() :
                    dataEmissioneGreaterThan;
            }

            if (dataEmissioneGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['dataEmissione.greaterThanOrEqual'] = (dataEmissioneGreaterThanOrEqual as any instanceof Date) ?
                    (dataEmissioneGreaterThanOrEqual as any).toISOString() :
                    dataEmissioneGreaterThanOrEqual;
            }

            if (dataEmissioneIn0DayOfMonth !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfMonth'] = dataEmissioneIn0DayOfMonth;
            }

            if (dataEmissioneIn0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfWeek'] = dataEmissioneIn0DayOfWeek;
            }

            if (dataEmissioneIn0DayOfYear !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfYear'] = dataEmissioneIn0DayOfYear;
            }

            if (dataEmissioneIn0Hour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].hour'] = dataEmissioneIn0Hour;
            }

            if (dataEmissioneIn0Minute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].minute'] = dataEmissioneIn0Minute;
            }

            if (dataEmissioneIn0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].month'] = dataEmissioneIn0Month;
            }

            if (dataEmissioneIn0MonthValue !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].monthValue'] = dataEmissioneIn0MonthValue;
            }

            if (dataEmissioneIn0Nano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].nano'] = dataEmissioneIn0Nano;
            }

            if (dataEmissioneIn0OffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.id'] = dataEmissioneIn0OffsetId;
            }

            if (dataEmissioneIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.fixedOffset'] = dataEmissioneIn0OffsetRulesFixedOffset;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].month'] = dataEmissioneIn0OffsetRulesTransitionRules0Month;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].gap'] = dataEmissioneIn0OffsetRulesTransitions0Gap;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].instant'] = (dataEmissioneIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0Instant;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].overlap'] = dataEmissioneIn0OffsetRulesTransitions0Overlap;
            }

            if (dataEmissioneIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.totalSeconds'] = dataEmissioneIn0OffsetTotalSeconds;
            }

            if (dataEmissioneIn0Second !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].second'] = dataEmissioneIn0Second;
            }

            if (dataEmissioneIn0Year !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].year'] = dataEmissioneIn0Year;
            }

            if (dataEmissioneIn0ZoneId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.id'] = dataEmissioneIn0ZoneId;
            }

            if (dataEmissioneIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.fixedOffset'] = dataEmissioneIn0ZoneRulesFixedOffset;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].month'] = dataEmissioneIn0ZoneRulesTransitionRules0Month;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].gap'] = dataEmissioneIn0ZoneRulesTransitions0Gap;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].instant'] = (dataEmissioneIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0Instant;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].overlap'] = dataEmissioneIn0ZoneRulesTransitions0Overlap;
            }

            if (dataEmissioneLessThan !== undefined) {
                localVarQueryParameter['dataEmissione.lessThan'] = (dataEmissioneLessThan as any instanceof Date) ?
                    (dataEmissioneLessThan as any).toISOString() :
                    dataEmissioneLessThan;
            }

            if (dataEmissioneLessThanOrEqual !== undefined) {
                localVarQueryParameter['dataEmissione.lessThanOrEqual'] = (dataEmissioneLessThanOrEqual as any instanceof Date) ?
                    (dataEmissioneLessThanOrEqual as any).toISOString() :
                    dataEmissioneLessThanOrEqual;
            }

            if (dataEmissioneNotEquals !== undefined) {
                localVarQueryParameter['dataEmissione.notEquals'] = (dataEmissioneNotEquals as any instanceof Date) ?
                    (dataEmissioneNotEquals as any).toISOString() :
                    dataEmissioneNotEquals;
            }

            if (dataEmissioneNotIn0DayOfMonth !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfMonth'] = dataEmissioneNotIn0DayOfMonth;
            }

            if (dataEmissioneNotIn0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfWeek'] = dataEmissioneNotIn0DayOfWeek;
            }

            if (dataEmissioneNotIn0DayOfYear !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfYear'] = dataEmissioneNotIn0DayOfYear;
            }

            if (dataEmissioneNotIn0Hour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].hour'] = dataEmissioneNotIn0Hour;
            }

            if (dataEmissioneNotIn0Minute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].minute'] = dataEmissioneNotIn0Minute;
            }

            if (dataEmissioneNotIn0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].month'] = dataEmissioneNotIn0Month;
            }

            if (dataEmissioneNotIn0MonthValue !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].monthValue'] = dataEmissioneNotIn0MonthValue;
            }

            if (dataEmissioneNotIn0Nano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].nano'] = dataEmissioneNotIn0Nano;
            }

            if (dataEmissioneNotIn0OffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.id'] = dataEmissioneNotIn0OffsetId;
            }

            if (dataEmissioneNotIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.fixedOffset'] = dataEmissioneNotIn0OffsetRulesFixedOffset;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].month'] = dataEmissioneNotIn0OffsetRulesTransitionRules0Month;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].gap'] = dataEmissioneNotIn0OffsetRulesTransitions0Gap;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].instant'] = (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0Instant;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].overlap'] = dataEmissioneNotIn0OffsetRulesTransitions0Overlap;
            }

            if (dataEmissioneNotIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.totalSeconds'] = dataEmissioneNotIn0OffsetTotalSeconds;
            }

            if (dataEmissioneNotIn0Second !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].second'] = dataEmissioneNotIn0Second;
            }

            if (dataEmissioneNotIn0Year !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].year'] = dataEmissioneNotIn0Year;
            }

            if (dataEmissioneNotIn0ZoneId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.id'] = dataEmissioneNotIn0ZoneId;
            }

            if (dataEmissioneNotIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.fixedOffset'] = dataEmissioneNotIn0ZoneRulesFixedOffset;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].month'] = dataEmissioneNotIn0ZoneRulesTransitionRules0Month;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].gap'] = dataEmissioneNotIn0ZoneRulesTransitions0Gap;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].instant'] = (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0Instant;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].overlap'] = dataEmissioneNotIn0ZoneRulesTransitions0Overlap;
            }

            if (dataEmissioneSpecified !== undefined) {
                localVarQueryParameter['dataEmissione.specified'] = dataEmissioneSpecified;
            }

            if (delegaIdEquals !== undefined) {
                localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
            }

            if (delegaIdGreaterThan !== undefined) {
                localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
            }

            if (delegaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
            }

            if (delegaIdIn) {
                localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdLessThan !== undefined) {
                localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
            }

            if (delegaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
            }

            if (delegaIdNotEquals !== undefined) {
                localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
            }

            if (delegaIdNotIn) {
                localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdSpecified !== undefined) {
                localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (rifornimentoIdEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
            }

            if (rifornimentoIdGreaterThan !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
            }

            if (rifornimentoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
            }

            if (rifornimentoIdIn) {
                localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdLessThan !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
            }

            if (rifornimentoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
            }

            if (rifornimentoIdNotEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
            }

            if (rifornimentoIdNotIn) {
                localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdSpecified !== undefined) {
                localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
            }

            if (targaContains !== undefined) {
                localVarQueryParameter['targa.contains'] = targaContains;
            }

            if (targaDoesNotContain !== undefined) {
                localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
            }

            if (targaEquals !== undefined) {
                localVarQueryParameter['targa.equals'] = targaEquals;
            }

            if (targaIn) {
                localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipe);
            }

            if (targaNotEquals !== undefined) {
                localVarQueryParameter['targa.notEquals'] = targaNotEquals;
            }

            if (targaNotIn) {
                localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (targaSpecified !== undefined) {
                localVarQueryParameter['targa.specified'] = targaSpecified;
            }

            if (veicoloEquals !== undefined) {
                localVarQueryParameter['veicolo.equals'] = veicoloEquals;
            }

            if (veicoloIn) {
                localVarQueryParameter['veicolo.in'] = veicoloIn.join(COLLECTION_FORMATS.pipe);
            }

            if (veicoloNotEquals !== undefined) {
                localVarQueryParameter['veicolo.notEquals'] = veicoloNotEquals;
            }

            if (veicoloNotIn) {
                localVarQueryParameter['veicolo.notIn'] = veicoloNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (veicoloSpecified !== undefined) {
                localVarQueryParameter['veicolo.specified'] = veicoloSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTesseraUsingPOST: async (body?: Tessera, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tesseras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTesseraUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTesseraUsingDELETE.');
            }
            const localVarPath = `/api/tesseras/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTesserasUsingGET: async (carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tesseras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (carburanteEquals !== undefined) {
                localVarQueryParameter['carburante.equals'] = carburanteEquals;
            }

            if (carburanteIn) {
                localVarQueryParameter['carburante.in'] = carburanteIn.join(COLLECTION_FORMATS.pipe);
            }

            if (carburanteNotEquals !== undefined) {
                localVarQueryParameter['carburante.notEquals'] = carburanteNotEquals;
            }

            if (carburanteNotIn) {
                localVarQueryParameter['carburante.notIn'] = carburanteNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (carburanteSpecified !== undefined) {
                localVarQueryParameter['carburante.specified'] = carburanteSpecified;
            }

            if (cittadinoIdEquals !== undefined) {
                localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
            }

            if (cittadinoIdGreaterThan !== undefined) {
                localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
            }

            if (cittadinoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
            }

            if (cittadinoIdIn) {
                localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cittadinoIdLessThan !== undefined) {
                localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
            }

            if (cittadinoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
            }

            if (cittadinoIdNotEquals !== undefined) {
                localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
            }

            if (cittadinoIdNotIn) {
                localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cittadinoIdSpecified !== undefined) {
                localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
            }

            if (codiceContains !== undefined) {
                localVarQueryParameter['codice.contains'] = codiceContains;
            }

            if (codiceDoesNotContain !== undefined) {
                localVarQueryParameter['codice.doesNotContain'] = codiceDoesNotContain;
            }

            if (codiceEquals !== undefined) {
                localVarQueryParameter['codice.equals'] = codiceEquals;
            }

            if (codiceIn) {
                localVarQueryParameter['codice.in'] = codiceIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceNotEquals !== undefined) {
                localVarQueryParameter['codice.notEquals'] = codiceNotEquals;
            }

            if (codiceNotIn) {
                localVarQueryParameter['codice.notIn'] = codiceNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceSpecified !== undefined) {
                localVarQueryParameter['codice.specified'] = codiceSpecified;
            }

            if (dataEmissioneEquals !== undefined) {
                localVarQueryParameter['dataEmissione.equals'] = (dataEmissioneEquals as any instanceof Date) ?
                    (dataEmissioneEquals as any).toISOString() :
                    dataEmissioneEquals;
            }

            if (dataEmissioneGreaterThan !== undefined) {
                localVarQueryParameter['dataEmissione.greaterThan'] = (dataEmissioneGreaterThan as any instanceof Date) ?
                    (dataEmissioneGreaterThan as any).toISOString() :
                    dataEmissioneGreaterThan;
            }

            if (dataEmissioneGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['dataEmissione.greaterThanOrEqual'] = (dataEmissioneGreaterThanOrEqual as any instanceof Date) ?
                    (dataEmissioneGreaterThanOrEqual as any).toISOString() :
                    dataEmissioneGreaterThanOrEqual;
            }

            if (dataEmissioneIn0DayOfMonth !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfMonth'] = dataEmissioneIn0DayOfMonth;
            }

            if (dataEmissioneIn0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfWeek'] = dataEmissioneIn0DayOfWeek;
            }

            if (dataEmissioneIn0DayOfYear !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].dayOfYear'] = dataEmissioneIn0DayOfYear;
            }

            if (dataEmissioneIn0Hour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].hour'] = dataEmissioneIn0Hour;
            }

            if (dataEmissioneIn0Minute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].minute'] = dataEmissioneIn0Minute;
            }

            if (dataEmissioneIn0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].month'] = dataEmissioneIn0Month;
            }

            if (dataEmissioneIn0MonthValue !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].monthValue'] = dataEmissioneIn0MonthValue;
            }

            if (dataEmissioneIn0Nano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].nano'] = dataEmissioneIn0Nano;
            }

            if (dataEmissioneIn0OffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.id'] = dataEmissioneIn0OffsetId;
            }

            if (dataEmissioneIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.fixedOffset'] = dataEmissioneIn0OffsetRulesFixedOffset;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].month'] = dataEmissioneIn0OffsetRulesTransitionRules0Month;
            }

            if (dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].gap'] = dataEmissioneIn0OffsetRulesTransitions0Gap;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].instant'] = (dataEmissioneIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneIn0OffsetRulesTransitions0Instant;
            }

            if (dataEmissioneIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].overlap'] = dataEmissioneIn0OffsetRulesTransitions0Overlap;
            }

            if (dataEmissioneIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].offset.totalSeconds'] = dataEmissioneIn0OffsetTotalSeconds;
            }

            if (dataEmissioneIn0Second !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].second'] = dataEmissioneIn0Second;
            }

            if (dataEmissioneIn0Year !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].year'] = dataEmissioneIn0Year;
            }

            if (dataEmissioneIn0ZoneId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.id'] = dataEmissioneIn0ZoneId;
            }

            if (dataEmissioneIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.fixedOffset'] = dataEmissioneIn0ZoneRulesFixedOffset;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].month'] = dataEmissioneIn0ZoneRulesTransitionRules0Month;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].gap'] = dataEmissioneIn0ZoneRulesTransitions0Gap;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].instant'] = (dataEmissioneIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneIn0ZoneRulesTransitions0Instant;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].overlap'] = dataEmissioneIn0ZoneRulesTransitions0Overlap;
            }

            if (dataEmissioneLessThan !== undefined) {
                localVarQueryParameter['dataEmissione.lessThan'] = (dataEmissioneLessThan as any instanceof Date) ?
                    (dataEmissioneLessThan as any).toISOString() :
                    dataEmissioneLessThan;
            }

            if (dataEmissioneLessThanOrEqual !== undefined) {
                localVarQueryParameter['dataEmissione.lessThanOrEqual'] = (dataEmissioneLessThanOrEqual as any instanceof Date) ?
                    (dataEmissioneLessThanOrEqual as any).toISOString() :
                    dataEmissioneLessThanOrEqual;
            }

            if (dataEmissioneNotEquals !== undefined) {
                localVarQueryParameter['dataEmissione.notEquals'] = (dataEmissioneNotEquals as any instanceof Date) ?
                    (dataEmissioneNotEquals as any).toISOString() :
                    dataEmissioneNotEquals;
            }

            if (dataEmissioneNotIn0DayOfMonth !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfMonth'] = dataEmissioneNotIn0DayOfMonth;
            }

            if (dataEmissioneNotIn0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfWeek'] = dataEmissioneNotIn0DayOfWeek;
            }

            if (dataEmissioneNotIn0DayOfYear !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].dayOfYear'] = dataEmissioneNotIn0DayOfYear;
            }

            if (dataEmissioneNotIn0Hour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].hour'] = dataEmissioneNotIn0Hour;
            }

            if (dataEmissioneNotIn0Minute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].minute'] = dataEmissioneNotIn0Minute;
            }

            if (dataEmissioneNotIn0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].month'] = dataEmissioneNotIn0Month;
            }

            if (dataEmissioneNotIn0MonthValue !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].monthValue'] = dataEmissioneNotIn0MonthValue;
            }

            if (dataEmissioneNotIn0Nano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].nano'] = dataEmissioneNotIn0Nano;
            }

            if (dataEmissioneNotIn0OffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.id'] = dataEmissioneNotIn0OffsetId;
            }

            if (dataEmissioneNotIn0OffsetRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.fixedOffset'] = dataEmissioneNotIn0OffsetRulesFixedOffset;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].month'] = dataEmissioneNotIn0OffsetRulesTransitionRules0Month;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNano;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationZero;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].gap'] = dataEmissioneNotIn0OffsetRulesTransitions0Gap;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].instant'] = (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneNotIn0OffsetRulesTransitions0Instant;
            }

            if (dataEmissioneNotIn0OffsetRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].overlap'] = dataEmissioneNotIn0OffsetRulesTransitions0Overlap;
            }

            if (dataEmissioneNotIn0OffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].offset.totalSeconds'] = dataEmissioneNotIn0OffsetTotalSeconds;
            }

            if (dataEmissioneNotIn0Second !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].second'] = dataEmissioneNotIn0Second;
            }

            if (dataEmissioneNotIn0Year !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].year'] = dataEmissioneNotIn0Year;
            }

            if (dataEmissioneNotIn0ZoneId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.id'] = dataEmissioneNotIn0ZoneId;
            }

            if (dataEmissioneNotIn0ZoneRulesFixedOffset !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.fixedOffset'] = dataEmissioneNotIn0ZoneRulesFixedOffset;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0Month !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].month'] = dataEmissioneNotIn0ZoneRulesTransitionRules0Month;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNano;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationZero;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Gap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].gap'] = dataEmissioneNotIn0ZoneRulesTransitions0Gap;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Instant !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].instant'] = (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
                    (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
                    dataEmissioneNotIn0ZoneRulesTransitions0Instant;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
            }

            if (dataEmissioneNotIn0ZoneRulesTransitions0Overlap !== undefined) {
                localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].overlap'] = dataEmissioneNotIn0ZoneRulesTransitions0Overlap;
            }

            if (dataEmissioneSpecified !== undefined) {
                localVarQueryParameter['dataEmissione.specified'] = dataEmissioneSpecified;
            }

            if (delegaIdEquals !== undefined) {
                localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
            }

            if (delegaIdGreaterThan !== undefined) {
                localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
            }

            if (delegaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
            }

            if (delegaIdIn) {
                localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdLessThan !== undefined) {
                localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
            }

            if (delegaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
            }

            if (delegaIdNotEquals !== undefined) {
                localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
            }

            if (delegaIdNotIn) {
                localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdSpecified !== undefined) {
                localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (rifornimentoIdEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
            }

            if (rifornimentoIdGreaterThan !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
            }

            if (rifornimentoIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
            }

            if (rifornimentoIdIn) {
                localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdLessThan !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
            }

            if (rifornimentoIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
            }

            if (rifornimentoIdNotEquals !== undefined) {
                localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
            }

            if (rifornimentoIdNotIn) {
                localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (rifornimentoIdSpecified !== undefined) {
                localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (targaContains !== undefined) {
                localVarQueryParameter['targa.contains'] = targaContains;
            }

            if (targaDoesNotContain !== undefined) {
                localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
            }

            if (targaEquals !== undefined) {
                localVarQueryParameter['targa.equals'] = targaEquals;
            }

            if (targaIn) {
                localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipe);
            }

            if (targaNotEquals !== undefined) {
                localVarQueryParameter['targa.notEquals'] = targaNotEquals;
            }

            if (targaNotIn) {
                localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (targaSpecified !== undefined) {
                localVarQueryParameter['targa.specified'] = targaSpecified;
            }

            if (veicoloEquals !== undefined) {
                localVarQueryParameter['veicolo.equals'] = veicoloEquals;
            }

            if (veicoloIn) {
                localVarQueryParameter['veicolo.in'] = veicoloIn.join(COLLECTION_FORMATS.pipe);
            }

            if (veicoloNotEquals !== undefined) {
                localVarQueryParameter['veicolo.notEquals'] = veicoloNotEquals;
            }

            if (veicoloNotIn) {
                localVarQueryParameter['veicolo.notIn'] = veicoloNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (veicoloSpecified !== undefined) {
                localVarQueryParameter['veicolo.specified'] = veicoloSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTesseraUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTesseraUsingGET.');
            }
            const localVarPath = `/api/tesseras/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary partialUpdateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTesseraUsingPATCH: async (body?: Tessera, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tesseras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTesseraUsingPUT: async (body?: Tessera, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tesseras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TesseraResourceApi - functional programming interface
 * @export
 */
export const TesseraResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTesseraUsingPOST(body?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).createTesseraUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTesseraUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).deleteTesseraUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAllTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tessera>>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTesseraUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).getTesseraUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary partialUpdateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateTesseraUsingPATCH(body?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).partialUpdateTesseraUsingPATCH(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTesseraUsingPUT(body?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
            const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).updateTesseraUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TesseraResourceApi - factory interface
 * @export
 */
export const TesseraResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary countTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): AxiosPromise<number> {
            return TesseraResourceApiFp(configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTesseraUsingPOST(body?: Tessera, options?: any): AxiosPromise<Tessera> {
            return TesseraResourceApiFp(configuration).createTesseraUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTesseraUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return TesseraResourceApiFp(configuration).deleteTesseraUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllTesseras
         * @param {string} [carburanteEquals] 
         * @param {Array&lt;string&gt;} [carburanteIn] 
         * @param {string} [carburanteNotEquals] 
         * @param {Array&lt;string&gt;} [carburanteNotIn] 
         * @param {boolean} [carburanteSpecified] 
         * @param {number} [cittadinoIdEquals] 
         * @param {number} [cittadinoIdGreaterThan] 
         * @param {number} [cittadinoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [cittadinoIdIn] 
         * @param {number} [cittadinoIdLessThan] 
         * @param {number} [cittadinoIdLessThanOrEqual] 
         * @param {number} [cittadinoIdNotEquals] 
         * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
         * @param {boolean} [cittadinoIdSpecified] 
         * @param {string} [codiceContains] 
         * @param {string} [codiceDoesNotContain] 
         * @param {string} [codiceEquals] 
         * @param {Array&lt;string&gt;} [codiceIn] 
         * @param {string} [codiceNotEquals] 
         * @param {Array&lt;string&gt;} [codiceNotIn] 
         * @param {boolean} [codiceSpecified] 
         * @param {Date} [dataEmissioneEquals] 
         * @param {Date} [dataEmissioneGreaterThan] 
         * @param {Date} [dataEmissioneGreaterThanOrEqual] 
         * @param {number} [dataEmissioneIn0DayOfMonth] 
         * @param {string} [dataEmissioneIn0DayOfWeek] 
         * @param {number} [dataEmissioneIn0DayOfYear] 
         * @param {number} [dataEmissioneIn0Hour] 
         * @param {number} [dataEmissioneIn0Minute] 
         * @param {string} [dataEmissioneIn0Month] 
         * @param {number} [dataEmissioneIn0MonthValue] 
         * @param {number} [dataEmissioneIn0Nano] 
         * @param {string} [dataEmissioneIn0OffsetId] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneIn0Second] 
         * @param {number} [dataEmissioneIn0Year] 
         * @param {string} [dataEmissioneIn0ZoneId] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
         * @param {Date} [dataEmissioneLessThan] 
         * @param {Date} [dataEmissioneLessThanOrEqual] 
         * @param {Date} [dataEmissioneNotEquals] 
         * @param {number} [dataEmissioneNotIn0DayOfMonth] 
         * @param {string} [dataEmissioneNotIn0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0DayOfYear] 
         * @param {number} [dataEmissioneNotIn0Hour] 
         * @param {number} [dataEmissioneNotIn0Minute] 
         * @param {string} [dataEmissioneNotIn0Month] 
         * @param {number} [dataEmissioneNotIn0MonthValue] 
         * @param {number} [dataEmissioneNotIn0Nano] 
         * @param {string} [dataEmissioneNotIn0OffsetId] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
         * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
         * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
         * @param {number} [dataEmissioneNotIn0Second] 
         * @param {number} [dataEmissioneNotIn0Year] 
         * @param {string} [dataEmissioneNotIn0ZoneId] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
         * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
         * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
         * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
         * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
         * @param {boolean} [dataEmissioneSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [rifornimentoIdEquals] 
         * @param {number} [rifornimentoIdGreaterThan] 
         * @param {number} [rifornimentoIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
         * @param {number} [rifornimentoIdLessThan] 
         * @param {number} [rifornimentoIdLessThanOrEqual] 
         * @param {number} [rifornimentoIdNotEquals] 
         * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
         * @param {boolean} [rifornimentoIdSpecified] 
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [targaContains] 
         * @param {string} [targaDoesNotContain] 
         * @param {string} [targaEquals] 
         * @param {Array&lt;string&gt;} [targaIn] 
         * @param {string} [targaNotEquals] 
         * @param {Array&lt;string&gt;} [targaNotIn] 
         * @param {boolean} [targaSpecified] 
         * @param {string} [veicoloEquals] 
         * @param {Array&lt;string&gt;} [veicoloIn] 
         * @param {string} [veicoloNotEquals] 
         * @param {Array&lt;string&gt;} [veicoloNotIn] 
         * @param {boolean} [veicoloSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): AxiosPromise<Array<Tessera>> {
            return TesseraResourceApiFp(configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTessera
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTesseraUsingGET(id: number, options?: any): AxiosPromise<Tessera> {
            return TesseraResourceApiFp(configuration).getTesseraUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary partialUpdateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTesseraUsingPATCH(body?: Tessera, options?: any): AxiosPromise<Tessera> {
            return TesseraResourceApiFp(configuration).partialUpdateTesseraUsingPATCH(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateTessera
         * @param {Tessera} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTesseraUsingPUT(body?: Tessera, options?: any): AxiosPromise<Tessera> {
            return TesseraResourceApiFp(configuration).updateTesseraUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TesseraResourceApi - object-oriented interface
 * @export
 * @class TesseraResourceApi
 * @extends {BaseAPI}
 */
export class TesseraResourceApi extends BaseAPI {
    /**
     * 
     * @summary countTesseras
     * @param {string} [carburanteEquals] 
     * @param {Array&lt;string&gt;} [carburanteIn] 
     * @param {string} [carburanteNotEquals] 
     * @param {Array&lt;string&gt;} [carburanteNotIn] 
     * @param {boolean} [carburanteSpecified] 
     * @param {number} [cittadinoIdEquals] 
     * @param {number} [cittadinoIdGreaterThan] 
     * @param {number} [cittadinoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [cittadinoIdIn] 
     * @param {number} [cittadinoIdLessThan] 
     * @param {number} [cittadinoIdLessThanOrEqual] 
     * @param {number} [cittadinoIdNotEquals] 
     * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
     * @param {boolean} [cittadinoIdSpecified] 
     * @param {string} [codiceContains] 
     * @param {string} [codiceDoesNotContain] 
     * @param {string} [codiceEquals] 
     * @param {Array&lt;string&gt;} [codiceIn] 
     * @param {string} [codiceNotEquals] 
     * @param {Array&lt;string&gt;} [codiceNotIn] 
     * @param {boolean} [codiceSpecified] 
     * @param {Date} [dataEmissioneEquals] 
     * @param {Date} [dataEmissioneGreaterThan] 
     * @param {Date} [dataEmissioneGreaterThanOrEqual] 
     * @param {number} [dataEmissioneIn0DayOfMonth] 
     * @param {string} [dataEmissioneIn0DayOfWeek] 
     * @param {number} [dataEmissioneIn0DayOfYear] 
     * @param {number} [dataEmissioneIn0Hour] 
     * @param {number} [dataEmissioneIn0Minute] 
     * @param {string} [dataEmissioneIn0Month] 
     * @param {number} [dataEmissioneIn0MonthValue] 
     * @param {number} [dataEmissioneIn0Nano] 
     * @param {string} [dataEmissioneIn0OffsetId] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
     * @param {number} [dataEmissioneIn0Second] 
     * @param {number} [dataEmissioneIn0Year] 
     * @param {string} [dataEmissioneIn0ZoneId] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
     * @param {Date} [dataEmissioneLessThan] 
     * @param {Date} [dataEmissioneLessThanOrEqual] 
     * @param {Date} [dataEmissioneNotEquals] 
     * @param {number} [dataEmissioneNotIn0DayOfMonth] 
     * @param {string} [dataEmissioneNotIn0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0DayOfYear] 
     * @param {number} [dataEmissioneNotIn0Hour] 
     * @param {number} [dataEmissioneNotIn0Minute] 
     * @param {string} [dataEmissioneNotIn0Month] 
     * @param {number} [dataEmissioneNotIn0MonthValue] 
     * @param {number} [dataEmissioneNotIn0Nano] 
     * @param {string} [dataEmissioneNotIn0OffsetId] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
     * @param {number} [dataEmissioneNotIn0Second] 
     * @param {number} [dataEmissioneNotIn0Year] 
     * @param {string} [dataEmissioneNotIn0ZoneId] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
     * @param {boolean} [dataEmissioneSpecified] 
     * @param {number} [delegaIdEquals] 
     * @param {number} [delegaIdGreaterThan] 
     * @param {number} [delegaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [delegaIdIn] 
     * @param {number} [delegaIdLessThan] 
     * @param {number} [delegaIdLessThanOrEqual] 
     * @param {number} [delegaIdNotEquals] 
     * @param {Array&lt;number&gt;} [delegaIdNotIn] 
     * @param {boolean} [delegaIdSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {number} [rifornimentoIdEquals] 
     * @param {number} [rifornimentoIdGreaterThan] 
     * @param {number} [rifornimentoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
     * @param {number} [rifornimentoIdLessThan] 
     * @param {number} [rifornimentoIdLessThanOrEqual] 
     * @param {number} [rifornimentoIdNotEquals] 
     * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
     * @param {boolean} [rifornimentoIdSpecified] 
     * @param {string} [targaContains] 
     * @param {string} [targaDoesNotContain] 
     * @param {string} [targaEquals] 
     * @param {Array&lt;string&gt;} [targaIn] 
     * @param {string} [targaNotEquals] 
     * @param {Array&lt;string&gt;} [targaNotIn] 
     * @param {boolean} [targaSpecified] 
     * @param {string} [veicoloEquals] 
     * @param {Array&lt;string&gt;} [veicoloIn] 
     * @param {string} [veicoloNotEquals] 
     * @param {Array&lt;string&gt;} [veicoloNotIn] 
     * @param {boolean} [veicoloSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public countTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any) {
        return TesseraResourceApiFp(this.configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary createTessera
     * @param {Tessera} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public createTesseraUsingPOST(body?: Tessera, options?: any) {
        return TesseraResourceApiFp(this.configuration).createTesseraUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary deleteTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public deleteTesseraUsingDELETE(id: number, options?: any) {
        return TesseraResourceApiFp(this.configuration).deleteTesseraUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getAllTesseras
     * @param {string} [carburanteEquals] 
     * @param {Array&lt;string&gt;} [carburanteIn] 
     * @param {string} [carburanteNotEquals] 
     * @param {Array&lt;string&gt;} [carburanteNotIn] 
     * @param {boolean} [carburanteSpecified] 
     * @param {number} [cittadinoIdEquals] 
     * @param {number} [cittadinoIdGreaterThan] 
     * @param {number} [cittadinoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [cittadinoIdIn] 
     * @param {number} [cittadinoIdLessThan] 
     * @param {number} [cittadinoIdLessThanOrEqual] 
     * @param {number} [cittadinoIdNotEquals] 
     * @param {Array&lt;number&gt;} [cittadinoIdNotIn] 
     * @param {boolean} [cittadinoIdSpecified] 
     * @param {string} [codiceContains] 
     * @param {string} [codiceDoesNotContain] 
     * @param {string} [codiceEquals] 
     * @param {Array&lt;string&gt;} [codiceIn] 
     * @param {string} [codiceNotEquals] 
     * @param {Array&lt;string&gt;} [codiceNotIn] 
     * @param {boolean} [codiceSpecified] 
     * @param {Date} [dataEmissioneEquals] 
     * @param {Date} [dataEmissioneGreaterThan] 
     * @param {Date} [dataEmissioneGreaterThanOrEqual] 
     * @param {number} [dataEmissioneIn0DayOfMonth] 
     * @param {string} [dataEmissioneIn0DayOfWeek] 
     * @param {number} [dataEmissioneIn0DayOfYear] 
     * @param {number} [dataEmissioneIn0Hour] 
     * @param {number} [dataEmissioneIn0Minute] 
     * @param {string} [dataEmissioneIn0Month] 
     * @param {number} [dataEmissioneIn0MonthValue] 
     * @param {number} [dataEmissioneIn0Nano] 
     * @param {string} [dataEmissioneIn0OffsetId] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneIn0OffsetRulesTransitions0Instant] 
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap] 
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds] 
     * @param {number} [dataEmissioneIn0Second] 
     * @param {number} [dataEmissioneIn0Year] 
     * @param {string} [dataEmissioneIn0ZoneId] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneIn0ZoneRulesTransitions0Instant] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId] 
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap] 
     * @param {Date} [dataEmissioneLessThan] 
     * @param {Date} [dataEmissioneLessThanOrEqual] 
     * @param {Date} [dataEmissioneNotEquals] 
     * @param {number} [dataEmissioneNotIn0DayOfMonth] 
     * @param {string} [dataEmissioneNotIn0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0DayOfYear] 
     * @param {number} [dataEmissioneNotIn0Hour] 
     * @param {number} [dataEmissioneNotIn0Minute] 
     * @param {string} [dataEmissioneNotIn0Month] 
     * @param {number} [dataEmissioneNotIn0MonthValue] 
     * @param {number} [dataEmissioneNotIn0Nano] 
     * @param {string} [dataEmissioneNotIn0OffsetId] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneNotIn0OffsetRulesTransitions0Instant] 
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap] 
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds] 
     * @param {number} [dataEmissioneNotIn0Second] 
     * @param {number} [dataEmissioneNotIn0Year] 
     * @param {string} [dataEmissioneNotIn0ZoneId] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap] 
     * @param {Date} [dataEmissioneNotIn0ZoneRulesTransitions0Instant] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds] 
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId] 
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds] 
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap] 
     * @param {boolean} [dataEmissioneSpecified] 
     * @param {number} [delegaIdEquals] 
     * @param {number} [delegaIdGreaterThan] 
     * @param {number} [delegaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [delegaIdIn] 
     * @param {number} [delegaIdLessThan] 
     * @param {number} [delegaIdLessThanOrEqual] 
     * @param {number} [delegaIdNotEquals] 
     * @param {Array&lt;number&gt;} [delegaIdNotIn] 
     * @param {boolean} [delegaIdSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {number} [page] Page number of the requested page
     * @param {number} [rifornimentoIdEquals] 
     * @param {number} [rifornimentoIdGreaterThan] 
     * @param {number} [rifornimentoIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [rifornimentoIdIn] 
     * @param {number} [rifornimentoIdLessThan] 
     * @param {number} [rifornimentoIdLessThanOrEqual] 
     * @param {number} [rifornimentoIdNotEquals] 
     * @param {Array&lt;number&gt;} [rifornimentoIdNotIn] 
     * @param {boolean} [rifornimentoIdSpecified] 
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains] 
     * @param {string} [targaDoesNotContain] 
     * @param {string} [targaEquals] 
     * @param {Array&lt;string&gt;} [targaIn] 
     * @param {string} [targaNotEquals] 
     * @param {Array&lt;string&gt;} [targaNotIn] 
     * @param {boolean} [targaSpecified] 
     * @param {string} [veicoloEquals] 
     * @param {Array&lt;string&gt;} [veicoloIn] 
     * @param {string} [veicoloNotEquals] 
     * @param {Array&lt;string&gt;} [veicoloNotIn] 
     * @param {boolean} [veicoloSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public getAllTesserasUsingGET(carburanteEquals?: string, carburanteIn?: Array<string>, carburanteNotEquals?: string, carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: Date, dataEmissioneGreaterThan?: Date, dataEmissioneGreaterThanOrEqual?: Date, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: string, dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: string, dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: Date, dataEmissioneLessThanOrEqual?: Date, dataEmissioneNotEquals?: Date, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: string, dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: string, dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: string, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: Date, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: Date, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: Date, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: string, veicoloIn?: Array<string>, veicoloNotEquals?: string, veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any) {
        return TesseraResourceApiFp(this.configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public getTesseraUsingGET(id: number, options?: any) {
        return TesseraResourceApiFp(this.configuration).getTesseraUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary partialUpdateTessera
     * @param {Tessera} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public partialUpdateTesseraUsingPATCH(body?: Tessera, options?: any) {
        return TesseraResourceApiFp(this.configuration).partialUpdateTesseraUsingPATCH(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary updateTessera
     * @param {Tessera} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesseraResourceApi
     */
    public updateTesseraUsingPUT(body?: Tessera, options?: any) {
        return TesseraResourceApiFp(this.configuration).updateTesseraUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
