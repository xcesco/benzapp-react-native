/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Cittadino } from '../models';
/**
 * CittadinoResourceApi - axios parameter creator
 * @export
 */
export const CittadinoResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCittadinosUsingGET: async (codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cittadinos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (codiceFiscaleContains !== undefined) {
                localVarQueryParameter['codiceFiscale.contains'] = codiceFiscaleContains;
            }

            if (codiceFiscaleDoesNotContain !== undefined) {
                localVarQueryParameter['codiceFiscale.doesNotContain'] = codiceFiscaleDoesNotContain;
            }

            if (codiceFiscaleEquals !== undefined) {
                localVarQueryParameter['codiceFiscale.equals'] = codiceFiscaleEquals;
            }

            if (codiceFiscaleIn) {
                localVarQueryParameter['codiceFiscale.in'] = codiceFiscaleIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceFiscaleNotEquals !== undefined) {
                localVarQueryParameter['codiceFiscale.notEquals'] = codiceFiscaleNotEquals;
            }

            if (codiceFiscaleNotIn) {
                localVarQueryParameter['codiceFiscale.notIn'] = codiceFiscaleNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceFiscaleSpecified !== undefined) {
                localVarQueryParameter['codiceFiscale.specified'] = codiceFiscaleSpecified;
            }

            if (cognomeContains !== undefined) {
                localVarQueryParameter['cognome.contains'] = cognomeContains;
            }

            if (cognomeDoesNotContain !== undefined) {
                localVarQueryParameter['cognome.doesNotContain'] = cognomeDoesNotContain;
            }

            if (cognomeEquals !== undefined) {
                localVarQueryParameter['cognome.equals'] = cognomeEquals;
            }

            if (cognomeIn) {
                localVarQueryParameter['cognome.in'] = cognomeIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cognomeNotEquals !== undefined) {
                localVarQueryParameter['cognome.notEquals'] = cognomeNotEquals;
            }

            if (cognomeNotIn) {
                localVarQueryParameter['cognome.notIn'] = cognomeNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cognomeSpecified !== undefined) {
                localVarQueryParameter['cognome.specified'] = cognomeSpecified;
            }

            if (delegaIdEquals !== undefined) {
                localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
            }

            if (delegaIdGreaterThan !== undefined) {
                localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
            }

            if (delegaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
            }

            if (delegaIdIn) {
                localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdLessThan !== undefined) {
                localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
            }

            if (delegaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
            }

            if (delegaIdNotEquals !== undefined) {
                localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
            }

            if (delegaIdNotIn) {
                localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdSpecified !== undefined) {
                localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
            }

            if (fasciaIdEquals !== undefined) {
                localVarQueryParameter['fasciaId.equals'] = fasciaIdEquals;
            }

            if (fasciaIdGreaterThan !== undefined) {
                localVarQueryParameter['fasciaId.greaterThan'] = fasciaIdGreaterThan;
            }

            if (fasciaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['fasciaId.greaterThanOrEqual'] = fasciaIdGreaterThanOrEqual;
            }

            if (fasciaIdIn) {
                localVarQueryParameter['fasciaId.in'] = fasciaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (fasciaIdLessThan !== undefined) {
                localVarQueryParameter['fasciaId.lessThan'] = fasciaIdLessThan;
            }

            if (fasciaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['fasciaId.lessThanOrEqual'] = fasciaIdLessThanOrEqual;
            }

            if (fasciaIdNotEquals !== undefined) {
                localVarQueryParameter['fasciaId.notEquals'] = fasciaIdNotEquals;
            }

            if (fasciaIdNotIn) {
                localVarQueryParameter['fasciaId.notIn'] = fasciaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (fasciaIdSpecified !== undefined) {
                localVarQueryParameter['fasciaId.specified'] = fasciaIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (nomeContains !== undefined) {
                localVarQueryParameter['nome.contains'] = nomeContains;
            }

            if (nomeDoesNotContain !== undefined) {
                localVarQueryParameter['nome.doesNotContain'] = nomeDoesNotContain;
            }

            if (nomeEquals !== undefined) {
                localVarQueryParameter['nome.equals'] = nomeEquals;
            }

            if (nomeIn) {
                localVarQueryParameter['nome.in'] = nomeIn.join(COLLECTION_FORMATS.pipe);
            }

            if (nomeNotEquals !== undefined) {
                localVarQueryParameter['nome.notEquals'] = nomeNotEquals;
            }

            if (nomeNotIn) {
                localVarQueryParameter['nome.notIn'] = nomeNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (nomeSpecified !== undefined) {
                localVarQueryParameter['nome.specified'] = nomeSpecified;
            }

            if (ownerContains !== undefined) {
                localVarQueryParameter['owner.contains'] = ownerContains;
            }

            if (ownerDoesNotContain !== undefined) {
                localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
            }

            if (ownerEquals !== undefined) {
                localVarQueryParameter['owner.equals'] = ownerEquals;
            }

            if (ownerIn) {
                localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerNotEquals !== undefined) {
                localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
            }

            if (ownerNotIn) {
                localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerSpecified !== undefined) {
                localVarQueryParameter['owner.specified'] = ownerSpecified;
            }

            if (tesseraIdEquals !== undefined) {
                localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
            }

            if (tesseraIdGreaterThan !== undefined) {
                localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
            }

            if (tesseraIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
            }

            if (tesseraIdIn) {
                localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tesseraIdLessThan !== undefined) {
                localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
            }

            if (tesseraIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
            }

            if (tesseraIdNotEquals !== undefined) {
                localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
            }

            if (tesseraIdNotIn) {
                localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tesseraIdSpecified !== undefined) {
                localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCittadinoUsingPOST: async (body?: Cittadino, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cittadinos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCittadinoUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCittadinoUsingDELETE.');
            }
            const localVarPath = `/api/cittadinos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCittadinosUsingGET: async (codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cittadinos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            if (codiceFiscaleContains !== undefined) {
                localVarQueryParameter['codiceFiscale.contains'] = codiceFiscaleContains;
            }

            if (codiceFiscaleDoesNotContain !== undefined) {
                localVarQueryParameter['codiceFiscale.doesNotContain'] = codiceFiscaleDoesNotContain;
            }

            if (codiceFiscaleEquals !== undefined) {
                localVarQueryParameter['codiceFiscale.equals'] = codiceFiscaleEquals;
            }

            if (codiceFiscaleIn) {
                localVarQueryParameter['codiceFiscale.in'] = codiceFiscaleIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceFiscaleNotEquals !== undefined) {
                localVarQueryParameter['codiceFiscale.notEquals'] = codiceFiscaleNotEquals;
            }

            if (codiceFiscaleNotIn) {
                localVarQueryParameter['codiceFiscale.notIn'] = codiceFiscaleNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (codiceFiscaleSpecified !== undefined) {
                localVarQueryParameter['codiceFiscale.specified'] = codiceFiscaleSpecified;
            }

            if (cognomeContains !== undefined) {
                localVarQueryParameter['cognome.contains'] = cognomeContains;
            }

            if (cognomeDoesNotContain !== undefined) {
                localVarQueryParameter['cognome.doesNotContain'] = cognomeDoesNotContain;
            }

            if (cognomeEquals !== undefined) {
                localVarQueryParameter['cognome.equals'] = cognomeEquals;
            }

            if (cognomeIn) {
                localVarQueryParameter['cognome.in'] = cognomeIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cognomeNotEquals !== undefined) {
                localVarQueryParameter['cognome.notEquals'] = cognomeNotEquals;
            }

            if (cognomeNotIn) {
                localVarQueryParameter['cognome.notIn'] = cognomeNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (cognomeSpecified !== undefined) {
                localVarQueryParameter['cognome.specified'] = cognomeSpecified;
            }

            if (delegaIdEquals !== undefined) {
                localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
            }

            if (delegaIdGreaterThan !== undefined) {
                localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
            }

            if (delegaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
            }

            if (delegaIdIn) {
                localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdLessThan !== undefined) {
                localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
            }

            if (delegaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
            }

            if (delegaIdNotEquals !== undefined) {
                localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
            }

            if (delegaIdNotIn) {
                localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (delegaIdSpecified !== undefined) {
                localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
            }

            if (fasciaIdEquals !== undefined) {
                localVarQueryParameter['fasciaId.equals'] = fasciaIdEquals;
            }

            if (fasciaIdGreaterThan !== undefined) {
                localVarQueryParameter['fasciaId.greaterThan'] = fasciaIdGreaterThan;
            }

            if (fasciaIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['fasciaId.greaterThanOrEqual'] = fasciaIdGreaterThanOrEqual;
            }

            if (fasciaIdIn) {
                localVarQueryParameter['fasciaId.in'] = fasciaIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (fasciaIdLessThan !== undefined) {
                localVarQueryParameter['fasciaId.lessThan'] = fasciaIdLessThan;
            }

            if (fasciaIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['fasciaId.lessThanOrEqual'] = fasciaIdLessThanOrEqual;
            }

            if (fasciaIdNotEquals !== undefined) {
                localVarQueryParameter['fasciaId.notEquals'] = fasciaIdNotEquals;
            }

            if (fasciaIdNotIn) {
                localVarQueryParameter['fasciaId.notIn'] = fasciaIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (fasciaIdSpecified !== undefined) {
                localVarQueryParameter['fasciaId.specified'] = fasciaIdSpecified;
            }

            if (idEquals !== undefined) {
                localVarQueryParameter['id.equals'] = idEquals;
            }

            if (idGreaterThan !== undefined) {
                localVarQueryParameter['id.greaterThan'] = idGreaterThan;
            }

            if (idGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
            }

            if (idIn) {
                localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idLessThan !== undefined) {
                localVarQueryParameter['id.lessThan'] = idLessThan;
            }

            if (idLessThanOrEqual !== undefined) {
                localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
            }

            if (idNotEquals !== undefined) {
                localVarQueryParameter['id.notEquals'] = idNotEquals;
            }

            if (idNotIn) {
                localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (idSpecified !== undefined) {
                localVarQueryParameter['id.specified'] = idSpecified;
            }

            if (nomeContains !== undefined) {
                localVarQueryParameter['nome.contains'] = nomeContains;
            }

            if (nomeDoesNotContain !== undefined) {
                localVarQueryParameter['nome.doesNotContain'] = nomeDoesNotContain;
            }

            if (nomeEquals !== undefined) {
                localVarQueryParameter['nome.equals'] = nomeEquals;
            }

            if (nomeIn) {
                localVarQueryParameter['nome.in'] = nomeIn.join(COLLECTION_FORMATS.pipe);
            }

            if (nomeNotEquals !== undefined) {
                localVarQueryParameter['nome.notEquals'] = nomeNotEquals;
            }

            if (nomeNotIn) {
                localVarQueryParameter['nome.notIn'] = nomeNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (nomeSpecified !== undefined) {
                localVarQueryParameter['nome.specified'] = nomeSpecified;
            }

            if (ownerContains !== undefined) {
                localVarQueryParameter['owner.contains'] = ownerContains;
            }

            if (ownerDoesNotContain !== undefined) {
                localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
            }

            if (ownerEquals !== undefined) {
                localVarQueryParameter['owner.equals'] = ownerEquals;
            }

            if (ownerIn) {
                localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerNotEquals !== undefined) {
                localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
            }

            if (ownerNotIn) {
                localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (ownerSpecified !== undefined) {
                localVarQueryParameter['owner.specified'] = ownerSpecified;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (tesseraIdEquals !== undefined) {
                localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
            }

            if (tesseraIdGreaterThan !== undefined) {
                localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
            }

            if (tesseraIdGreaterThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
            }

            if (tesseraIdIn) {
                localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tesseraIdLessThan !== undefined) {
                localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
            }

            if (tesseraIdLessThanOrEqual !== undefined) {
                localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
            }

            if (tesseraIdNotEquals !== undefined) {
                localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
            }

            if (tesseraIdNotIn) {
                localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipe);
            }

            if (tesseraIdSpecified !== undefined) {
                localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCittadinoUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCittadinoUsingGET.');
            }
            const localVarPath = `/api/cittadinos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary partialUpdateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCittadinoUsingPATCH: async (body?: Cittadino, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cittadinos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCittadinoUsingPUT: async (body?: Cittadino, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cittadinos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CittadinoResourceApi - functional programming interface
 * @export
 */
export const CittadinoResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary countCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCittadinoUsingPOST(body?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).createCittadinoUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCittadinoUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).deleteCittadinoUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAllCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cittadino>>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCittadinoUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).getCittadinoUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary partialUpdateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateCittadinoUsingPATCH(body?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).partialUpdateCittadinoUsingPATCH(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCittadinoUsingPUT(body?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
            const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).updateCittadinoUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CittadinoResourceApi - factory interface
 * @export
 */
export const CittadinoResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary countCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<number> {
            return CittadinoResourceApiFp(configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCittadinoUsingPOST(body?: Cittadino, options?: any): AxiosPromise<Cittadino> {
            return CittadinoResourceApiFp(configuration).createCittadinoUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCittadinoUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return CittadinoResourceApiFp(configuration).deleteCittadinoUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllCittadinos
         * @param {string} [codiceFiscaleContains] 
         * @param {string} [codiceFiscaleDoesNotContain] 
         * @param {string} [codiceFiscaleEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
         * @param {string} [codiceFiscaleNotEquals] 
         * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
         * @param {boolean} [codiceFiscaleSpecified] 
         * @param {string} [cognomeContains] 
         * @param {string} [cognomeDoesNotContain] 
         * @param {string} [cognomeEquals] 
         * @param {Array&lt;string&gt;} [cognomeIn] 
         * @param {string} [cognomeNotEquals] 
         * @param {Array&lt;string&gt;} [cognomeNotIn] 
         * @param {boolean} [cognomeSpecified] 
         * @param {number} [delegaIdEquals] 
         * @param {number} [delegaIdGreaterThan] 
         * @param {number} [delegaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [delegaIdIn] 
         * @param {number} [delegaIdLessThan] 
         * @param {number} [delegaIdLessThanOrEqual] 
         * @param {number} [delegaIdNotEquals] 
         * @param {Array&lt;number&gt;} [delegaIdNotIn] 
         * @param {boolean} [delegaIdSpecified] 
         * @param {number} [fasciaIdEquals] 
         * @param {number} [fasciaIdGreaterThan] 
         * @param {number} [fasciaIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [fasciaIdIn] 
         * @param {number} [fasciaIdLessThan] 
         * @param {number} [fasciaIdLessThanOrEqual] 
         * @param {number} [fasciaIdNotEquals] 
         * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
         * @param {boolean} [fasciaIdSpecified] 
         * @param {number} [idEquals] 
         * @param {number} [idGreaterThan] 
         * @param {number} [idGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [idIn] 
         * @param {number} [idLessThan] 
         * @param {number} [idLessThanOrEqual] 
         * @param {number} [idNotEquals] 
         * @param {Array&lt;number&gt;} [idNotIn] 
         * @param {boolean} [idSpecified] 
         * @param {string} [nomeContains] 
         * @param {string} [nomeDoesNotContain] 
         * @param {string} [nomeEquals] 
         * @param {Array&lt;string&gt;} [nomeIn] 
         * @param {string} [nomeNotEquals] 
         * @param {Array&lt;string&gt;} [nomeNotIn] 
         * @param {boolean} [nomeSpecified] 
         * @param {string} [ownerContains] 
         * @param {string} [ownerDoesNotContain] 
         * @param {string} [ownerEquals] 
         * @param {Array&lt;string&gt;} [ownerIn] 
         * @param {string} [ownerNotEquals] 
         * @param {Array&lt;string&gt;} [ownerNotIn] 
         * @param {boolean} [ownerSpecified] 
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {number} [tesseraIdEquals] 
         * @param {number} [tesseraIdGreaterThan] 
         * @param {number} [tesseraIdGreaterThanOrEqual] 
         * @param {Array&lt;number&gt;} [tesseraIdIn] 
         * @param {number} [tesseraIdLessThan] 
         * @param {number} [tesseraIdLessThanOrEqual] 
         * @param {number} [tesseraIdNotEquals] 
         * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
         * @param {boolean} [tesseraIdSpecified] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<Array<Cittadino>> {
            return CittadinoResourceApiFp(configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCittadino
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCittadinoUsingGET(id: number, options?: any): AxiosPromise<Cittadino> {
            return CittadinoResourceApiFp(configuration).getCittadinoUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary partialUpdateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCittadinoUsingPATCH(body?: Cittadino, options?: any): AxiosPromise<Cittadino> {
            return CittadinoResourceApiFp(configuration).partialUpdateCittadinoUsingPATCH(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCittadino
         * @param {Cittadino} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCittadinoUsingPUT(body?: Cittadino, options?: any): AxiosPromise<Cittadino> {
            return CittadinoResourceApiFp(configuration).updateCittadinoUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CittadinoResourceApi - object-oriented interface
 * @export
 * @class CittadinoResourceApi
 * @extends {BaseAPI}
 */
export class CittadinoResourceApi extends BaseAPI {
    /**
     * 
     * @summary countCittadinos
     * @param {string} [codiceFiscaleContains] 
     * @param {string} [codiceFiscaleDoesNotContain] 
     * @param {string} [codiceFiscaleEquals] 
     * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
     * @param {string} [codiceFiscaleNotEquals] 
     * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
     * @param {boolean} [codiceFiscaleSpecified] 
     * @param {string} [cognomeContains] 
     * @param {string} [cognomeDoesNotContain] 
     * @param {string} [cognomeEquals] 
     * @param {Array&lt;string&gt;} [cognomeIn] 
     * @param {string} [cognomeNotEquals] 
     * @param {Array&lt;string&gt;} [cognomeNotIn] 
     * @param {boolean} [cognomeSpecified] 
     * @param {number} [delegaIdEquals] 
     * @param {number} [delegaIdGreaterThan] 
     * @param {number} [delegaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [delegaIdIn] 
     * @param {number} [delegaIdLessThan] 
     * @param {number} [delegaIdLessThanOrEqual] 
     * @param {number} [delegaIdNotEquals] 
     * @param {Array&lt;number&gt;} [delegaIdNotIn] 
     * @param {boolean} [delegaIdSpecified] 
     * @param {number} [fasciaIdEquals] 
     * @param {number} [fasciaIdGreaterThan] 
     * @param {number} [fasciaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [fasciaIdIn] 
     * @param {number} [fasciaIdLessThan] 
     * @param {number} [fasciaIdLessThanOrEqual] 
     * @param {number} [fasciaIdNotEquals] 
     * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
     * @param {boolean} [fasciaIdSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {string} [nomeContains] 
     * @param {string} [nomeDoesNotContain] 
     * @param {string} [nomeEquals] 
     * @param {Array&lt;string&gt;} [nomeIn] 
     * @param {string} [nomeNotEquals] 
     * @param {Array&lt;string&gt;} [nomeNotIn] 
     * @param {boolean} [nomeSpecified] 
     * @param {string} [ownerContains] 
     * @param {string} [ownerDoesNotContain] 
     * @param {string} [ownerEquals] 
     * @param {Array&lt;string&gt;} [ownerIn] 
     * @param {string} [ownerNotEquals] 
     * @param {Array&lt;string&gt;} [ownerNotIn] 
     * @param {boolean} [ownerSpecified] 
     * @param {number} [tesseraIdEquals] 
     * @param {number} [tesseraIdGreaterThan] 
     * @param {number} [tesseraIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [tesseraIdIn] 
     * @param {number} [tesseraIdLessThan] 
     * @param {number} [tesseraIdLessThanOrEqual] 
     * @param {number} [tesseraIdNotEquals] 
     * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
     * @param {boolean} [tesseraIdSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
        return CittadinoResourceApiFp(this.configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary createCittadino
     * @param {Cittadino} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public createCittadinoUsingPOST(body?: Cittadino, options?: any) {
        return CittadinoResourceApiFp(this.configuration).createCittadinoUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary deleteCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public deleteCittadinoUsingDELETE(id: number, options?: any) {
        return CittadinoResourceApiFp(this.configuration).deleteCittadinoUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getAllCittadinos
     * @param {string} [codiceFiscaleContains] 
     * @param {string} [codiceFiscaleDoesNotContain] 
     * @param {string} [codiceFiscaleEquals] 
     * @param {Array&lt;string&gt;} [codiceFiscaleIn] 
     * @param {string} [codiceFiscaleNotEquals] 
     * @param {Array&lt;string&gt;} [codiceFiscaleNotIn] 
     * @param {boolean} [codiceFiscaleSpecified] 
     * @param {string} [cognomeContains] 
     * @param {string} [cognomeDoesNotContain] 
     * @param {string} [cognomeEquals] 
     * @param {Array&lt;string&gt;} [cognomeIn] 
     * @param {string} [cognomeNotEquals] 
     * @param {Array&lt;string&gt;} [cognomeNotIn] 
     * @param {boolean} [cognomeSpecified] 
     * @param {number} [delegaIdEquals] 
     * @param {number} [delegaIdGreaterThan] 
     * @param {number} [delegaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [delegaIdIn] 
     * @param {number} [delegaIdLessThan] 
     * @param {number} [delegaIdLessThanOrEqual] 
     * @param {number} [delegaIdNotEquals] 
     * @param {Array&lt;number&gt;} [delegaIdNotIn] 
     * @param {boolean} [delegaIdSpecified] 
     * @param {number} [fasciaIdEquals] 
     * @param {number} [fasciaIdGreaterThan] 
     * @param {number} [fasciaIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [fasciaIdIn] 
     * @param {number} [fasciaIdLessThan] 
     * @param {number} [fasciaIdLessThanOrEqual] 
     * @param {number} [fasciaIdNotEquals] 
     * @param {Array&lt;number&gt;} [fasciaIdNotIn] 
     * @param {boolean} [fasciaIdSpecified] 
     * @param {number} [idEquals] 
     * @param {number} [idGreaterThan] 
     * @param {number} [idGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [idIn] 
     * @param {number} [idLessThan] 
     * @param {number} [idLessThanOrEqual] 
     * @param {number} [idNotEquals] 
     * @param {Array&lt;number&gt;} [idNotIn] 
     * @param {boolean} [idSpecified] 
     * @param {string} [nomeContains] 
     * @param {string} [nomeDoesNotContain] 
     * @param {string} [nomeEquals] 
     * @param {Array&lt;string&gt;} [nomeIn] 
     * @param {string} [nomeNotEquals] 
     * @param {Array&lt;string&gt;} [nomeNotIn] 
     * @param {boolean} [nomeSpecified] 
     * @param {string} [ownerContains] 
     * @param {string} [ownerDoesNotContain] 
     * @param {string} [ownerEquals] 
     * @param {Array&lt;string&gt;} [ownerIn] 
     * @param {string} [ownerNotEquals] 
     * @param {Array&lt;string&gt;} [ownerNotIn] 
     * @param {boolean} [ownerSpecified] 
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals] 
     * @param {number} [tesseraIdGreaterThan] 
     * @param {number} [tesseraIdGreaterThanOrEqual] 
     * @param {Array&lt;number&gt;} [tesseraIdIn] 
     * @param {number} [tesseraIdLessThan] 
     * @param {number} [tesseraIdLessThanOrEqual] 
     * @param {number} [tesseraIdNotEquals] 
     * @param {Array&lt;number&gt;} [tesseraIdNotIn] 
     * @param {boolean} [tesseraIdSpecified] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
        return CittadinoResourceApiFp(this.configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public getCittadinoUsingGET(id: number, options?: any) {
        return CittadinoResourceApiFp(this.configuration).getCittadinoUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary partialUpdateCittadino
     * @param {Cittadino} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public partialUpdateCittadinoUsingPATCH(body?: Cittadino, options?: any) {
        return CittadinoResourceApiFp(this.configuration).partialUpdateCittadinoUsingPATCH(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary updateCittadino
     * @param {Cittadino} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CittadinoResourceApi
     */
    public updateCittadinoUsingPUT(body?: Cittadino, options?: any) {
        return CittadinoResourceApiFp(this.configuration).updateCittadinoUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
