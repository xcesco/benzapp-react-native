/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Marchio } from '../models';
/**
 * MarchioResourceApi - axios parameter creator
 * @export
 */
export const MarchioResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary createMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarchioUsingPOST: async (body?: Marchio, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/marchios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary deleteMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarchioUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMarchioUsingDELETE.');
            }
            const localVarPath = `/api/marchios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getAllMarchios
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarchiosUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/marchios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarchioUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMarchioUsingGET.');
            }
            const localVarPath = `/api/marchios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary partialUpdateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateMarchioUsingPATCH: async (body?: Marchio, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/marchios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarchioUsingPUT: async (body?: Marchio, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/marchios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarchioResourceApi - functional programming interface
 * @export
 */
export const MarchioResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMarchioUsingPOST(body?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).createMarchioUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMarchioUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).deleteMarchioUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllMarchios
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Marchio>>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).getAllMarchiosUsingGET(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarchioUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).getMarchioUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary partialUpdateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateMarchioUsingPATCH(body?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).partialUpdateMarchioUsingPATCH(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMarchioUsingPUT(body?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
            const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).updateMarchioUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MarchioResourceApi - factory interface
 * @export
 */
export const MarchioResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary createMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarchioUsingPOST(body?: Marchio, options?: any): AxiosPromise<Marchio> {
            return MarchioResourceApiFp(configuration).createMarchioUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarchioUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return MarchioResourceApiFp(configuration).deleteMarchioUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getAllMarchios
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<Marchio>> {
            return MarchioResourceApiFp(configuration).getAllMarchiosUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getMarchio
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarchioUsingGET(id: number, options?: any): AxiosPromise<Marchio> {
            return MarchioResourceApiFp(configuration).getMarchioUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary partialUpdateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateMarchioUsingPATCH(body?: Marchio, options?: any): AxiosPromise<Marchio> {
            return MarchioResourceApiFp(configuration).partialUpdateMarchioUsingPATCH(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateMarchio
         * @param {Marchio} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarchioUsingPUT(body?: Marchio, options?: any): AxiosPromise<Marchio> {
            return MarchioResourceApiFp(configuration).updateMarchioUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarchioResourceApi - object-oriented interface
 * @export
 * @class MarchioResourceApi
 * @extends {BaseAPI}
 */
export class MarchioResourceApi extends BaseAPI {
    /**
     *
     * @summary createMarchio
     * @param {Marchio} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public createMarchioUsingPOST(body?: Marchio, options?: any) {
        return MarchioResourceApiFp(this.configuration).createMarchioUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public deleteMarchioUsingDELETE(id: number, options?: any) {
        return MarchioResourceApiFp(this.configuration).deleteMarchioUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getAllMarchios
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
        return MarchioResourceApiFp(this.configuration).getAllMarchiosUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public getMarchioUsingGET(id: number, options?: any) {
        return MarchioResourceApiFp(this.configuration).getMarchioUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary partialUpdateMarchio
     * @param {Marchio} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public partialUpdateMarchioUsingPATCH(body?: Marchio, options?: any) {
        return MarchioResourceApiFp(this.configuration).partialUpdateMarchioUsingPATCH(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateMarchio
     * @param {Marchio} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarchioResourceApi
     */
    public updateMarchioUsingPUT(body?: Marchio, options?: any) {
        return MarchioResourceApiFp(this.configuration).updateMarchioUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
