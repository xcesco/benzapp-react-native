/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminUserDTO } from '../models';
import { User } from '../models';
/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary createUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (body?: AdminUserDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
           const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE: async (login: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling deleteUserUsingDELETE.');
            }
            const localVarPath = `/api/admin/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET: async (login: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling getUserUsingGET.');
            }
            const localVarPath = `/api/admin/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
          const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT: async (body?: AdminUserDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication benzappAuth required
            const authHeader = {'Authorization':  `Bearer ${configuration!.accessToken}`};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(body?: AdminUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).createUserUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsingDELETE(login: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).deleteUserUsingDELETE(login, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminUserDTO>>> {
            const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).getAllUsersUsingGET(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsingGET(login: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
            const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).getUserUsingGET(login, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsingPUT(body?: AdminUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
            const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).updateUserUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary createUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(body?: AdminUserDTO, options?: any): AxiosPromise<User> {
            return UserResourceApiFp(configuration).createUserUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE(login: string, options?: any): AxiosPromise<void> {
            return UserResourceApiFp(configuration).deleteUserUsingDELETE(login, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [page] Page number of the requested page
         * @param {number} [size] Size of a page
         * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<AdminUserDTO>> {
            return UserResourceApiFp(configuration).getAllUsersUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(login: string, options?: any): AxiosPromise<AdminUserDTO> {
            return UserResourceApiFp(configuration).getUserUsingGET(login, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateUser
         * @param {AdminUserDTO} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT(body?: AdminUserDTO, options?: any): AxiosPromise<AdminUserDTO> {
            return UserResourceApiFp(configuration).updateUserUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
    /**
     *
     * @summary createUser
     * @param {AdminUserDTO} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public createUserUsingPOST(body?: AdminUserDTO, options?: any) {
        return UserResourceApiFp(this.configuration).createUserUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public deleteUserUsingDELETE(login: string, options?: any) {
        return UserResourceApiFp(this.configuration).deleteUserUsingDELETE(login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getAllUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array&lt;string&gt;} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
        return UserResourceApiFp(this.configuration).getAllUsersUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getUserUsingGET(login: string, options?: any) {
        return UserResourceApiFp(this.configuration).getUserUsingGET(login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateUser
     * @param {AdminUserDTO} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public updateUserUsingPUT(body?: AdminUserDTO, options?: any) {
        return UserResourceApiFp(this.configuration).updateUserUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
