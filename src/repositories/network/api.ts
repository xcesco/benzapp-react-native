/* tslint:disable */
/* eslint-disable */
/**
 * benzapp API
 * benzapp API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';
import {AppDebugLog} from '../../utils/AppDebug';

/**
 *
 * @export
 * @interface AdminUserDTO
 */
export interface AdminUserDTO {
  /**
   *
   * @type {boolean}
   * @memberof AdminUserDTO
   */
  activated?: boolean;
  /**
   *
   * @type {Set<string>}
   * @memberof AdminUserDTO
   */
  authorities?: Set<string>;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  firstName?: string;
  /**
   *
   * @type {number}
   * @memberof AdminUserDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  imageUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastModifiedDate?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  login: string;
}

/**
 *
 * @export
 * @interface Cittadino
 */
export interface Cittadino {
  /**
   *
   * @type {string}
   * @memberof Cittadino
   */
  codiceFiscale?: string;
  /**
   *
   * @type {string}
   * @memberof Cittadino
   */
  cognome?: string;
  /**
   *
   * @type {Set<Delega>}
   * @memberof Cittadino
   */
  delegas?: Set<Delega>;
  /**
   *
   * @type {Fascia}
   * @memberof Cittadino
   */
  fascia?: Fascia;
  /**
   *
   * @type {number}
   * @memberof Cittadino
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Cittadino
   */
  nome?: string;
  /**
   *
   * @type {string}
   * @memberof Cittadino
   */
  owner?: string;
  /**
   *
   * @type {Set<Tessera>}
   * @memberof Cittadino
   */
  tesseras?: Set<Tessera>;
}

/**
 *
 * @export
 * @interface Delega
 */
export interface Delega {
  /**
   *
   * @type {Cittadino}
   * @memberof Delega
   */
  cittadino?: Cittadino;
  /**
   *
   * @type {number}
   * @memberof Delega
   */
  id?: number;
  /**
   *
   * @type {Tessera}
   * @memberof Delega
   */
  tessera?: Tessera;
}

/**
 *
 * @export
 * @interface Device
 */
export interface Device {
  /**
   *
   * @type {string}
   * @memberof Device
   */
  deviceId: string;
  /**
   *
   * @type {number}
   * @memberof Device
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Device
   */
  owner: string;
}

/**
 *
 * @export
 * @interface Fascia
 */
export interface Fascia {
  /**
   *
   * @type {Set<Cittadino>}
   * @memberof Fascia
   */
  cittadinos?: Set<Cittadino>;
  /**
   *
   * @type {string}
   * @memberof Fascia
   */
  descrizione?: string;
  /**
   *
   * @type {number}
   * @memberof Fascia
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof Fascia
   */
  scontoBenzina?: number;
  /**
   *
   * @type {number}
   * @memberof Fascia
   */
  scontoGasolio?: number;
}

/**
 *
 * @export
 * @interface Gestore
 */
export interface Gestore {
  /**
   *
   * @type {number}
   * @memberof Gestore
   */
  benzinaPrezzoAlLitro?: number;
  /**
   *
   * @type {string}
   * @memberof Gestore
   */
  comune?: string;
  /**
   *
   * @type {number}
   * @memberof Gestore
   */
  gasolioPrezzoAlLitro?: number;
  /**
   *
   * @type {number}
   * @memberof Gestore
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Gestore
   */
  indirizzo?: string;
  /**
   *
   * @type {number}
   * @memberof Gestore
   */
  latitudine?: number;
  /**
   *
   * @type {number}
   * @memberof Gestore
   */
  longitudine?: number;
  /**
   *
   * @type {Marchio}
   * @memberof Gestore
   */
  marchio?: Marchio;
  /**
   *
   * @type {string}
   * @memberof Gestore
   */
  owner?: string;
  /**
   *
   * @type {string}
   * @memberof Gestore
   */
  provincia?: string;
  /**
   *
   * @type {Set<Rifornimento>}
   * @memberof Gestore
   */
  rifornimentos?: Set<Rifornimento>;
  /**
   *
   * @type {string}
   * @memberof Gestore
   */
  tipo?: GestoreTipoEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum GestoreTipoEnum {
  Autostradale = 'AUTOSTRADALE',
  Navale = 'NAVALE',
  Stradale = 'STRADALE'
}

/**
 *
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
  /**
   *
   * @type {string}
   * @memberof JWTToken
   */
  id_token?: string;
}

/**
 *
 * @export
 * @interface KeyAndPasswordVM
 */
export interface KeyAndPasswordVM {
  /**
   *
   * @type {string}
   * @memberof KeyAndPasswordVM
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof KeyAndPasswordVM
   */
  newPassword?: string;
}

/**
 *
 * @export
 * @interface LoginVM
 */
export interface LoginVM {
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof LoginVM
   */
  rememberMe?: boolean;
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  username: string;
}

/**
 *
 * @export
 * @interface ManagedUserVM
 */
export interface ManagedUserVM {
  /**
   *
   * @type {boolean}
   * @memberof ManagedUserVM
   */
  activated?: boolean;
  /**
   *
   * @type {Set<string>}
   * @memberof ManagedUserVM
   */
  authorities?: Set<string>;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  firstName?: string;
  /**
   *
   * @type {number}
   * @memberof ManagedUserVM
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  imageUrl?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastModifiedDate?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  login: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  password?: string;
}

/**
 *
 * @export
 * @interface Marchio
 */
export interface Marchio {
  /**
   *
   * @type {Set<Gestore>}
   * @memberof Marchio
   */
  gestores?: Set<Gestore>;
  /**
   *
   * @type {number}
   * @memberof Marchio
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Marchio
   */
  immagine?: string;
  /**
   *
   * @type {string}
   * @memberof Marchio
   */
  immagineContentType?: string;
  /**
   *
   * @type {string}
   * @memberof Marchio
   */
  nome: string;
}

/**
 *
 * @export
 * @interface NotificaDTO
 */
export interface NotificaDTO {
  /**
   *
   * @type {string}
   * @memberof NotificaDTO
   */
  data: string;
  /**
   *
   * @type {number}
   * @memberof NotificaDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof NotificaDTO
   */
  targa: string;
}

/**
 *
 * @export
 * @interface PasswordChangeDTO
 */
export interface PasswordChangeDTO {
  /**
   *
   * @type {string}
   * @memberof PasswordChangeDTO
   */
  currentPassword?: string;
  /**
   *
   * @type {string}
   * @memberof PasswordChangeDTO
   */
  newPassword?: string;
}

/**
 *
 * @export
 * @interface Rifornimento
 */
export interface Rifornimento {
  /**
   *
   * @type {string}
   * @memberof Rifornimento
   */
  data: string;
  /**
   *
   * @type {Gestore}
   * @memberof Rifornimento
   */
  gestore?: Gestore;
  /**
   *
   * @type {number}
   * @memberof Rifornimento
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof Rifornimento
   */
  litriErogati: number;
  /**
   *
   * @type {number}
   * @memberof Rifornimento
   */
  prezzoAlLitro: number;
  /**
   *
   * @type {number}
   * @memberof Rifornimento
   */
  sconto: number;
  /**
   *
   * @type {Tessera}
   * @memberof Rifornimento
   */
  tessera?: Tessera;
  /**
   *
   * @type {string}
   * @memberof Rifornimento
   */
  tipoCarburante: RifornimentoTipoCarburanteEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum RifornimentoTipoCarburanteEnum {
  Benzina = 'BENZINA',
  Diesel = 'DIESEL'
}

/**
 *
 * @export
 * @interface Tessera
 */
export interface Tessera {
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  carburante: TesseraCarburanteEnum;
  /**
   *
   * @type {Cittadino}
   * @memberof Tessera
   */
  cittadino?: Cittadino;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  codice: string;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  dataEmissione: string;
  /**
   *
   * @type {Set<Delega>}
   * @memberof Tessera
   */
  delegas?: Set<Delega>;
  /**
   *
   * @type {number}
   * @memberof Tessera
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  immagine?: string;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  immagineContentType?: string;
  /**
   *
   * @type {Set<Rifornimento>}
   * @memberof Tessera
   */
  rifornimentos?: Set<Rifornimento>;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  targa: string;
  /**
   *
   * @type {string}
   * @memberof Tessera
   */
  veicolo: TesseraVeicoloEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TesseraCarburanteEnum {
  Benzina = 'BENZINA',
  Diesel = 'DIESEL'
}

/**
 * @export
 * @enum {string}
 */
export enum TesseraVeicoloEnum {
  Autoveicolo = 'AUTOVEICOLO',
  Ciclomotore = 'CICLOMOTORE',
  Motoveicolo = 'MOTOVEICOLO'
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  activated: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  imageUrl?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  login: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  resetDate?: string;
}

/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
  /**
   *
   * @type {number}
   * @memberof UserDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UserDTO
   */
  login?: string;
}

/**
 * AccountResourceApi - axios parameter creator
 * @export
 */
export const AccountResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary activateAccount
     * @param {string} key key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAccountUsingGET: async (key: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      if (key === null || key === undefined) {
        throw new RequiredError('key', 'Required parameter key was null or undefined when calling activateAccountUsingGET.');
      }
      const localVarPath = `/api/activate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (key !== undefined) {
        localVarQueryParameter['key'] = key;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary changePassword
     * @param {PasswordChangeDTO} [passwordChangeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST: async (passwordChangeDTO?: PasswordChangeDTO, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof passwordChangeDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(passwordChangeDTO !== undefined ? passwordChangeDTO : {})
        : (passwordChangeDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary finishPasswordReset
     * @param {KeyAndPasswordVM} [keyAndPasswordVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishPasswordResetUsingPOST: async (keyAndPasswordVM?: KeyAndPasswordVM, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account/reset-password/finish`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof keyAndPasswordVM !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(keyAndPasswordVM !== undefined ? keyAndPasswordVM : {})
        : (keyAndPasswordVM || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary isAuthenticated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAuthenticatedUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary registerAccount
     * @param {ManagedUserVM} [managedUserVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAccountUsingPOST: async (managedUserVM?: ManagedUserVM, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof managedUserVM !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(managedUserVM !== undefined ? managedUserVM : {})
        : (managedUserVM || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary requestPasswordReset
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordResetUsingPOST: async (body?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account/reset-password/init`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof body !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : (body || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary saveAccount
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveAccountUsingPOST: async (adminUserDTO?: AdminUserDTO, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof adminUserDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(adminUserDTO !== undefined ? adminUserDTO : {})
        : (adminUserDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * AccountResourceApi - functional programming interface
 * @export
 */
export const AccountResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary activateAccount
     * @param {string} key key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activateAccountUsingGET(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).activateAccountUsingGET(key, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary changePassword
     * @param {PasswordChangeDTO} [passwordChangeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePasswordUsingPOST(passwordChangeDTO?: PasswordChangeDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).changePasswordUsingPOST(passwordChangeDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary finishPasswordReset
     * @param {KeyAndPasswordVM} [keyAndPasswordVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async finishPasswordResetUsingPOST(keyAndPasswordVM?: KeyAndPasswordVM, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).finishPasswordResetUsingPOST(keyAndPasswordVM, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).getAccountUsingGET(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary isAuthenticated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async isAuthenticatedUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).isAuthenticatedUsingGET(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary registerAccount
     * @param {ManagedUserVM} [managedUserVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerAccountUsingPOST(managedUserVM?: ManagedUserVM, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).registerAccountUsingPOST(managedUserVM, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary requestPasswordReset
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestPasswordResetUsingPOST(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).requestPasswordResetUsingPOST(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary saveAccount
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async saveAccountUsingPOST(adminUserDTO?: AdminUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await AccountResourceApiAxiosParamCreator(configuration).saveAccountUsingPOST(adminUserDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * AccountResourceApi - factory interface
 * @export
 */
export const AccountResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary activateAccount
     * @param {string} key key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAccountUsingGET(key: string, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).activateAccountUsingGET(key, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary changePassword
     * @param {PasswordChangeDTO} [passwordChangeDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST(passwordChangeDTO?: PasswordChangeDTO, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).changePasswordUsingPOST(passwordChangeDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary finishPasswordReset
     * @param {KeyAndPasswordVM} [keyAndPasswordVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishPasswordResetUsingPOST(keyAndPasswordVM?: KeyAndPasswordVM, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).finishPasswordResetUsingPOST(keyAndPasswordVM, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountUsingGET(options?: any): AxiosPromise<AdminUserDTO> {
      return AccountResourceApiFp(configuration).getAccountUsingGET(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary isAuthenticated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAuthenticatedUsingGET(options?: any): AxiosPromise<string> {
      return AccountResourceApiFp(configuration).isAuthenticatedUsingGET(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary registerAccount
     * @param {ManagedUserVM} [managedUserVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAccountUsingPOST(managedUserVM?: ManagedUserVM, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).registerAccountUsingPOST(managedUserVM, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary requestPasswordReset
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordResetUsingPOST(body?: string, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).requestPasswordResetUsingPOST(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary saveAccount
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveAccountUsingPOST(adminUserDTO?: AdminUserDTO, options?: any): AxiosPromise<void> {
      return AccountResourceApiFp(configuration).saveAccountUsingPOST(adminUserDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountResourceApi - object-oriented interface
 * @export
 * @class AccountResourceApi
 * @extends {BaseAPI}
 */
export class AccountResourceApi extends BaseAPI {
  /**
   *
   * @summary activateAccount
   * @param {string} key key
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public activateAccountUsingGET(key: string, options?: any) {
    return AccountResourceApiFp(this.configuration).activateAccountUsingGET(key, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary changePassword
   * @param {PasswordChangeDTO} [passwordChangeDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public changePasswordUsingPOST(passwordChangeDTO?: PasswordChangeDTO, options?: any) {
    return AccountResourceApiFp(this.configuration).changePasswordUsingPOST(passwordChangeDTO, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary finishPasswordReset
   * @param {KeyAndPasswordVM} [keyAndPasswordVM]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public finishPasswordResetUsingPOST(keyAndPasswordVM?: KeyAndPasswordVM, options?: any) {
    return AccountResourceApiFp(this.configuration).finishPasswordResetUsingPOST(keyAndPasswordVM, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAccount
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public getAccountUsingGET(options?: any) {
    return AccountResourceApiFp(this.configuration).getAccountUsingGET(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary isAuthenticated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public isAuthenticatedUsingGET(options?: any) {
    return AccountResourceApiFp(this.configuration).isAuthenticatedUsingGET(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary registerAccount
   * @param {ManagedUserVM} [managedUserVM]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public registerAccountUsingPOST(managedUserVM?: ManagedUserVM, options?: any) {
    return AccountResourceApiFp(this.configuration).registerAccountUsingPOST(managedUserVM, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary requestPasswordReset
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public requestPasswordResetUsingPOST(body?: string, options?: any) {
    return AccountResourceApiFp(this.configuration).requestPasswordResetUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary saveAccount
   * @param {AdminUserDTO} [adminUserDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public saveAccountUsingPOST(adminUserDTO?: AdminUserDTO, options?: any) {
    return AccountResourceApiFp(this.configuration).saveAccountUsingPOST(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * CittadinoResourceApi - axios parameter creator
 * @export
 */
export const CittadinoResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCittadinosUsingGET: async (codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/cittadinos/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (codiceFiscaleContains !== undefined) {
        localVarQueryParameter['codiceFiscale.contains'] = codiceFiscaleContains;
      }

      if (codiceFiscaleDoesNotContain !== undefined) {
        localVarQueryParameter['codiceFiscale.doesNotContain'] = codiceFiscaleDoesNotContain;
      }

      if (codiceFiscaleEquals !== undefined) {
        localVarQueryParameter['codiceFiscale.equals'] = codiceFiscaleEquals;
      }

      if (codiceFiscaleIn) {
        localVarQueryParameter['codiceFiscale.in'] = codiceFiscaleIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceFiscaleNotEquals !== undefined) {
        localVarQueryParameter['codiceFiscale.notEquals'] = codiceFiscaleNotEquals;
      }

      if (codiceFiscaleNotIn) {
        localVarQueryParameter['codiceFiscale.notIn'] = codiceFiscaleNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceFiscaleSpecified !== undefined) {
        localVarQueryParameter['codiceFiscale.specified'] = codiceFiscaleSpecified;
      }

      if (cognomeContains !== undefined) {
        localVarQueryParameter['cognome.contains'] = cognomeContains;
      }

      if (cognomeDoesNotContain !== undefined) {
        localVarQueryParameter['cognome.doesNotContain'] = cognomeDoesNotContain;
      }

      if (cognomeEquals !== undefined) {
        localVarQueryParameter['cognome.equals'] = cognomeEquals;
      }

      if (cognomeIn) {
        localVarQueryParameter['cognome.in'] = cognomeIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cognomeNotEquals !== undefined) {
        localVarQueryParameter['cognome.notEquals'] = cognomeNotEquals;
      }

      if (cognomeNotIn) {
        localVarQueryParameter['cognome.notIn'] = cognomeNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cognomeSpecified !== undefined) {
        localVarQueryParameter['cognome.specified'] = cognomeSpecified;
      }

      if (delegaIdEquals !== undefined) {
        localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
      }

      if (delegaIdGreaterThan !== undefined) {
        localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
      }

      if (delegaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
      }

      if (delegaIdIn) {
        localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdLessThan !== undefined) {
        localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
      }

      if (delegaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
      }

      if (delegaIdNotEquals !== undefined) {
        localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
      }

      if (delegaIdNotIn) {
        localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdSpecified !== undefined) {
        localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
      }

      if (fasciaIdEquals !== undefined) {
        localVarQueryParameter['fasciaId.equals'] = fasciaIdEquals;
      }

      if (fasciaIdGreaterThan !== undefined) {
        localVarQueryParameter['fasciaId.greaterThan'] = fasciaIdGreaterThan;
      }

      if (fasciaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['fasciaId.greaterThanOrEqual'] = fasciaIdGreaterThanOrEqual;
      }

      if (fasciaIdIn) {
        localVarQueryParameter['fasciaId.in'] = fasciaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (fasciaIdLessThan !== undefined) {
        localVarQueryParameter['fasciaId.lessThan'] = fasciaIdLessThan;
      }

      if (fasciaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['fasciaId.lessThanOrEqual'] = fasciaIdLessThanOrEqual;
      }

      if (fasciaIdNotEquals !== undefined) {
        localVarQueryParameter['fasciaId.notEquals'] = fasciaIdNotEquals;
      }

      if (fasciaIdNotIn) {
        localVarQueryParameter['fasciaId.notIn'] = fasciaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (fasciaIdSpecified !== undefined) {
        localVarQueryParameter['fasciaId.specified'] = fasciaIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (nomeContains !== undefined) {
        localVarQueryParameter['nome.contains'] = nomeContains;
      }

      if (nomeDoesNotContain !== undefined) {
        localVarQueryParameter['nome.doesNotContain'] = nomeDoesNotContain;
      }

      if (nomeEquals !== undefined) {
        localVarQueryParameter['nome.equals'] = nomeEquals;
      }

      if (nomeIn) {
        localVarQueryParameter['nome.in'] = nomeIn.join(COLLECTION_FORMATS.pipes);
      }

      if (nomeNotEquals !== undefined) {
        localVarQueryParameter['nome.notEquals'] = nomeNotEquals;
      }

      if (nomeNotIn) {
        localVarQueryParameter['nome.notIn'] = nomeNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (nomeSpecified !== undefined) {
        localVarQueryParameter['nome.specified'] = nomeSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCittadinoUsingPOST: async (cittadino?: Cittadino, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/cittadinos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof cittadino !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(cittadino !== undefined ? cittadino : {})
        : (cittadino || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCittadinoUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteCittadinoUsingDELETE.');
      }
      const localVarPath = `/api/cittadinos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCittadinosUsingGET: async (codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/cittadinos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (codiceFiscaleContains !== undefined) {
        localVarQueryParameter['codiceFiscale.contains'] = codiceFiscaleContains;
      }

      if (codiceFiscaleDoesNotContain !== undefined) {
        localVarQueryParameter['codiceFiscale.doesNotContain'] = codiceFiscaleDoesNotContain;
      }

      if (codiceFiscaleEquals !== undefined) {
        localVarQueryParameter['codiceFiscale.equals'] = codiceFiscaleEquals;
      }

      if (codiceFiscaleIn) {
        localVarQueryParameter['codiceFiscale.in'] = codiceFiscaleIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceFiscaleNotEquals !== undefined) {
        localVarQueryParameter['codiceFiscale.notEquals'] = codiceFiscaleNotEquals;
      }

      if (codiceFiscaleNotIn) {
        localVarQueryParameter['codiceFiscale.notIn'] = codiceFiscaleNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceFiscaleSpecified !== undefined) {
        localVarQueryParameter['codiceFiscale.specified'] = codiceFiscaleSpecified;
      }

      if (cognomeContains !== undefined) {
        localVarQueryParameter['cognome.contains'] = cognomeContains;
      }

      if (cognomeDoesNotContain !== undefined) {
        localVarQueryParameter['cognome.doesNotContain'] = cognomeDoesNotContain;
      }

      if (cognomeEquals !== undefined) {
        localVarQueryParameter['cognome.equals'] = cognomeEquals;
      }

      if (cognomeIn) {
        localVarQueryParameter['cognome.in'] = cognomeIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cognomeNotEquals !== undefined) {
        localVarQueryParameter['cognome.notEquals'] = cognomeNotEquals;
      }

      if (cognomeNotIn) {
        localVarQueryParameter['cognome.notIn'] = cognomeNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cognomeSpecified !== undefined) {
        localVarQueryParameter['cognome.specified'] = cognomeSpecified;
      }

      if (delegaIdEquals !== undefined) {
        localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
      }

      if (delegaIdGreaterThan !== undefined) {
        localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
      }

      if (delegaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
      }

      if (delegaIdIn) {
        localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdLessThan !== undefined) {
        localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
      }

      if (delegaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
      }

      if (delegaIdNotEquals !== undefined) {
        localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
      }

      if (delegaIdNotIn) {
        localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdSpecified !== undefined) {
        localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
      }

      if (fasciaIdEquals !== undefined) {
        localVarQueryParameter['fasciaId.equals'] = fasciaIdEquals;
      }

      if (fasciaIdGreaterThan !== undefined) {
        localVarQueryParameter['fasciaId.greaterThan'] = fasciaIdGreaterThan;
      }

      if (fasciaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['fasciaId.greaterThanOrEqual'] = fasciaIdGreaterThanOrEqual;
      }

      if (fasciaIdIn) {
        localVarQueryParameter['fasciaId.in'] = fasciaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (fasciaIdLessThan !== undefined) {
        localVarQueryParameter['fasciaId.lessThan'] = fasciaIdLessThan;
      }

      if (fasciaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['fasciaId.lessThanOrEqual'] = fasciaIdLessThanOrEqual;
      }

      if (fasciaIdNotEquals !== undefined) {
        localVarQueryParameter['fasciaId.notEquals'] = fasciaIdNotEquals;
      }

      if (fasciaIdNotIn) {
        localVarQueryParameter['fasciaId.notIn'] = fasciaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (fasciaIdSpecified !== undefined) {
        localVarQueryParameter['fasciaId.specified'] = fasciaIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (nomeContains !== undefined) {
        localVarQueryParameter['nome.contains'] = nomeContains;
      }

      if (nomeDoesNotContain !== undefined) {
        localVarQueryParameter['nome.doesNotContain'] = nomeDoesNotContain;
      }

      if (nomeEquals !== undefined) {
        localVarQueryParameter['nome.equals'] = nomeEquals;
      }

      if (nomeIn) {
        localVarQueryParameter['nome.in'] = nomeIn.join(COLLECTION_FORMATS.pipes);
      }

      if (nomeNotEquals !== undefined) {
        localVarQueryParameter['nome.notEquals'] = nomeNotEquals;
      }

      if (nomeNotIn) {
        localVarQueryParameter['nome.notIn'] = nomeNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (nomeSpecified !== undefined) {
        localVarQueryParameter['nome.specified'] = nomeSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCittadinoUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getCittadinoUsingGET.');
      }
      const localVarPath = `/api/cittadinos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateCittadinoUsingPATCH: async (cittadino?: Cittadino, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/cittadinos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof cittadino !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(cittadino !== undefined ? cittadino : {})
        : (cittadino || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCittadinoUsingPUT: async (cittadino?: Cittadino, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/cittadinos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof cittadino !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(cittadino !== undefined ? cittadino : {})
        : (cittadino || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * CittadinoResourceApi - functional programming interface
 * @export
 */
export const CittadinoResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCittadinoUsingPOST(cittadino?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).createCittadinoUsingPOST(cittadino, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCittadinoUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).deleteCittadinoUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cittadino>>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCittadinoUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).getCittadinoUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateCittadinoUsingPATCH(cittadino?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).partialUpdateCittadinoUsingPATCH(cittadino, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCittadinoUsingPUT(cittadino?: Cittadino, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cittadino>> {
      const localVarAxiosArgs = await CittadinoResourceApiAxiosParamCreator(configuration).updateCittadinoUsingPUT(cittadino, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * CittadinoResourceApi - factory interface
 * @export
 */
export const CittadinoResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<number> {
      return CittadinoResourceApiFp(configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCittadinoUsingPOST(cittadino?: Cittadino, options?: any): AxiosPromise<Cittadino> {
      return CittadinoResourceApiFp(configuration).createCittadinoUsingPOST(cittadino, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCittadinoUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return CittadinoResourceApiFp(configuration).deleteCittadinoUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllCittadinos
     * @param {string} [codiceFiscaleContains]
     * @param {string} [codiceFiscaleDoesNotContain]
     * @param {string} [codiceFiscaleEquals]
     * @param {Array<string>} [codiceFiscaleIn]
     * @param {string} [codiceFiscaleNotEquals]
     * @param {Array<string>} [codiceFiscaleNotIn]
     * @param {boolean} [codiceFiscaleSpecified]
     * @param {string} [cognomeContains]
     * @param {string} [cognomeDoesNotContain]
     * @param {string} [cognomeEquals]
     * @param {Array<string>} [cognomeIn]
     * @param {string} [cognomeNotEquals]
     * @param {Array<string>} [cognomeNotIn]
     * @param {boolean} [cognomeSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [fasciaIdEquals]
     * @param {number} [fasciaIdGreaterThan]
     * @param {number} [fasciaIdGreaterThanOrEqual]
     * @param {Array<number>} [fasciaIdIn]
     * @param {number} [fasciaIdLessThan]
     * @param {number} [fasciaIdLessThanOrEqual]
     * @param {number} [fasciaIdNotEquals]
     * @param {Array<number>} [fasciaIdNotIn]
     * @param {boolean} [fasciaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [nomeContains]
     * @param {string} [nomeDoesNotContain]
     * @param {string} [nomeEquals]
     * @param {Array<string>} [nomeIn]
     * @param {string} [nomeNotEquals]
     * @param {Array<string>} [nomeNotIn]
     * @param {boolean} [nomeSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<Array<Cittadino>> {
      return CittadinoResourceApiFp(configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getCittadino
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCittadinoUsingGET(id: number, options?: any): AxiosPromise<Cittadino> {
      return CittadinoResourceApiFp(configuration).getCittadinoUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateCittadinoUsingPATCH(cittadino?: Cittadino, options?: any): AxiosPromise<Cittadino> {
      return CittadinoResourceApiFp(configuration).partialUpdateCittadinoUsingPATCH(cittadino, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateCittadino
     * @param {Cittadino} [cittadino]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCittadinoUsingPUT(cittadino?: Cittadino, options?: any): AxiosPromise<Cittadino> {
      return CittadinoResourceApiFp(configuration).updateCittadinoUsingPUT(cittadino, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CittadinoResourceApi - object-oriented interface
 * @export
 * @class CittadinoResourceApi
 * @extends {BaseAPI}
 */
export class CittadinoResourceApi extends BaseAPI {
  /**
   *
   * @summary countCittadinos
   * @param {string} [codiceFiscaleContains]
   * @param {string} [codiceFiscaleDoesNotContain]
   * @param {string} [codiceFiscaleEquals]
   * @param {Array<string>} [codiceFiscaleIn]
   * @param {string} [codiceFiscaleNotEquals]
   * @param {Array<string>} [codiceFiscaleNotIn]
   * @param {boolean} [codiceFiscaleSpecified]
   * @param {string} [cognomeContains]
   * @param {string} [cognomeDoesNotContain]
   * @param {string} [cognomeEquals]
   * @param {Array<string>} [cognomeIn]
   * @param {string} [cognomeNotEquals]
   * @param {Array<string>} [cognomeNotIn]
   * @param {boolean} [cognomeSpecified]
   * @param {number} [delegaIdEquals]
   * @param {number} [delegaIdGreaterThan]
   * @param {number} [delegaIdGreaterThanOrEqual]
   * @param {Array<number>} [delegaIdIn]
   * @param {number} [delegaIdLessThan]
   * @param {number} [delegaIdLessThanOrEqual]
   * @param {number} [delegaIdNotEquals]
   * @param {Array<number>} [delegaIdNotIn]
   * @param {boolean} [delegaIdSpecified]
   * @param {number} [fasciaIdEquals]
   * @param {number} [fasciaIdGreaterThan]
   * @param {number} [fasciaIdGreaterThanOrEqual]
   * @param {Array<number>} [fasciaIdIn]
   * @param {number} [fasciaIdLessThan]
   * @param {number} [fasciaIdLessThanOrEqual]
   * @param {number} [fasciaIdNotEquals]
   * @param {Array<number>} [fasciaIdNotIn]
   * @param {boolean} [fasciaIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [nomeContains]
   * @param {string} [nomeDoesNotContain]
   * @param {string} [nomeEquals]
   * @param {Array<string>} [nomeIn]
   * @param {string} [nomeNotEquals]
   * @param {Array<string>} [nomeNotIn]
   * @param {boolean} [nomeSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public countCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
    return CittadinoResourceApiFp(this.configuration).countCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createCittadino
   * @param {Cittadino} [cittadino]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public createCittadinoUsingPOST(cittadino?: Cittadino, options?: any) {
    return CittadinoResourceApiFp(this.configuration).createCittadinoUsingPOST(cittadino, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteCittadino
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public deleteCittadinoUsingDELETE(id: number, options?: any) {
    return CittadinoResourceApiFp(this.configuration).deleteCittadinoUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllCittadinos
   * @param {string} [codiceFiscaleContains]
   * @param {string} [codiceFiscaleDoesNotContain]
   * @param {string} [codiceFiscaleEquals]
   * @param {Array<string>} [codiceFiscaleIn]
   * @param {string} [codiceFiscaleNotEquals]
   * @param {Array<string>} [codiceFiscaleNotIn]
   * @param {boolean} [codiceFiscaleSpecified]
   * @param {string} [cognomeContains]
   * @param {string} [cognomeDoesNotContain]
   * @param {string} [cognomeEquals]
   * @param {Array<string>} [cognomeIn]
   * @param {string} [cognomeNotEquals]
   * @param {Array<string>} [cognomeNotIn]
   * @param {boolean} [cognomeSpecified]
   * @param {number} [delegaIdEquals]
   * @param {number} [delegaIdGreaterThan]
   * @param {number} [delegaIdGreaterThanOrEqual]
   * @param {Array<number>} [delegaIdIn]
   * @param {number} [delegaIdLessThan]
   * @param {number} [delegaIdLessThanOrEqual]
   * @param {number} [delegaIdNotEquals]
   * @param {Array<number>} [delegaIdNotIn]
   * @param {boolean} [delegaIdSpecified]
   * @param {number} [fasciaIdEquals]
   * @param {number} [fasciaIdGreaterThan]
   * @param {number} [fasciaIdGreaterThanOrEqual]
   * @param {Array<number>} [fasciaIdIn]
   * @param {number} [fasciaIdLessThan]
   * @param {number} [fasciaIdLessThanOrEqual]
   * @param {number} [fasciaIdNotEquals]
   * @param {Array<number>} [fasciaIdNotIn]
   * @param {boolean} [fasciaIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [nomeContains]
   * @param {string} [nomeDoesNotContain]
   * @param {string} [nomeEquals]
   * @param {Array<string>} [nomeIn]
   * @param {string} [nomeNotEquals]
   * @param {Array<string>} [nomeNotIn]
   * @param {boolean} [nomeSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public getAllCittadinosUsingGET(codiceFiscaleContains?: string, codiceFiscaleDoesNotContain?: string, codiceFiscaleEquals?: string, codiceFiscaleIn?: Array<string>, codiceFiscaleNotEquals?: string, codiceFiscaleNotIn?: Array<string>, codiceFiscaleSpecified?: boolean, cognomeContains?: string, cognomeDoesNotContain?: string, cognomeEquals?: string, cognomeIn?: Array<string>, cognomeNotEquals?: string, cognomeNotIn?: Array<string>, cognomeSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, fasciaIdEquals?: number, fasciaIdGreaterThan?: number, fasciaIdGreaterThanOrEqual?: number, fasciaIdIn?: Array<number>, fasciaIdLessThan?: number, fasciaIdLessThanOrEqual?: number, fasciaIdNotEquals?: number, fasciaIdNotIn?: Array<number>, fasciaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, nomeContains?: string, nomeDoesNotContain?: string, nomeEquals?: string, nomeIn?: Array<string>, nomeNotEquals?: string, nomeNotIn?: Array<string>, nomeSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
    return CittadinoResourceApiFp(this.configuration).getAllCittadinosUsingGET(codiceFiscaleContains, codiceFiscaleDoesNotContain, codiceFiscaleEquals, codiceFiscaleIn, codiceFiscaleNotEquals, codiceFiscaleNotIn, codiceFiscaleSpecified, cognomeContains, cognomeDoesNotContain, cognomeEquals, cognomeIn, cognomeNotEquals, cognomeNotIn, cognomeSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, fasciaIdEquals, fasciaIdGreaterThan, fasciaIdGreaterThanOrEqual, fasciaIdIn, fasciaIdLessThan, fasciaIdLessThanOrEqual, fasciaIdNotEquals, fasciaIdNotIn, fasciaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, nomeContains, nomeDoesNotContain, nomeEquals, nomeIn, nomeNotEquals, nomeNotIn, nomeSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getCittadino
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public getCittadinoUsingGET(id: number, options?: any) {
    return CittadinoResourceApiFp(this.configuration).getCittadinoUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateCittadino
   * @param {Cittadino} [cittadino]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public partialUpdateCittadinoUsingPATCH(cittadino?: Cittadino, options?: any) {
    return CittadinoResourceApiFp(this.configuration).partialUpdateCittadinoUsingPATCH(cittadino, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateCittadino
   * @param {Cittadino} [cittadino]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CittadinoResourceApi
   */
  public updateCittadinoUsingPUT(cittadino?: Cittadino, options?: any) {
    return CittadinoResourceApiFp(this.configuration).updateCittadinoUsingPUT(cittadino, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * DelegaResourceApi - axios parameter creator
 * @export
 */
export const DelegaResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countDelegasUsingGET: async (cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/delegas/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (cittadinoIdEquals !== undefined) {
        localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
      }

      if (cittadinoIdGreaterThan !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
      }

      if (cittadinoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
      }

      if (cittadinoIdIn) {
        localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdLessThan !== undefined) {
        localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
      }

      if (cittadinoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
      }

      if (cittadinoIdNotEquals !== undefined) {
        localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
      }

      if (cittadinoIdNotIn) {
        localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdSpecified !== undefined) {
        localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelegaUsingPOST: async (delega?: Delega, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/delegas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof delega !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(delega !== undefined ? delega : {})
        : (delega || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDelegaUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteDelegaUsingDELETE.');
      }
      const localVarPath = `/api/delegas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegasUsingGET: async (cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/delegas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (cittadinoIdEquals !== undefined) {
        localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
      }

      if (cittadinoIdGreaterThan !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
      }

      if (cittadinoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
      }

      if (cittadinoIdIn) {
        localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdLessThan !== undefined) {
        localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
      }

      if (cittadinoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
      }

      if (cittadinoIdNotEquals !== undefined) {
        localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
      }

      if (cittadinoIdNotIn) {
        localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdSpecified !== undefined) {
        localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegaUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getDelegaUsingGET.');
      }
      const localVarPath = `/api/delegas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateDelegaUsingPATCH: async (delega?: Delega, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/delegas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof delega !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(delega !== undefined ? delega : {})
        : (delega || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelegaUsingPUT: async (delega?: Delega, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/delegas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof delega !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(delega !== undefined ? delega : {})
        : (delega || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * DelegaResourceApi - functional programming interface
 * @export
 */
export const DelegaResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).countDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDelegaUsingPOST(delega?: Delega, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delega>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).createDelegaUsingPOST(delega, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDelegaUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).deleteDelegaUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Delega>>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).getAllDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDelegaUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delega>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).getDelegaUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateDelegaUsingPATCH(delega?: Delega, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delega>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).partialUpdateDelegaUsingPATCH(delega, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDelegaUsingPUT(delega?: Delega, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delega>> {
      const localVarAxiosArgs = await DelegaResourceApiAxiosParamCreator(configuration).updateDelegaUsingPUT(delega, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * DelegaResourceApi - factory interface
 * @export
 */
export const DelegaResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<number> {
      return DelegaResourceApiFp(configuration).countDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelegaUsingPOST(delega?: Delega, options?: any): AxiosPromise<Delega> {
      return DelegaResourceApiFp(configuration).createDelegaUsingPOST(delega, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDelegaUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return DelegaResourceApiFp(configuration).deleteDelegaUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllDelegas
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any): AxiosPromise<Array<Delega>> {
      return DelegaResourceApiFp(configuration).getAllDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDelega
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegaUsingGET(id: number, options?: any): AxiosPromise<Delega> {
      return DelegaResourceApiFp(configuration).getDelegaUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateDelegaUsingPATCH(delega?: Delega, options?: any): AxiosPromise<Delega> {
      return DelegaResourceApiFp(configuration).partialUpdateDelegaUsingPATCH(delega, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateDelega
     * @param {Delega} [delega]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelegaUsingPUT(delega?: Delega, options?: any): AxiosPromise<Delega> {
      return DelegaResourceApiFp(configuration).updateDelegaUsingPUT(delega, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DelegaResourceApi - object-oriented interface
 * @export
 * @class DelegaResourceApi
 * @extends {BaseAPI}
 */
export class DelegaResourceApi extends BaseAPI {
  /**
   *
   * @summary countDelegas
   * @param {number} [cittadinoIdEquals]
   * @param {number} [cittadinoIdGreaterThan]
   * @param {number} [cittadinoIdGreaterThanOrEqual]
   * @param {Array<number>} [cittadinoIdIn]
   * @param {number} [cittadinoIdLessThan]
   * @param {number} [cittadinoIdLessThanOrEqual]
   * @param {number} [cittadinoIdNotEquals]
   * @param {Array<number>} [cittadinoIdNotIn]
   * @param {boolean} [cittadinoIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public countDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
    return DelegaResourceApiFp(this.configuration).countDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createDelega
   * @param {Delega} [delega]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public createDelegaUsingPOST(delega?: Delega, options?: any) {
    return DelegaResourceApiFp(this.configuration).createDelegaUsingPOST(delega, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteDelega
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public deleteDelegaUsingDELETE(id: number, options?: any) {
    return DelegaResourceApiFp(this.configuration).deleteDelegaUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllDelegas
   * @param {number} [cittadinoIdEquals]
   * @param {number} [cittadinoIdGreaterThan]
   * @param {number} [cittadinoIdGreaterThanOrEqual]
   * @param {Array<number>} [cittadinoIdIn]
   * @param {number} [cittadinoIdLessThan]
   * @param {number} [cittadinoIdLessThanOrEqual]
   * @param {number} [cittadinoIdNotEquals]
   * @param {Array<number>} [cittadinoIdNotIn]
   * @param {boolean} [cittadinoIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public getAllDelegasUsingGET(cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, options?: any) {
    return DelegaResourceApiFp(this.configuration).getAllDelegasUsingGET(cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDelega
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public getDelegaUsingGET(id: number, options?: any) {
    return DelegaResourceApiFp(this.configuration).getDelegaUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateDelega
   * @param {Delega} [delega]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public partialUpdateDelegaUsingPATCH(delega?: Delega, options?: any) {
    return DelegaResourceApiFp(this.configuration).partialUpdateDelegaUsingPATCH(delega, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateDelega
   * @param {Delega} [delega]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DelegaResourceApi
   */
  public updateDelegaUsingPUT(delega?: Delega, options?: any) {
    return DelegaResourceApiFp(this.configuration).updateDelegaUsingPUT(delega, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * DeviceResourceApi - axios parameter creator
 * @export
 */
export const DeviceResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countDevicesUsingGET: async (deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/devices/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (deviceIdContains !== undefined) {
        localVarQueryParameter['deviceId.contains'] = deviceIdContains;
      }

      if (deviceIdDoesNotContain !== undefined) {
        localVarQueryParameter['deviceId.doesNotContain'] = deviceIdDoesNotContain;
      }

      if (deviceIdEquals !== undefined) {
        localVarQueryParameter['deviceId.equals'] = deviceIdEquals;
      }

      if (deviceIdIn) {
        localVarQueryParameter['deviceId.in'] = deviceIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (deviceIdNotEquals !== undefined) {
        localVarQueryParameter['deviceId.notEquals'] = deviceIdNotEquals;
      }

      if (deviceIdNotIn) {
        localVarQueryParameter['deviceId.notIn'] = deviceIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (deviceIdSpecified !== undefined) {
        localVarQueryParameter['deviceId.specified'] = deviceIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceUsingPOST: async (device?: Device, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof device !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(device !== undefined ? device : {})
        : (device || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDeviceUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteDeviceUsingDELETE.');
      }
      const localVarPath = `/api/devices/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDevicesUsingGET: async (deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (deviceIdContains !== undefined) {
        localVarQueryParameter['deviceId.contains'] = deviceIdContains;
      }

      if (deviceIdDoesNotContain !== undefined) {
        localVarQueryParameter['deviceId.doesNotContain'] = deviceIdDoesNotContain;
      }

      if (deviceIdEquals !== undefined) {
        localVarQueryParameter['deviceId.equals'] = deviceIdEquals;
      }

      if (deviceIdIn) {
        localVarQueryParameter['deviceId.in'] = deviceIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (deviceIdNotEquals !== undefined) {
        localVarQueryParameter['deviceId.notEquals'] = deviceIdNotEquals;
      }

      if (deviceIdNotIn) {
        localVarQueryParameter['deviceId.notIn'] = deviceIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (deviceIdSpecified !== undefined) {
        localVarQueryParameter['deviceId.specified'] = deviceIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeviceUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getDeviceUsingGET.');
      }
      const localVarPath = `/api/devices/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateDeviceUsingPATCH: async (device?: Device, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof device !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(device !== undefined ? device : {})
        : (device || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDeviceUsingPUT: async (device?: Device, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof device !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(device !== undefined ? device : {})
        : (device || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * DeviceResourceApi - functional programming interface
 * @export
 */
export const DeviceResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).countDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDeviceUsingPOST(device?: Device, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).createDeviceUsingPOST(device, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDeviceUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).deleteDeviceUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Device>>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).getAllDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDeviceUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).getDeviceUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateDeviceUsingPATCH(device?: Device, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).partialUpdateDeviceUsingPATCH(device, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDeviceUsingPUT(device?: Device, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
      const localVarAxiosArgs = await DeviceResourceApiAxiosParamCreator(configuration).updateDeviceUsingPUT(device, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * DeviceResourceApi - factory interface
 * @export
 */
export const DeviceResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, options?: any): AxiosPromise<number> {
      return DeviceResourceApiFp(configuration).countDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceUsingPOST(device?: Device, options?: any): AxiosPromise<Device> {
      return DeviceResourceApiFp(configuration).createDeviceUsingPOST(device, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDeviceUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return DeviceResourceApiFp(configuration).deleteDeviceUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllDevices
     * @param {string} [deviceIdContains]
     * @param {string} [deviceIdDoesNotContain]
     * @param {string} [deviceIdEquals]
     * @param {Array<string>} [deviceIdIn]
     * @param {string} [deviceIdNotEquals]
     * @param {Array<string>} [deviceIdNotIn]
     * @param {boolean} [deviceIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<Device>> {
      return DeviceResourceApiFp(configuration).getAllDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDevice
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeviceUsingGET(id: number, options?: any): AxiosPromise<Device> {
      return DeviceResourceApiFp(configuration).getDeviceUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateDeviceUsingPATCH(device?: Device, options?: any): AxiosPromise<Device> {
      return DeviceResourceApiFp(configuration).partialUpdateDeviceUsingPATCH(device, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateDevice
     * @param {Device} [device]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDeviceUsingPUT(device?: Device, options?: any): AxiosPromise<Device> {
      return DeviceResourceApiFp(configuration).updateDeviceUsingPUT(device, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DeviceResourceApi - object-oriented interface
 * @export
 * @class DeviceResourceApi
 * @extends {BaseAPI}
 */
export class DeviceResourceApi extends BaseAPI {
  /**
   *
   * @summary countDevices
   * @param {string} [deviceIdContains]
   * @param {string} [deviceIdDoesNotContain]
   * @param {string} [deviceIdEquals]
   * @param {Array<string>} [deviceIdIn]
   * @param {string} [deviceIdNotEquals]
   * @param {Array<string>} [deviceIdNotIn]
   * @param {boolean} [deviceIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public countDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, options?: any) {
    return DeviceResourceApiFp(this.configuration).countDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createDevice
   * @param {Device} [device]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public createDeviceUsingPOST(device?: Device, options?: any) {
    return DeviceResourceApiFp(this.configuration).createDeviceUsingPOST(device, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteDevice
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public deleteDeviceUsingDELETE(id: number, options?: any) {
    return DeviceResourceApiFp(this.configuration).deleteDeviceUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllDevices
   * @param {string} [deviceIdContains]
   * @param {string} [deviceIdDoesNotContain]
   * @param {string} [deviceIdEquals]
   * @param {Array<string>} [deviceIdIn]
   * @param {string} [deviceIdNotEquals]
   * @param {Array<string>} [deviceIdNotIn]
   * @param {boolean} [deviceIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public getAllDevicesUsingGET(deviceIdContains?: string, deviceIdDoesNotContain?: string, deviceIdEquals?: string, deviceIdIn?: Array<string>, deviceIdNotEquals?: string, deviceIdNotIn?: Array<string>, deviceIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, options?: any) {
    return DeviceResourceApiFp(this.configuration).getAllDevicesUsingGET(deviceIdContains, deviceIdDoesNotContain, deviceIdEquals, deviceIdIn, deviceIdNotEquals, deviceIdNotIn, deviceIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, size, sort, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDevice
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public getDeviceUsingGET(id: number, options?: any) {
    return DeviceResourceApiFp(this.configuration).getDeviceUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateDevice
   * @param {Device} [device]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public partialUpdateDeviceUsingPATCH(device?: Device, options?: any) {
    return DeviceResourceApiFp(this.configuration).partialUpdateDeviceUsingPATCH(device, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateDevice
   * @param {Device} [device]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceResourceApi
   */
  public updateDeviceUsingPUT(device?: Device, options?: any) {
    return DeviceResourceApiFp(this.configuration).updateDeviceUsingPUT(device, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * FasciaResourceApi - axios parameter creator
 * @export
 */
export const FasciaResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFasciaUsingPOST: async (fascia?: Fascia, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/fascias`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof fascia !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(fascia !== undefined ? fascia : {})
        : (fascia || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFasciaUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteFasciaUsingDELETE.');
      }
      const localVarPath = `/api/fascias/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllFascias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllFasciasUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/fascias`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFasciaUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getFasciaUsingGET.');
      }
      const localVarPath = `/api/fascias/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateFasciaUsingPATCH: async (fascia?: Fascia, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/fascias`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof fascia !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(fascia !== undefined ? fascia : {})
        : (fascia || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFasciaUsingPUT: async (fascia?: Fascia, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/fascias`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof fascia !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(fascia !== undefined ? fascia : {})
        : (fascia || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * FasciaResourceApi - functional programming interface
 * @export
 */
export const FasciaResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFasciaUsingPOST(fascia?: Fascia, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fascia>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).createFasciaUsingPOST(fascia, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFasciaUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).deleteFasciaUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllFascias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllFasciasUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Fascia>>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).getAllFasciasUsingGET(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFasciaUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fascia>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).getFasciaUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateFasciaUsingPATCH(fascia?: Fascia, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fascia>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).partialUpdateFasciaUsingPATCH(fascia, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFasciaUsingPUT(fascia?: Fascia, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fascia>> {
      const localVarAxiosArgs = await FasciaResourceApiAxiosParamCreator(configuration).updateFasciaUsingPUT(fascia, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * FasciaResourceApi - factory interface
 * @export
 */
export const FasciaResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary createFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFasciaUsingPOST(fascia?: Fascia, options?: any): AxiosPromise<Fascia> {
      return FasciaResourceApiFp(configuration).createFasciaUsingPOST(fascia, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFasciaUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return FasciaResourceApiFp(configuration).deleteFasciaUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllFascias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllFasciasUsingGET(options?: any): AxiosPromise<Array<Fascia>> {
      return FasciaResourceApiFp(configuration).getAllFasciasUsingGET(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getFascia
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFasciaUsingGET(id: number, options?: any): AxiosPromise<Fascia> {
      return FasciaResourceApiFp(configuration).getFasciaUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateFasciaUsingPATCH(fascia?: Fascia, options?: any): AxiosPromise<Fascia> {
      return FasciaResourceApiFp(configuration).partialUpdateFasciaUsingPATCH(fascia, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateFascia
     * @param {Fascia} [fascia]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFasciaUsingPUT(fascia?: Fascia, options?: any): AxiosPromise<Fascia> {
      return FasciaResourceApiFp(configuration).updateFasciaUsingPUT(fascia, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * FasciaResourceApi - object-oriented interface
 * @export
 * @class FasciaResourceApi
 * @extends {BaseAPI}
 */
export class FasciaResourceApi extends BaseAPI {
  /**
   *
   * @summary createFascia
   * @param {Fascia} [fascia]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public createFasciaUsingPOST(fascia?: Fascia, options?: any) {
    return FasciaResourceApiFp(this.configuration).createFasciaUsingPOST(fascia, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteFascia
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public deleteFasciaUsingDELETE(id: number, options?: any) {
    return FasciaResourceApiFp(this.configuration).deleteFasciaUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllFascias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public getAllFasciasUsingGET(options?: any) {
    return FasciaResourceApiFp(this.configuration).getAllFasciasUsingGET(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getFascia
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public getFasciaUsingGET(id: number, options?: any) {
    return FasciaResourceApiFp(this.configuration).getFasciaUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateFascia
   * @param {Fascia} [fascia]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public partialUpdateFasciaUsingPATCH(fascia?: Fascia, options?: any) {
    return FasciaResourceApiFp(this.configuration).partialUpdateFasciaUsingPATCH(fascia, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateFascia
   * @param {Fascia} [fascia]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FasciaResourceApi
   */
  public updateFasciaUsingPUT(fascia?: Fascia, options?: any) {
    return FasciaResourceApiFp(this.configuration).updateFasciaUsingPUT(fascia, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * GestoreResourceApi - axios parameter creator
 * @export
 */
export const GestoreResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countGestoresUsingGET: async (benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/gestores/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (benzinaPrezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.equals'] = benzinaPrezzoAlLitroEquals;
      }

      if (benzinaPrezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.greaterThan'] = benzinaPrezzoAlLitroGreaterThan;
      }

      if (benzinaPrezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.greaterThanOrEqual'] = benzinaPrezzoAlLitroGreaterThanOrEqual;
      }

      if (benzinaPrezzoAlLitroIn) {
        localVarQueryParameter['benzinaPrezzoAlLitro.in'] = benzinaPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (benzinaPrezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.lessThan'] = benzinaPrezzoAlLitroLessThan;
      }

      if (benzinaPrezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.lessThanOrEqual'] = benzinaPrezzoAlLitroLessThanOrEqual;
      }

      if (benzinaPrezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.notEquals'] = benzinaPrezzoAlLitroNotEquals;
      }

      if (benzinaPrezzoAlLitroNotIn) {
        localVarQueryParameter['benzinaPrezzoAlLitro.notIn'] = benzinaPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (benzinaPrezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.specified'] = benzinaPrezzoAlLitroSpecified;
      }

      if (comuneContains !== undefined) {
        localVarQueryParameter['comune.contains'] = comuneContains;
      }

      if (comuneDoesNotContain !== undefined) {
        localVarQueryParameter['comune.doesNotContain'] = comuneDoesNotContain;
      }

      if (comuneEquals !== undefined) {
        localVarQueryParameter['comune.equals'] = comuneEquals;
      }

      if (comuneIn) {
        localVarQueryParameter['comune.in'] = comuneIn.join(COLLECTION_FORMATS.pipes);
      }

      if (comuneNotEquals !== undefined) {
        localVarQueryParameter['comune.notEquals'] = comuneNotEquals;
      }

      if (comuneNotIn) {
        localVarQueryParameter['comune.notIn'] = comuneNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (comuneSpecified !== undefined) {
        localVarQueryParameter['comune.specified'] = comuneSpecified;
      }

      if (gasolioPrezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.equals'] = gasolioPrezzoAlLitroEquals;
      }

      if (gasolioPrezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.greaterThan'] = gasolioPrezzoAlLitroGreaterThan;
      }

      if (gasolioPrezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.greaterThanOrEqual'] = gasolioPrezzoAlLitroGreaterThanOrEqual;
      }

      if (gasolioPrezzoAlLitroIn) {
        localVarQueryParameter['gasolioPrezzoAlLitro.in'] = gasolioPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gasolioPrezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.lessThan'] = gasolioPrezzoAlLitroLessThan;
      }

      if (gasolioPrezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.lessThanOrEqual'] = gasolioPrezzoAlLitroLessThanOrEqual;
      }

      if (gasolioPrezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.notEquals'] = gasolioPrezzoAlLitroNotEquals;
      }

      if (gasolioPrezzoAlLitroNotIn) {
        localVarQueryParameter['gasolioPrezzoAlLitro.notIn'] = gasolioPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gasolioPrezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.specified'] = gasolioPrezzoAlLitroSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (indirizzoContains !== undefined) {
        localVarQueryParameter['indirizzo.contains'] = indirizzoContains;
      }

      if (indirizzoDoesNotContain !== undefined) {
        localVarQueryParameter['indirizzo.doesNotContain'] = indirizzoDoesNotContain;
      }

      if (indirizzoEquals !== undefined) {
        localVarQueryParameter['indirizzo.equals'] = indirizzoEquals;
      }

      if (indirizzoIn) {
        localVarQueryParameter['indirizzo.in'] = indirizzoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (indirizzoNotEquals !== undefined) {
        localVarQueryParameter['indirizzo.notEquals'] = indirizzoNotEquals;
      }

      if (indirizzoNotIn) {
        localVarQueryParameter['indirizzo.notIn'] = indirizzoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (indirizzoSpecified !== undefined) {
        localVarQueryParameter['indirizzo.specified'] = indirizzoSpecified;
      }

      if (latitudineEquals !== undefined) {
        localVarQueryParameter['latitudine.equals'] = latitudineEquals;
      }

      if (latitudineGreaterThan !== undefined) {
        localVarQueryParameter['latitudine.greaterThan'] = latitudineGreaterThan;
      }

      if (latitudineGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['latitudine.greaterThanOrEqual'] = latitudineGreaterThanOrEqual;
      }

      if (latitudineIn) {
        localVarQueryParameter['latitudine.in'] = latitudineIn.join(COLLECTION_FORMATS.pipes);
      }

      if (latitudineLessThan !== undefined) {
        localVarQueryParameter['latitudine.lessThan'] = latitudineLessThan;
      }

      if (latitudineLessThanOrEqual !== undefined) {
        localVarQueryParameter['latitudine.lessThanOrEqual'] = latitudineLessThanOrEqual;
      }

      if (latitudineNotEquals !== undefined) {
        localVarQueryParameter['latitudine.notEquals'] = latitudineNotEquals;
      }

      if (latitudineNotIn) {
        localVarQueryParameter['latitudine.notIn'] = latitudineNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (latitudineSpecified !== undefined) {
        localVarQueryParameter['latitudine.specified'] = latitudineSpecified;
      }

      if (longitudineEquals !== undefined) {
        localVarQueryParameter['longitudine.equals'] = longitudineEquals;
      }

      if (longitudineGreaterThan !== undefined) {
        localVarQueryParameter['longitudine.greaterThan'] = longitudineGreaterThan;
      }

      if (longitudineGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['longitudine.greaterThanOrEqual'] = longitudineGreaterThanOrEqual;
      }

      if (longitudineIn) {
        localVarQueryParameter['longitudine.in'] = longitudineIn.join(COLLECTION_FORMATS.pipes);
      }

      if (longitudineLessThan !== undefined) {
        localVarQueryParameter['longitudine.lessThan'] = longitudineLessThan;
      }

      if (longitudineLessThanOrEqual !== undefined) {
        localVarQueryParameter['longitudine.lessThanOrEqual'] = longitudineLessThanOrEqual;
      }

      if (longitudineNotEquals !== undefined) {
        localVarQueryParameter['longitudine.notEquals'] = longitudineNotEquals;
      }

      if (longitudineNotIn) {
        localVarQueryParameter['longitudine.notIn'] = longitudineNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (longitudineSpecified !== undefined) {
        localVarQueryParameter['longitudine.specified'] = longitudineSpecified;
      }

      if (marchioIdEquals !== undefined) {
        localVarQueryParameter['marchioId.equals'] = marchioIdEquals;
      }

      if (marchioIdGreaterThan !== undefined) {
        localVarQueryParameter['marchioId.greaterThan'] = marchioIdGreaterThan;
      }

      if (marchioIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['marchioId.greaterThanOrEqual'] = marchioIdGreaterThanOrEqual;
      }

      if (marchioIdIn) {
        localVarQueryParameter['marchioId.in'] = marchioIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (marchioIdLessThan !== undefined) {
        localVarQueryParameter['marchioId.lessThan'] = marchioIdLessThan;
      }

      if (marchioIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['marchioId.lessThanOrEqual'] = marchioIdLessThanOrEqual;
      }

      if (marchioIdNotEquals !== undefined) {
        localVarQueryParameter['marchioId.notEquals'] = marchioIdNotEquals;
      }

      if (marchioIdNotIn) {
        localVarQueryParameter['marchioId.notIn'] = marchioIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (marchioIdSpecified !== undefined) {
        localVarQueryParameter['marchioId.specified'] = marchioIdSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }

      if (provinciaContains !== undefined) {
        localVarQueryParameter['provincia.contains'] = provinciaContains;
      }

      if (provinciaDoesNotContain !== undefined) {
        localVarQueryParameter['provincia.doesNotContain'] = provinciaDoesNotContain;
      }

      if (provinciaEquals !== undefined) {
        localVarQueryParameter['provincia.equals'] = provinciaEquals;
      }

      if (provinciaIn) {
        localVarQueryParameter['provincia.in'] = provinciaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (provinciaNotEquals !== undefined) {
        localVarQueryParameter['provincia.notEquals'] = provinciaNotEquals;
      }

      if (provinciaNotIn) {
        localVarQueryParameter['provincia.notIn'] = provinciaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (provinciaSpecified !== undefined) {
        localVarQueryParameter['provincia.specified'] = provinciaSpecified;
      }

      if (rifornimentoIdEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
      }

      if (rifornimentoIdGreaterThan !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
      }

      if (rifornimentoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
      }

      if (rifornimentoIdIn) {
        localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdLessThan !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
      }

      if (rifornimentoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
      }

      if (rifornimentoIdNotEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
      }

      if (rifornimentoIdNotIn) {
        localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdSpecified !== undefined) {
        localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
      }

      if (tipoEquals !== undefined) {
        localVarQueryParameter['tipo.equals'] = tipoEquals;
      }

      if (tipoIn) {
        localVarQueryParameter['tipo.in'] = tipoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoNotEquals !== undefined) {
        localVarQueryParameter['tipo.notEquals'] = tipoNotEquals;
      }

      if (tipoNotIn) {
        localVarQueryParameter['tipo.notIn'] = tipoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoSpecified !== undefined) {
        localVarQueryParameter['tipo.specified'] = tipoSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGestoreUsingPOST: async (gestore?: Gestore, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/gestores`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof gestore !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(gestore !== undefined ? gestore : {})
        : (gestore || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGestoreUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteGestoreUsingDELETE.');
      }
      const localVarPath = `/api/gestores/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGestoresUsingGET: async (benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/gestores`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (benzinaPrezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.equals'] = benzinaPrezzoAlLitroEquals;
      }

      if (benzinaPrezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.greaterThan'] = benzinaPrezzoAlLitroGreaterThan;
      }

      if (benzinaPrezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.greaterThanOrEqual'] = benzinaPrezzoAlLitroGreaterThanOrEqual;
      }

      if (benzinaPrezzoAlLitroIn) {
        localVarQueryParameter['benzinaPrezzoAlLitro.in'] = benzinaPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (benzinaPrezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.lessThan'] = benzinaPrezzoAlLitroLessThan;
      }

      if (benzinaPrezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.lessThanOrEqual'] = benzinaPrezzoAlLitroLessThanOrEqual;
      }

      if (benzinaPrezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.notEquals'] = benzinaPrezzoAlLitroNotEquals;
      }

      if (benzinaPrezzoAlLitroNotIn) {
        localVarQueryParameter['benzinaPrezzoAlLitro.notIn'] = benzinaPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (benzinaPrezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['benzinaPrezzoAlLitro.specified'] = benzinaPrezzoAlLitroSpecified;
      }

      if (comuneContains !== undefined) {
        localVarQueryParameter['comune.contains'] = comuneContains;
      }

      if (comuneDoesNotContain !== undefined) {
        localVarQueryParameter['comune.doesNotContain'] = comuneDoesNotContain;
      }

      if (comuneEquals !== undefined) {
        localVarQueryParameter['comune.equals'] = comuneEquals;
      }

      if (comuneIn) {
        localVarQueryParameter['comune.in'] = comuneIn.join(COLLECTION_FORMATS.pipes);
      }

      if (comuneNotEquals !== undefined) {
        localVarQueryParameter['comune.notEquals'] = comuneNotEquals;
      }

      if (comuneNotIn) {
        localVarQueryParameter['comune.notIn'] = comuneNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (comuneSpecified !== undefined) {
        localVarQueryParameter['comune.specified'] = comuneSpecified;
      }

      if (gasolioPrezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.equals'] = gasolioPrezzoAlLitroEquals;
      }

      if (gasolioPrezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.greaterThan'] = gasolioPrezzoAlLitroGreaterThan;
      }

      if (gasolioPrezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.greaterThanOrEqual'] = gasolioPrezzoAlLitroGreaterThanOrEqual;
      }

      if (gasolioPrezzoAlLitroIn) {
        localVarQueryParameter['gasolioPrezzoAlLitro.in'] = gasolioPrezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gasolioPrezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.lessThan'] = gasolioPrezzoAlLitroLessThan;
      }

      if (gasolioPrezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.lessThanOrEqual'] = gasolioPrezzoAlLitroLessThanOrEqual;
      }

      if (gasolioPrezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.notEquals'] = gasolioPrezzoAlLitroNotEquals;
      }

      if (gasolioPrezzoAlLitroNotIn) {
        localVarQueryParameter['gasolioPrezzoAlLitro.notIn'] = gasolioPrezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gasolioPrezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['gasolioPrezzoAlLitro.specified'] = gasolioPrezzoAlLitroSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (indirizzoContains !== undefined) {
        localVarQueryParameter['indirizzo.contains'] = indirizzoContains;
      }

      if (indirizzoDoesNotContain !== undefined) {
        localVarQueryParameter['indirizzo.doesNotContain'] = indirizzoDoesNotContain;
      }

      if (indirizzoEquals !== undefined) {
        localVarQueryParameter['indirizzo.equals'] = indirizzoEquals;
      }

      if (indirizzoIn) {
        localVarQueryParameter['indirizzo.in'] = indirizzoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (indirizzoNotEquals !== undefined) {
        localVarQueryParameter['indirizzo.notEquals'] = indirizzoNotEquals;
      }

      if (indirizzoNotIn) {
        localVarQueryParameter['indirizzo.notIn'] = indirizzoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (indirizzoSpecified !== undefined) {
        localVarQueryParameter['indirizzo.specified'] = indirizzoSpecified;
      }

      if (latitudineEquals !== undefined) {
        localVarQueryParameter['latitudine.equals'] = latitudineEquals;
      }

      if (latitudineGreaterThan !== undefined) {
        localVarQueryParameter['latitudine.greaterThan'] = latitudineGreaterThan;
      }

      if (latitudineGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['latitudine.greaterThanOrEqual'] = latitudineGreaterThanOrEqual;
      }

      if (latitudineIn) {
        localVarQueryParameter['latitudine.in'] = latitudineIn.join(COLLECTION_FORMATS.pipes);
      }

      if (latitudineLessThan !== undefined) {
        localVarQueryParameter['latitudine.lessThan'] = latitudineLessThan;
      }

      if (latitudineLessThanOrEqual !== undefined) {
        localVarQueryParameter['latitudine.lessThanOrEqual'] = latitudineLessThanOrEqual;
      }

      if (latitudineNotEquals !== undefined) {
        localVarQueryParameter['latitudine.notEquals'] = latitudineNotEquals;
      }

      if (latitudineNotIn) {
        localVarQueryParameter['latitudine.notIn'] = latitudineNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (latitudineSpecified !== undefined) {
        localVarQueryParameter['latitudine.specified'] = latitudineSpecified;
      }

      if (longitudineEquals !== undefined) {
        localVarQueryParameter['longitudine.equals'] = longitudineEquals;
      }

      if (longitudineGreaterThan !== undefined) {
        localVarQueryParameter['longitudine.greaterThan'] = longitudineGreaterThan;
      }

      if (longitudineGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['longitudine.greaterThanOrEqual'] = longitudineGreaterThanOrEqual;
      }

      if (longitudineIn) {
        localVarQueryParameter['longitudine.in'] = longitudineIn.join(COLLECTION_FORMATS.pipes);
      }

      if (longitudineLessThan !== undefined) {
        localVarQueryParameter['longitudine.lessThan'] = longitudineLessThan;
      }

      if (longitudineLessThanOrEqual !== undefined) {
        localVarQueryParameter['longitudine.lessThanOrEqual'] = longitudineLessThanOrEqual;
      }

      if (longitudineNotEquals !== undefined) {
        localVarQueryParameter['longitudine.notEquals'] = longitudineNotEquals;
      }

      if (longitudineNotIn) {
        localVarQueryParameter['longitudine.notIn'] = longitudineNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (longitudineSpecified !== undefined) {
        localVarQueryParameter['longitudine.specified'] = longitudineSpecified;
      }

      if (marchioIdEquals !== undefined) {
        localVarQueryParameter['marchioId.equals'] = marchioIdEquals;
      }

      if (marchioIdGreaterThan !== undefined) {
        localVarQueryParameter['marchioId.greaterThan'] = marchioIdGreaterThan;
      }

      if (marchioIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['marchioId.greaterThanOrEqual'] = marchioIdGreaterThanOrEqual;
      }

      if (marchioIdIn) {
        localVarQueryParameter['marchioId.in'] = marchioIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (marchioIdLessThan !== undefined) {
        localVarQueryParameter['marchioId.lessThan'] = marchioIdLessThan;
      }

      if (marchioIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['marchioId.lessThanOrEqual'] = marchioIdLessThanOrEqual;
      }

      if (marchioIdNotEquals !== undefined) {
        localVarQueryParameter['marchioId.notEquals'] = marchioIdNotEquals;
      }

      if (marchioIdNotIn) {
        localVarQueryParameter['marchioId.notIn'] = marchioIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (marchioIdSpecified !== undefined) {
        localVarQueryParameter['marchioId.specified'] = marchioIdSpecified;
      }

      if (ownerContains !== undefined) {
        localVarQueryParameter['owner.contains'] = ownerContains;
      }

      if (ownerDoesNotContain !== undefined) {
        localVarQueryParameter['owner.doesNotContain'] = ownerDoesNotContain;
      }

      if (ownerEquals !== undefined) {
        localVarQueryParameter['owner.equals'] = ownerEquals;
      }

      if (ownerIn) {
        localVarQueryParameter['owner.in'] = ownerIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerNotEquals !== undefined) {
        localVarQueryParameter['owner.notEquals'] = ownerNotEquals;
      }

      if (ownerNotIn) {
        localVarQueryParameter['owner.notIn'] = ownerNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (ownerSpecified !== undefined) {
        localVarQueryParameter['owner.specified'] = ownerSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (provinciaContains !== undefined) {
        localVarQueryParameter['provincia.contains'] = provinciaContains;
      }

      if (provinciaDoesNotContain !== undefined) {
        localVarQueryParameter['provincia.doesNotContain'] = provinciaDoesNotContain;
      }

      if (provinciaEquals !== undefined) {
        localVarQueryParameter['provincia.equals'] = provinciaEquals;
      }

      if (provinciaIn) {
        localVarQueryParameter['provincia.in'] = provinciaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (provinciaNotEquals !== undefined) {
        localVarQueryParameter['provincia.notEquals'] = provinciaNotEquals;
      }

      if (provinciaNotIn) {
        localVarQueryParameter['provincia.notIn'] = provinciaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (provinciaSpecified !== undefined) {
        localVarQueryParameter['provincia.specified'] = provinciaSpecified;
      }

      if (rifornimentoIdEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
      }

      if (rifornimentoIdGreaterThan !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
      }

      if (rifornimentoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
      }

      if (rifornimentoIdIn) {
        localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdLessThan !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
      }

      if (rifornimentoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
      }

      if (rifornimentoIdNotEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
      }

      if (rifornimentoIdNotIn) {
        localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdSpecified !== undefined) {
        localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (tipoEquals !== undefined) {
        localVarQueryParameter['tipo.equals'] = tipoEquals;
      }

      if (tipoIn) {
        localVarQueryParameter['tipo.in'] = tipoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoNotEquals !== undefined) {
        localVarQueryParameter['tipo.notEquals'] = tipoNotEquals;
      }

      if (tipoNotIn) {
        localVarQueryParameter['tipo.notIn'] = tipoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoSpecified !== undefined) {
        localVarQueryParameter['tipo.specified'] = tipoSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGestoreUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getGestoreUsingGET.');
      }
      const localVarPath = `/api/gestores/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateGestoreUsingPATCH: async (gestore?: Gestore, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/gestores`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof gestore !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(gestore !== undefined ? gestore : {})
        : (gestore || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGestoreUsingPUT: async (gestore?: Gestore, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/gestores`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof gestore !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(gestore !== undefined ? gestore : {})
        : (gestore || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * GestoreResourceApi - functional programming interface
 * @export
 */
export const GestoreResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGestoreUsingPOST(gestore?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).createGestoreUsingPOST(gestore, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGestoreUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).deleteGestoreUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Gestore>>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGestoreUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).getGestoreUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateGestoreUsingPATCH(gestore?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).partialUpdateGestoreUsingPATCH(gestore, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGestoreUsingPUT(gestore?: Gestore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gestore>> {
      const localVarAxiosArgs = await GestoreResourceApiAxiosParamCreator(configuration).updateGestoreUsingPUT(gestore, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * GestoreResourceApi - factory interface
 * @export
 */
export const GestoreResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): AxiosPromise<number> {
      return GestoreResourceApiFp(configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGestoreUsingPOST(gestore?: Gestore, options?: any): AxiosPromise<Gestore> {
      return GestoreResourceApiFp(configuration).createGestoreUsingPOST(gestore, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGestoreUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return GestoreResourceApiFp(configuration).deleteGestoreUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllGestores
     * @param {number} [benzinaPrezzoAlLitroEquals]
     * @param {number} [benzinaPrezzoAlLitroGreaterThan]
     * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [benzinaPrezzoAlLitroIn]
     * @param {number} [benzinaPrezzoAlLitroLessThan]
     * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
     * @param {number} [benzinaPrezzoAlLitroNotEquals]
     * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
     * @param {boolean} [benzinaPrezzoAlLitroSpecified]
     * @param {string} [comuneContains]
     * @param {string} [comuneDoesNotContain]
     * @param {string} [comuneEquals]
     * @param {Array<string>} [comuneIn]
     * @param {string} [comuneNotEquals]
     * @param {Array<string>} [comuneNotIn]
     * @param {boolean} [comuneSpecified]
     * @param {number} [gasolioPrezzoAlLitroEquals]
     * @param {number} [gasolioPrezzoAlLitroGreaterThan]
     * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [gasolioPrezzoAlLitroIn]
     * @param {number} [gasolioPrezzoAlLitroLessThan]
     * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
     * @param {number} [gasolioPrezzoAlLitroNotEquals]
     * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
     * @param {boolean} [gasolioPrezzoAlLitroSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [indirizzoContains]
     * @param {string} [indirizzoDoesNotContain]
     * @param {string} [indirizzoEquals]
     * @param {Array<string>} [indirizzoIn]
     * @param {string} [indirizzoNotEquals]
     * @param {Array<string>} [indirizzoNotIn]
     * @param {boolean} [indirizzoSpecified]
     * @param {number} [latitudineEquals]
     * @param {number} [latitudineGreaterThan]
     * @param {number} [latitudineGreaterThanOrEqual]
     * @param {Array<number>} [latitudineIn]
     * @param {number} [latitudineLessThan]
     * @param {number} [latitudineLessThanOrEqual]
     * @param {number} [latitudineNotEquals]
     * @param {Array<number>} [latitudineNotIn]
     * @param {boolean} [latitudineSpecified]
     * @param {number} [longitudineEquals]
     * @param {number} [longitudineGreaterThan]
     * @param {number} [longitudineGreaterThanOrEqual]
     * @param {Array<number>} [longitudineIn]
     * @param {number} [longitudineLessThan]
     * @param {number} [longitudineLessThanOrEqual]
     * @param {number} [longitudineNotEquals]
     * @param {Array<number>} [longitudineNotIn]
     * @param {boolean} [longitudineSpecified]
     * @param {number} [marchioIdEquals]
     * @param {number} [marchioIdGreaterThan]
     * @param {number} [marchioIdGreaterThanOrEqual]
     * @param {Array<number>} [marchioIdIn]
     * @param {number} [marchioIdLessThan]
     * @param {number} [marchioIdLessThanOrEqual]
     * @param {number} [marchioIdNotEquals]
     * @param {Array<number>} [marchioIdNotIn]
     * @param {boolean} [marchioIdSpecified]
     * @param {string} [ownerContains]
     * @param {string} [ownerDoesNotContain]
     * @param {string} [ownerEquals]
     * @param {Array<string>} [ownerIn]
     * @param {string} [ownerNotEquals]
     * @param {Array<string>} [ownerNotIn]
     * @param {boolean} [ownerSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {string} [provinciaContains]
     * @param {string} [provinciaDoesNotContain]
     * @param {string} [provinciaEquals]
     * @param {Array<string>} [provinciaIn]
     * @param {string} [provinciaNotEquals]
     * @param {Array<string>} [provinciaNotIn]
     * @param {boolean} [provinciaSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
     * @param {Array<string>} [tipoIn]
     * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
     * @param {Array<string>} [tipoNotIn]
     * @param {boolean} [tipoSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any): AxiosPromise<Array<Gestore>> {
      return GestoreResourceApiFp(configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getGestore
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGestoreUsingGET(id: number, options?: any): AxiosPromise<Gestore> {
      return GestoreResourceApiFp(configuration).getGestoreUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateGestoreUsingPATCH(gestore?: Gestore, options?: any): AxiosPromise<Gestore> {
      return GestoreResourceApiFp(configuration).partialUpdateGestoreUsingPATCH(gestore, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateGestore
     * @param {Gestore} [gestore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGestoreUsingPUT(gestore?: Gestore, options?: any): AxiosPromise<Gestore> {
      return GestoreResourceApiFp(configuration).updateGestoreUsingPUT(gestore, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * GestoreResourceApi - object-oriented interface
 * @export
 * @class GestoreResourceApi
 * @extends {BaseAPI}
 */
export class GestoreResourceApi extends BaseAPI {
  /**
   *
   * @summary countGestores
   * @param {number} [benzinaPrezzoAlLitroEquals]
   * @param {number} [benzinaPrezzoAlLitroGreaterThan]
   * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [benzinaPrezzoAlLitroIn]
   * @param {number} [benzinaPrezzoAlLitroLessThan]
   * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
   * @param {number} [benzinaPrezzoAlLitroNotEquals]
   * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
   * @param {boolean} [benzinaPrezzoAlLitroSpecified]
   * @param {string} [comuneContains]
   * @param {string} [comuneDoesNotContain]
   * @param {string} [comuneEquals]
   * @param {Array<string>} [comuneIn]
   * @param {string} [comuneNotEquals]
   * @param {Array<string>} [comuneNotIn]
   * @param {boolean} [comuneSpecified]
   * @param {number} [gasolioPrezzoAlLitroEquals]
   * @param {number} [gasolioPrezzoAlLitroGreaterThan]
   * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [gasolioPrezzoAlLitroIn]
   * @param {number} [gasolioPrezzoAlLitroLessThan]
   * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
   * @param {number} [gasolioPrezzoAlLitroNotEquals]
   * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
   * @param {boolean} [gasolioPrezzoAlLitroSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [indirizzoContains]
   * @param {string} [indirizzoDoesNotContain]
   * @param {string} [indirizzoEquals]
   * @param {Array<string>} [indirizzoIn]
   * @param {string} [indirizzoNotEquals]
   * @param {Array<string>} [indirizzoNotIn]
   * @param {boolean} [indirizzoSpecified]
   * @param {number} [latitudineEquals]
   * @param {number} [latitudineGreaterThan]
   * @param {number} [latitudineGreaterThanOrEqual]
   * @param {Array<number>} [latitudineIn]
   * @param {number} [latitudineLessThan]
   * @param {number} [latitudineLessThanOrEqual]
   * @param {number} [latitudineNotEquals]
   * @param {Array<number>} [latitudineNotIn]
   * @param {boolean} [latitudineSpecified]
   * @param {number} [longitudineEquals]
   * @param {number} [longitudineGreaterThan]
   * @param {number} [longitudineGreaterThanOrEqual]
   * @param {Array<number>} [longitudineIn]
   * @param {number} [longitudineLessThan]
   * @param {number} [longitudineLessThanOrEqual]
   * @param {number} [longitudineNotEquals]
   * @param {Array<number>} [longitudineNotIn]
   * @param {boolean} [longitudineSpecified]
   * @param {number} [marchioIdEquals]
   * @param {number} [marchioIdGreaterThan]
   * @param {number} [marchioIdGreaterThanOrEqual]
   * @param {Array<number>} [marchioIdIn]
   * @param {number} [marchioIdLessThan]
   * @param {number} [marchioIdLessThanOrEqual]
   * @param {number} [marchioIdNotEquals]
   * @param {Array<number>} [marchioIdNotIn]
   * @param {boolean} [marchioIdSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {string} [provinciaContains]
   * @param {string} [provinciaDoesNotContain]
   * @param {string} [provinciaEquals]
   * @param {Array<string>} [provinciaIn]
   * @param {string} [provinciaNotEquals]
   * @param {Array<string>} [provinciaNotIn]
   * @param {boolean} [provinciaSpecified]
   * @param {number} [rifornimentoIdEquals]
   * @param {number} [rifornimentoIdGreaterThan]
   * @param {number} [rifornimentoIdGreaterThanOrEqual]
   * @param {Array<number>} [rifornimentoIdIn]
   * @param {number} [rifornimentoIdLessThan]
   * @param {number} [rifornimentoIdLessThanOrEqual]
   * @param {number} [rifornimentoIdNotEquals]
   * @param {Array<number>} [rifornimentoIdNotIn]
   * @param {boolean} [rifornimentoIdSpecified]
   * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
   * @param {Array<string>} [tipoIn]
   * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
   * @param {Array<string>} [tipoNotIn]
   * @param {boolean} [tipoSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public countGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any) {
    return GestoreResourceApiFp(this.configuration).countGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createGestore
   * @param {Gestore} [gestore]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public createGestoreUsingPOST(gestore?: Gestore, options?: any) {
    return GestoreResourceApiFp(this.configuration).createGestoreUsingPOST(gestore, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteGestore
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public deleteGestoreUsingDELETE(id: number, options?: any) {
    return GestoreResourceApiFp(this.configuration).deleteGestoreUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllGestores
   * @param {number} [benzinaPrezzoAlLitroEquals]
   * @param {number} [benzinaPrezzoAlLitroGreaterThan]
   * @param {number} [benzinaPrezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [benzinaPrezzoAlLitroIn]
   * @param {number} [benzinaPrezzoAlLitroLessThan]
   * @param {number} [benzinaPrezzoAlLitroLessThanOrEqual]
   * @param {number} [benzinaPrezzoAlLitroNotEquals]
   * @param {Array<number>} [benzinaPrezzoAlLitroNotIn]
   * @param {boolean} [benzinaPrezzoAlLitroSpecified]
   * @param {string} [comuneContains]
   * @param {string} [comuneDoesNotContain]
   * @param {string} [comuneEquals]
   * @param {Array<string>} [comuneIn]
   * @param {string} [comuneNotEquals]
   * @param {Array<string>} [comuneNotIn]
   * @param {boolean} [comuneSpecified]
   * @param {number} [gasolioPrezzoAlLitroEquals]
   * @param {number} [gasolioPrezzoAlLitroGreaterThan]
   * @param {number} [gasolioPrezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [gasolioPrezzoAlLitroIn]
   * @param {number} [gasolioPrezzoAlLitroLessThan]
   * @param {number} [gasolioPrezzoAlLitroLessThanOrEqual]
   * @param {number} [gasolioPrezzoAlLitroNotEquals]
   * @param {Array<number>} [gasolioPrezzoAlLitroNotIn]
   * @param {boolean} [gasolioPrezzoAlLitroSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [indirizzoContains]
   * @param {string} [indirizzoDoesNotContain]
   * @param {string} [indirizzoEquals]
   * @param {Array<string>} [indirizzoIn]
   * @param {string} [indirizzoNotEquals]
   * @param {Array<string>} [indirizzoNotIn]
   * @param {boolean} [indirizzoSpecified]
   * @param {number} [latitudineEquals]
   * @param {number} [latitudineGreaterThan]
   * @param {number} [latitudineGreaterThanOrEqual]
   * @param {Array<number>} [latitudineIn]
   * @param {number} [latitudineLessThan]
   * @param {number} [latitudineLessThanOrEqual]
   * @param {number} [latitudineNotEquals]
   * @param {Array<number>} [latitudineNotIn]
   * @param {boolean} [latitudineSpecified]
   * @param {number} [longitudineEquals]
   * @param {number} [longitudineGreaterThan]
   * @param {number} [longitudineGreaterThanOrEqual]
   * @param {Array<number>} [longitudineIn]
   * @param {number} [longitudineLessThan]
   * @param {number} [longitudineLessThanOrEqual]
   * @param {number} [longitudineNotEquals]
   * @param {Array<number>} [longitudineNotIn]
   * @param {boolean} [longitudineSpecified]
   * @param {number} [marchioIdEquals]
   * @param {number} [marchioIdGreaterThan]
   * @param {number} [marchioIdGreaterThanOrEqual]
   * @param {Array<number>} [marchioIdIn]
   * @param {number} [marchioIdLessThan]
   * @param {number} [marchioIdLessThanOrEqual]
   * @param {number} [marchioIdNotEquals]
   * @param {Array<number>} [marchioIdNotIn]
   * @param {boolean} [marchioIdSpecified]
   * @param {string} [ownerContains]
   * @param {string} [ownerDoesNotContain]
   * @param {string} [ownerEquals]
   * @param {Array<string>} [ownerIn]
   * @param {string} [ownerNotEquals]
   * @param {Array<string>} [ownerNotIn]
   * @param {boolean} [ownerSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {string} [provinciaContains]
   * @param {string} [provinciaDoesNotContain]
   * @param {string} [provinciaEquals]
   * @param {Array<string>} [provinciaIn]
   * @param {string} [provinciaNotEquals]
   * @param {Array<string>} [provinciaNotIn]
   * @param {boolean} [provinciaSpecified]
   * @param {number} [rifornimentoIdEquals]
   * @param {number} [rifornimentoIdGreaterThan]
   * @param {number} [rifornimentoIdGreaterThanOrEqual]
   * @param {Array<number>} [rifornimentoIdIn]
   * @param {number} [rifornimentoIdLessThan]
   * @param {number} [rifornimentoIdLessThanOrEqual]
   * @param {number} [rifornimentoIdNotEquals]
   * @param {Array<number>} [rifornimentoIdNotIn]
   * @param {boolean} [rifornimentoIdSpecified]
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoEquals]
   * @param {Array<string>} [tipoIn]
   * @param {'AUTOSTRADALE' | 'NAVALE' | 'STRADALE'} [tipoNotEquals]
   * @param {Array<string>} [tipoNotIn]
   * @param {boolean} [tipoSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals?: number, benzinaPrezzoAlLitroGreaterThan?: number, benzinaPrezzoAlLitroGreaterThanOrEqual?: number, benzinaPrezzoAlLitroIn?: Array<number>, benzinaPrezzoAlLitroLessThan?: number, benzinaPrezzoAlLitroLessThanOrEqual?: number, benzinaPrezzoAlLitroNotEquals?: number, benzinaPrezzoAlLitroNotIn?: Array<number>, benzinaPrezzoAlLitroSpecified?: boolean, comuneContains?: string, comuneDoesNotContain?: string, comuneEquals?: string, comuneIn?: Array<string>, comuneNotEquals?: string, comuneNotIn?: Array<string>, comuneSpecified?: boolean, gasolioPrezzoAlLitroEquals?: number, gasolioPrezzoAlLitroGreaterThan?: number, gasolioPrezzoAlLitroGreaterThanOrEqual?: number, gasolioPrezzoAlLitroIn?: Array<number>, gasolioPrezzoAlLitroLessThan?: number, gasolioPrezzoAlLitroLessThanOrEqual?: number, gasolioPrezzoAlLitroNotEquals?: number, gasolioPrezzoAlLitroNotIn?: Array<number>, gasolioPrezzoAlLitroSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, indirizzoContains?: string, indirizzoDoesNotContain?: string, indirizzoEquals?: string, indirizzoIn?: Array<string>, indirizzoNotEquals?: string, indirizzoNotIn?: Array<string>, indirizzoSpecified?: boolean, latitudineEquals?: number, latitudineGreaterThan?: number, latitudineGreaterThanOrEqual?: number, latitudineIn?: Array<number>, latitudineLessThan?: number, latitudineLessThanOrEqual?: number, latitudineNotEquals?: number, latitudineNotIn?: Array<number>, latitudineSpecified?: boolean, longitudineEquals?: number, longitudineGreaterThan?: number, longitudineGreaterThanOrEqual?: number, longitudineIn?: Array<number>, longitudineLessThan?: number, longitudineLessThanOrEqual?: number, longitudineNotEquals?: number, longitudineNotIn?: Array<number>, longitudineSpecified?: boolean, marchioIdEquals?: number, marchioIdGreaterThan?: number, marchioIdGreaterThanOrEqual?: number, marchioIdIn?: Array<number>, marchioIdLessThan?: number, marchioIdLessThanOrEqual?: number, marchioIdNotEquals?: number, marchioIdNotIn?: Array<number>, marchioIdSpecified?: boolean, ownerContains?: string, ownerDoesNotContain?: string, ownerEquals?: string, ownerIn?: Array<string>, ownerNotEquals?: string, ownerNotIn?: Array<string>, ownerSpecified?: boolean, page?: number, provinciaContains?: string, provinciaDoesNotContain?: string, provinciaEquals?: string, provinciaIn?: Array<string>, provinciaNotEquals?: string, provinciaNotIn?: Array<string>, provinciaSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, tipoEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoIn?: Array<string>, tipoNotEquals?: 'AUTOSTRADALE' | 'NAVALE' | 'STRADALE', tipoNotIn?: Array<string>, tipoSpecified?: boolean, options?: any) {
    return GestoreResourceApiFp(this.configuration).getAllGestoresUsingGET(benzinaPrezzoAlLitroEquals, benzinaPrezzoAlLitroGreaterThan, benzinaPrezzoAlLitroGreaterThanOrEqual, benzinaPrezzoAlLitroIn, benzinaPrezzoAlLitroLessThan, benzinaPrezzoAlLitroLessThanOrEqual, benzinaPrezzoAlLitroNotEquals, benzinaPrezzoAlLitroNotIn, benzinaPrezzoAlLitroSpecified, comuneContains, comuneDoesNotContain, comuneEquals, comuneIn, comuneNotEquals, comuneNotIn, comuneSpecified, gasolioPrezzoAlLitroEquals, gasolioPrezzoAlLitroGreaterThan, gasolioPrezzoAlLitroGreaterThanOrEqual, gasolioPrezzoAlLitroIn, gasolioPrezzoAlLitroLessThan, gasolioPrezzoAlLitroLessThanOrEqual, gasolioPrezzoAlLitroNotEquals, gasolioPrezzoAlLitroNotIn, gasolioPrezzoAlLitroSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, indirizzoContains, indirizzoDoesNotContain, indirizzoEquals, indirizzoIn, indirizzoNotEquals, indirizzoNotIn, indirizzoSpecified, latitudineEquals, latitudineGreaterThan, latitudineGreaterThanOrEqual, latitudineIn, latitudineLessThan, latitudineLessThanOrEqual, latitudineNotEquals, latitudineNotIn, latitudineSpecified, longitudineEquals, longitudineGreaterThan, longitudineGreaterThanOrEqual, longitudineIn, longitudineLessThan, longitudineLessThanOrEqual, longitudineNotEquals, longitudineNotIn, longitudineSpecified, marchioIdEquals, marchioIdGreaterThan, marchioIdGreaterThanOrEqual, marchioIdIn, marchioIdLessThan, marchioIdLessThanOrEqual, marchioIdNotEquals, marchioIdNotIn, marchioIdSpecified, ownerContains, ownerDoesNotContain, ownerEquals, ownerIn, ownerNotEquals, ownerNotIn, ownerSpecified, page, provinciaContains, provinciaDoesNotContain, provinciaEquals, provinciaIn, provinciaNotEquals, provinciaNotIn, provinciaSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, tipoEquals, tipoIn, tipoNotEquals, tipoNotIn, tipoSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getGestore
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public getGestoreUsingGET(id: number, options?: any) {
    return GestoreResourceApiFp(this.configuration).getGestoreUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateGestore
   * @param {Gestore} [gestore]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public partialUpdateGestoreUsingPATCH(gestore?: Gestore, options?: any) {
    return GestoreResourceApiFp(this.configuration).partialUpdateGestoreUsingPATCH(gestore, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateGestore
   * @param {Gestore} [gestore]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GestoreResourceApi
   */
  public updateGestoreUsingPUT(gestore?: Gestore, options?: any) {
    return GestoreResourceApiFp(this.configuration).updateGestoreUsingPUT(gestore, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * MarchioResourceApi - axios parameter creator
 * @export
 */
export const MarchioResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMarchioUsingPOST: async (marchio?: Marchio, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/marchios`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof marchio !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(marchio !== undefined ? marchio : {})
        : (marchio || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMarchioUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteMarchioUsingDELETE.');
      }
      const localVarPath = `/api/marchios/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllMarchios
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllMarchiosUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/marchios`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarchioUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getMarchioUsingGET.');
      }
      const localVarPath = `/api/marchios/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateMarchioUsingPATCH: async (marchio?: Marchio, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/marchios`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof marchio !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(marchio !== undefined ? marchio : {})
        : (marchio || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMarchioUsingPUT: async (marchio?: Marchio, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/marchios`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof marchio !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(marchio !== undefined ? marchio : {})
        : (marchio || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * MarchioResourceApi - functional programming interface
 * @export
 */
export const MarchioResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMarchioUsingPOST(marchio?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).createMarchioUsingPOST(marchio, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMarchioUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).deleteMarchioUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllMarchios
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Marchio>>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).getAllMarchiosUsingGET(page, size, sort, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMarchioUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).getMarchioUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateMarchioUsingPATCH(marchio?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).partialUpdateMarchioUsingPATCH(marchio, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMarchioUsingPUT(marchio?: Marchio, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marchio>> {
      const localVarAxiosArgs = await MarchioResourceApiAxiosParamCreator(configuration).updateMarchioUsingPUT(marchio, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * MarchioResourceApi - factory interface
 * @export
 */
export const MarchioResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary createMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMarchioUsingPOST(marchio?: Marchio, options?: any): AxiosPromise<Marchio> {
      return MarchioResourceApiFp(configuration).createMarchioUsingPOST(marchio, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMarchioUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return MarchioResourceApiFp(configuration).deleteMarchioUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllMarchios
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<Marchio>> {
      return MarchioResourceApiFp(configuration).getAllMarchiosUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getMarchio
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarchioUsingGET(id: number, options?: any): AxiosPromise<Marchio> {
      return MarchioResourceApiFp(configuration).getMarchioUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateMarchioUsingPATCH(marchio?: Marchio, options?: any): AxiosPromise<Marchio> {
      return MarchioResourceApiFp(configuration).partialUpdateMarchioUsingPATCH(marchio, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateMarchio
     * @param {Marchio} [marchio]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMarchioUsingPUT(marchio?: Marchio, options?: any): AxiosPromise<Marchio> {
      return MarchioResourceApiFp(configuration).updateMarchioUsingPUT(marchio, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MarchioResourceApi - object-oriented interface
 * @export
 * @class MarchioResourceApi
 * @extends {BaseAPI}
 */
export class MarchioResourceApi extends BaseAPI {
  /**
   *
   * @summary createMarchio
   * @param {Marchio} [marchio]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public createMarchioUsingPOST(marchio?: Marchio, options?: any) {
    return MarchioResourceApiFp(this.configuration).createMarchioUsingPOST(marchio, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteMarchio
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public deleteMarchioUsingDELETE(id: number, options?: any) {
    return MarchioResourceApiFp(this.configuration).deleteMarchioUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllMarchios
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public getAllMarchiosUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
    return MarchioResourceApiFp(this.configuration).getAllMarchiosUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getMarchio
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public getMarchioUsingGET(id: number, options?: any) {
    return MarchioResourceApiFp(this.configuration).getMarchioUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateMarchio
   * @param {Marchio} [marchio]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public partialUpdateMarchioUsingPATCH(marchio?: Marchio, options?: any) {
    return MarchioResourceApiFp(this.configuration).partialUpdateMarchioUsingPATCH(marchio, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateMarchio
   * @param {Marchio} [marchio]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarchioResourceApi
   */
  public updateMarchioUsingPUT(marchio?: Marchio, options?: any) {
    return MarchioResourceApiFp(this.configuration).updateMarchioUsingPUT(marchio, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * NotificaResourceApi - axios parameter creator
 * @export
 */
export const NotificaResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countNotificasUsingGET: async (dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/notificas/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (dataEquals !== undefined) {
        localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
          (dataEquals as any).toISOString() :
          dataEquals;
      }

      if (dataGreaterThan !== undefined) {
        localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
          (dataGreaterThan as any).toISOString() :
          dataGreaterThan;
      }

      if (dataGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
          (dataGreaterThanOrEqual as any).toISOString() :
          dataGreaterThanOrEqual;
      }

      if (dataIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
      }

      if (dataIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
      }

      if (dataIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
      }

      if (dataIn0Hour !== undefined) {
        localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
      }

      if (dataIn0Minute !== undefined) {
        localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
      }

      if (dataIn0Month !== undefined) {
        localVarQueryParameter['data.in[0].month'] = dataIn0Month;
      }

      if (dataIn0MonthValue !== undefined) {
        localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
      }

      if (dataIn0Nano !== undefined) {
        localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
      }

      if (dataIn0OffsetId !== undefined) {
        localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
      }

      if (dataIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
      }

      if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
      }

      if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataIn0OffsetRulesTransitions0Instant;
      }

      if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
      }

      if (dataIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
      }

      if (dataIn0Second !== undefined) {
        localVarQueryParameter['data.in[0].second'] = dataIn0Second;
      }

      if (dataIn0Year !== undefined) {
        localVarQueryParameter['data.in[0].year'] = dataIn0Year;
      }

      if (dataIn0ZoneId !== undefined) {
        localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
      }

      if (dataIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
      }

      if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataIn0ZoneRulesTransitions0Instant;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
      }

      if (dataLessThan !== undefined) {
        localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
          (dataLessThan as any).toISOString() :
          dataLessThan;
      }

      if (dataLessThanOrEqual !== undefined) {
        localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
          (dataLessThanOrEqual as any).toISOString() :
          dataLessThanOrEqual;
      }

      if (dataNotEquals !== undefined) {
        localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
          (dataNotEquals as any).toISOString() :
          dataNotEquals;
      }

      if (dataNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
      }

      if (dataNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
      }

      if (dataNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
      }

      if (dataNotIn0Hour !== undefined) {
        localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
      }

      if (dataNotIn0Minute !== undefined) {
        localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
      }

      if (dataNotIn0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
      }

      if (dataNotIn0MonthValue !== undefined) {
        localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
      }

      if (dataNotIn0Nano !== undefined) {
        localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
      }

      if (dataNotIn0OffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
      }

      if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
      }

      if (dataNotIn0Second !== undefined) {
        localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
      }

      if (dataNotIn0Year !== undefined) {
        localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
      }

      if (dataNotIn0ZoneId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
      }

      if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataSpecified !== undefined) {
        localVarQueryParameter['data.specified'] = dataSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (targaContains !== undefined) {
        localVarQueryParameter['targa.contains'] = targaContains;
      }

      if (targaDoesNotContain !== undefined) {
        localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
      }

      if (targaEquals !== undefined) {
        localVarQueryParameter['targa.equals'] = targaEquals;
      }

      if (targaIn) {
        localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaNotEquals !== undefined) {
        localVarQueryParameter['targa.notEquals'] = targaNotEquals;
      }

      if (targaNotIn) {
        localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaSpecified !== undefined) {
        localVarQueryParameter['targa.specified'] = targaSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createNotifica
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotificaUsingPOST: async (notificaDTO?: NotificaDTO, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/notificas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof notificaDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(notificaDTO !== undefined ? notificaDTO : {})
        : (notificaDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNotificaUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteNotificaUsingDELETE.');
      }
      const localVarPath = `/api/notificas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllNotificasUsingGET: async (dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/notificas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (dataEquals !== undefined) {
        localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
          (dataEquals as any).toISOString() :
          dataEquals;
      }

      if (dataGreaterThan !== undefined) {
        localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
          (dataGreaterThan as any).toISOString() :
          dataGreaterThan;
      }

      if (dataGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
          (dataGreaterThanOrEqual as any).toISOString() :
          dataGreaterThanOrEqual;
      }

      if (dataIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
      }

      if (dataIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
      }

      if (dataIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
      }

      if (dataIn0Hour !== undefined) {
        localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
      }

      if (dataIn0Minute !== undefined) {
        localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
      }

      if (dataIn0Month !== undefined) {
        localVarQueryParameter['data.in[0].month'] = dataIn0Month;
      }

      if (dataIn0MonthValue !== undefined) {
        localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
      }

      if (dataIn0Nano !== undefined) {
        localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
      }

      if (dataIn0OffsetId !== undefined) {
        localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
      }

      if (dataIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
      }

      if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
      }

      if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataIn0OffsetRulesTransitions0Instant;
      }

      if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
      }

      if (dataIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
      }

      if (dataIn0Second !== undefined) {
        localVarQueryParameter['data.in[0].second'] = dataIn0Second;
      }

      if (dataIn0Year !== undefined) {
        localVarQueryParameter['data.in[0].year'] = dataIn0Year;
      }

      if (dataIn0ZoneId !== undefined) {
        localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
      }

      if (dataIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
      }

      if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataIn0ZoneRulesTransitions0Instant;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
      }

      if (dataLessThan !== undefined) {
        localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
          (dataLessThan as any).toISOString() :
          dataLessThan;
      }

      if (dataLessThanOrEqual !== undefined) {
        localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
          (dataLessThanOrEqual as any).toISOString() :
          dataLessThanOrEqual;
      }

      if (dataNotEquals !== undefined) {
        localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
          (dataNotEquals as any).toISOString() :
          dataNotEquals;
      }

      if (dataNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
      }

      if (dataNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
      }

      if (dataNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
      }

      if (dataNotIn0Hour !== undefined) {
        localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
      }

      if (dataNotIn0Minute !== undefined) {
        localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
      }

      if (dataNotIn0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
      }

      if (dataNotIn0MonthValue !== undefined) {
        localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
      }

      if (dataNotIn0Nano !== undefined) {
        localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
      }

      if (dataNotIn0OffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
      }

      if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
      }

      if (dataNotIn0Second !== undefined) {
        localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
      }

      if (dataNotIn0Year !== undefined) {
        localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
      }

      if (dataNotIn0ZoneId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
      }

      if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataSpecified !== undefined) {
        localVarQueryParameter['data.specified'] = dataSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (targaContains !== undefined) {
        localVarQueryParameter['targa.contains'] = targaContains;
      }

      if (targaDoesNotContain !== undefined) {
        localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
      }

      if (targaEquals !== undefined) {
        localVarQueryParameter['targa.equals'] = targaEquals;
      }

      if (targaIn) {
        localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaNotEquals !== undefined) {
        localVarQueryParameter['targa.notEquals'] = targaNotEquals;
      }

      if (targaNotIn) {
        localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaSpecified !== undefined) {
        localVarQueryParameter['targa.specified'] = targaSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificaUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getNotificaUsingGET.');
      }
      const localVarPath = `/api/notificas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateNotificaUsingPATCH: async (id: number, notificaDTO?: NotificaDTO, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling partialUpdateNotificaUsingPATCH.');
      }
      const localVarPath = `/api/notificas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof notificaDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(notificaDTO !== undefined ? notificaDTO : {})
        : (notificaDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificaUsingPUT: async (id: number, notificaDTO?: NotificaDTO, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateNotificaUsingPUT.');
      }
      const localVarPath = `/api/notificas/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof notificaDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(notificaDTO !== undefined ? notificaDTO : {})
        : (notificaDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * NotificaResourceApi - functional programming interface
 * @export
 */
export const NotificaResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).countNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createNotifica
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNotificaUsingPOST(notificaDTO?: NotificaDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificaDTO>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).createNotificaUsingPOST(notificaDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteNotificaUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).deleteNotificaUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificaDTO>>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).getAllNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotificaUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificaDTO>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).getNotificaUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateNotificaUsingPATCH(id: number, notificaDTO?: NotificaDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificaDTO>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).partialUpdateNotificaUsingPATCH(id, notificaDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotificaUsingPUT(id: number, notificaDTO?: NotificaDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificaDTO>> {
      const localVarAxiosArgs = await NotificaResourceApiAxiosParamCreator(configuration).updateNotificaUsingPUT(id, notificaDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * NotificaResourceApi - factory interface
 * @export
 */
export const NotificaResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any): AxiosPromise<number> {
      return NotificaResourceApiFp(configuration).countNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createNotifica
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotificaUsingPOST(notificaDTO?: NotificaDTO, options?: any): AxiosPromise<NotificaDTO> {
      return NotificaResourceApiFp(configuration).createNotificaUsingPOST(notificaDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNotificaUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return NotificaResourceApiFp(configuration).deleteNotificaUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllNotificas
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any): AxiosPromise<Array<NotificaDTO>> {
      return NotificaResourceApiFp(configuration).getAllNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getNotifica
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificaUsingGET(id: number, options?: any): AxiosPromise<NotificaDTO> {
      return NotificaResourceApiFp(configuration).getNotificaUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateNotificaUsingPATCH(id: number, notificaDTO?: NotificaDTO, options?: any): AxiosPromise<NotificaDTO> {
      return NotificaResourceApiFp(configuration).partialUpdateNotificaUsingPATCH(id, notificaDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateNotifica
     * @param {number} id id
     * @param {NotificaDTO} [notificaDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificaUsingPUT(id: number, notificaDTO?: NotificaDTO, options?: any): AxiosPromise<NotificaDTO> {
      return NotificaResourceApiFp(configuration).updateNotificaUsingPUT(id, notificaDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * NotificaResourceApi - object-oriented interface
 * @export
 * @class NotificaResourceApi
 * @extends {BaseAPI}
 */
export class NotificaResourceApi extends BaseAPI {
  /**
   *
   * @summary countNotificas
   * @param {string} [dataEquals]
   * @param {string} [dataGreaterThan]
   * @param {string} [dataGreaterThanOrEqual]
   * @param {number} [dataIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
   * @param {number} [dataIn0DayOfYear]
   * @param {number} [dataIn0Hour]
   * @param {number} [dataIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
   * @param {number} [dataIn0MonthValue]
   * @param {number} [dataIn0Nano]
   * @param {string} [dataIn0OffsetId]
   * @param {boolean} [dataIn0OffsetRulesFixedOffset]
   * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataIn0OffsetTotalSeconds]
   * @param {number} [dataIn0Second]
   * @param {number} [dataIn0Year]
   * @param {string} [dataIn0ZoneId]
   * @param {boolean} [dataIn0ZoneRulesFixedOffset]
   * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataLessThan]
   * @param {string} [dataLessThanOrEqual]
   * @param {string} [dataNotEquals]
   * @param {number} [dataNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
   * @param {number} [dataNotIn0DayOfYear]
   * @param {number} [dataNotIn0Hour]
   * @param {number} [dataNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
   * @param {number} [dataNotIn0MonthValue]
   * @param {number} [dataNotIn0Nano]
   * @param {string} [dataNotIn0OffsetId]
   * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataNotIn0OffsetTotalSeconds]
   * @param {number} [dataNotIn0Second]
   * @param {number} [dataNotIn0Year]
   * @param {string} [dataNotIn0ZoneId]
   * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {string} [targaContains]
   * @param {string} [targaDoesNotContain]
   * @param {string} [targaEquals]
   * @param {Array<string>} [targaIn]
   * @param {string} [targaNotEquals]
   * @param {Array<string>} [targaNotIn]
   * @param {boolean} [targaSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public countNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any) {
    return NotificaResourceApiFp(this.configuration).countNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createNotifica
   * @param {NotificaDTO} [notificaDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public createNotificaUsingPOST(notificaDTO?: NotificaDTO, options?: any) {
    return NotificaResourceApiFp(this.configuration).createNotificaUsingPOST(notificaDTO, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteNotifica
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public deleteNotificaUsingDELETE(id: number, options?: any) {
    return NotificaResourceApiFp(this.configuration).deleteNotificaUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllNotificas
   * @param {string} [dataEquals]
   * @param {string} [dataGreaterThan]
   * @param {string} [dataGreaterThanOrEqual]
   * @param {number} [dataIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
   * @param {number} [dataIn0DayOfYear]
   * @param {number} [dataIn0Hour]
   * @param {number} [dataIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
   * @param {number} [dataIn0MonthValue]
   * @param {number} [dataIn0Nano]
   * @param {string} [dataIn0OffsetId]
   * @param {boolean} [dataIn0OffsetRulesFixedOffset]
   * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataIn0OffsetTotalSeconds]
   * @param {number} [dataIn0Second]
   * @param {number} [dataIn0Year]
   * @param {string} [dataIn0ZoneId]
   * @param {boolean} [dataIn0ZoneRulesFixedOffset]
   * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataLessThan]
   * @param {string} [dataLessThanOrEqual]
   * @param {string} [dataNotEquals]
   * @param {number} [dataNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
   * @param {number} [dataNotIn0DayOfYear]
   * @param {number} [dataNotIn0Hour]
   * @param {number} [dataNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
   * @param {number} [dataNotIn0MonthValue]
   * @param {number} [dataNotIn0Nano]
   * @param {string} [dataNotIn0OffsetId]
   * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataNotIn0OffsetTotalSeconds]
   * @param {number} [dataNotIn0Second]
   * @param {number} [dataNotIn0Year]
   * @param {string} [dataNotIn0ZoneId]
   * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {string} [targaContains]
   * @param {string} [targaDoesNotContain]
   * @param {string} [targaEquals]
   * @param {Array<string>} [targaIn]
   * @param {string} [targaNotEquals]
   * @param {Array<string>} [targaNotIn]
   * @param {boolean} [targaSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public getAllNotificasUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, options?: any) {
    return NotificaResourceApiFp(this.configuration).getAllNotificasUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getNotifica
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public getNotificaUsingGET(id: number, options?: any) {
    return NotificaResourceApiFp(this.configuration).getNotificaUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateNotifica
   * @param {number} id id
   * @param {NotificaDTO} [notificaDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public partialUpdateNotificaUsingPATCH(id: number, notificaDTO?: NotificaDTO, options?: any) {
    return NotificaResourceApiFp(this.configuration).partialUpdateNotificaUsingPATCH(id, notificaDTO, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateNotifica
   * @param {number} id id
   * @param {NotificaDTO} [notificaDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificaResourceApi
   */
  public updateNotificaUsingPUT(id: number, notificaDTO?: NotificaDTO, options?: any) {
    return NotificaResourceApiFp(this.configuration).updateNotificaUsingPUT(id, notificaDTO, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * PublicUserResourceApi - axios parameter creator
 * @export
 */
export const PublicUserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary getAllPublicUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPublicUsersUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAuthorities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/authorities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * PublicUserResourceApi - functional programming interface
 * @export
 */
export const PublicUserResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary getAllPublicUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
      const localVarAxiosArgs = await PublicUserResourceApiAxiosParamCreator(configuration).getAllPublicUsersUsingGET(page, size, sort, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAuthorities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthoritiesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await PublicUserResourceApiAxiosParamCreator(configuration).getAuthoritiesUsingGET(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * PublicUserResourceApi - factory interface
 * @export
 */
export const PublicUserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary getAllPublicUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserDTO>> {
      return PublicUserResourceApiFp(configuration).getAllPublicUsersUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAuthorities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesUsingGET(options?: any): AxiosPromise<Array<string>> {
      return PublicUserResourceApiFp(configuration).getAuthoritiesUsingGET(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicUserResourceApi - object-oriented interface
 * @export
 * @class PublicUserResourceApi
 * @extends {BaseAPI}
 */
export class PublicUserResourceApi extends BaseAPI {
  /**
   *
   * @summary getAllPublicUsers
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicUserResourceApi
   */
  public getAllPublicUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
    return PublicUserResourceApiFp(this.configuration).getAllPublicUsersUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAuthorities
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicUserResourceApi
   */
  public getAuthoritiesUsingGET(options?: any) {
    return PublicUserResourceApiFp(this.configuration).getAuthoritiesUsingGET(options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * RifornimentoResourceApi - axios parameter creator
 * @export
 */
export const RifornimentoResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countRifornimentosUsingGET: async (dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/rifornimentos/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (dataEquals !== undefined) {
        localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
          (dataEquals as any).toISOString() :
          dataEquals;
      }

      if (dataGreaterThan !== undefined) {
        localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
          (dataGreaterThan as any).toISOString() :
          dataGreaterThan;
      }

      if (dataGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
          (dataGreaterThanOrEqual as any).toISOString() :
          dataGreaterThanOrEqual;
      }

      if (dataIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
      }

      if (dataIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
      }

      if (dataIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
      }

      if (dataIn0Hour !== undefined) {
        localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
      }

      if (dataIn0Minute !== undefined) {
        localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
      }

      if (dataIn0Month !== undefined) {
        localVarQueryParameter['data.in[0].month'] = dataIn0Month;
      }

      if (dataIn0MonthValue !== undefined) {
        localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
      }

      if (dataIn0Nano !== undefined) {
        localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
      }

      if (dataIn0OffsetId !== undefined) {
        localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
      }

      if (dataIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
      }

      if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
      }

      if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataIn0OffsetRulesTransitions0Instant;
      }

      if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
      }

      if (dataIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
      }

      if (dataIn0Second !== undefined) {
        localVarQueryParameter['data.in[0].second'] = dataIn0Second;
      }

      if (dataIn0Year !== undefined) {
        localVarQueryParameter['data.in[0].year'] = dataIn0Year;
      }

      if (dataIn0ZoneId !== undefined) {
        localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
      }

      if (dataIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
      }

      if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataIn0ZoneRulesTransitions0Instant;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
      }

      if (dataLessThan !== undefined) {
        localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
          (dataLessThan as any).toISOString() :
          dataLessThan;
      }

      if (dataLessThanOrEqual !== undefined) {
        localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
          (dataLessThanOrEqual as any).toISOString() :
          dataLessThanOrEqual;
      }

      if (dataNotEquals !== undefined) {
        localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
          (dataNotEquals as any).toISOString() :
          dataNotEquals;
      }

      if (dataNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
      }

      if (dataNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
      }

      if (dataNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
      }

      if (dataNotIn0Hour !== undefined) {
        localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
      }

      if (dataNotIn0Minute !== undefined) {
        localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
      }

      if (dataNotIn0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
      }

      if (dataNotIn0MonthValue !== undefined) {
        localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
      }

      if (dataNotIn0Nano !== undefined) {
        localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
      }

      if (dataNotIn0OffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
      }

      if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
      }

      if (dataNotIn0Second !== undefined) {
        localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
      }

      if (dataNotIn0Year !== undefined) {
        localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
      }

      if (dataNotIn0ZoneId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
      }

      if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataSpecified !== undefined) {
        localVarQueryParameter['data.specified'] = dataSpecified;
      }

      if (gestoreIdEquals !== undefined) {
        localVarQueryParameter['gestoreId.equals'] = gestoreIdEquals;
      }

      if (gestoreIdGreaterThan !== undefined) {
        localVarQueryParameter['gestoreId.greaterThan'] = gestoreIdGreaterThan;
      }

      if (gestoreIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['gestoreId.greaterThanOrEqual'] = gestoreIdGreaterThanOrEqual;
      }

      if (gestoreIdIn) {
        localVarQueryParameter['gestoreId.in'] = gestoreIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gestoreIdLessThan !== undefined) {
        localVarQueryParameter['gestoreId.lessThan'] = gestoreIdLessThan;
      }

      if (gestoreIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['gestoreId.lessThanOrEqual'] = gestoreIdLessThanOrEqual;
      }

      if (gestoreIdNotEquals !== undefined) {
        localVarQueryParameter['gestoreId.notEquals'] = gestoreIdNotEquals;
      }

      if (gestoreIdNotIn) {
        localVarQueryParameter['gestoreId.notIn'] = gestoreIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gestoreIdSpecified !== undefined) {
        localVarQueryParameter['gestoreId.specified'] = gestoreIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (litriErogatiEquals !== undefined) {
        localVarQueryParameter['litriErogati.equals'] = litriErogatiEquals;
      }

      if (litriErogatiGreaterThan !== undefined) {
        localVarQueryParameter['litriErogati.greaterThan'] = litriErogatiGreaterThan;
      }

      if (litriErogatiGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['litriErogati.greaterThanOrEqual'] = litriErogatiGreaterThanOrEqual;
      }

      if (litriErogatiIn) {
        localVarQueryParameter['litriErogati.in'] = litriErogatiIn.join(COLLECTION_FORMATS.pipes);
      }

      if (litriErogatiLessThan !== undefined) {
        localVarQueryParameter['litriErogati.lessThan'] = litriErogatiLessThan;
      }

      if (litriErogatiLessThanOrEqual !== undefined) {
        localVarQueryParameter['litriErogati.lessThanOrEqual'] = litriErogatiLessThanOrEqual;
      }

      if (litriErogatiNotEquals !== undefined) {
        localVarQueryParameter['litriErogati.notEquals'] = litriErogatiNotEquals;
      }

      if (litriErogatiNotIn) {
        localVarQueryParameter['litriErogati.notIn'] = litriErogatiNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (litriErogatiSpecified !== undefined) {
        localVarQueryParameter['litriErogati.specified'] = litriErogatiSpecified;
      }

      if (prezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['prezzoAlLitro.equals'] = prezzoAlLitroEquals;
      }

      if (prezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['prezzoAlLitro.greaterThan'] = prezzoAlLitroGreaterThan;
      }

      if (prezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['prezzoAlLitro.greaterThanOrEqual'] = prezzoAlLitroGreaterThanOrEqual;
      }

      if (prezzoAlLitroIn) {
        localVarQueryParameter['prezzoAlLitro.in'] = prezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (prezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['prezzoAlLitro.lessThan'] = prezzoAlLitroLessThan;
      }

      if (prezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['prezzoAlLitro.lessThanOrEqual'] = prezzoAlLitroLessThanOrEqual;
      }

      if (prezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['prezzoAlLitro.notEquals'] = prezzoAlLitroNotEquals;
      }

      if (prezzoAlLitroNotIn) {
        localVarQueryParameter['prezzoAlLitro.notIn'] = prezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (prezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['prezzoAlLitro.specified'] = prezzoAlLitroSpecified;
      }

      if (scontoEquals !== undefined) {
        localVarQueryParameter['sconto.equals'] = scontoEquals;
      }

      if (scontoGreaterThan !== undefined) {
        localVarQueryParameter['sconto.greaterThan'] = scontoGreaterThan;
      }

      if (scontoGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['sconto.greaterThanOrEqual'] = scontoGreaterThanOrEqual;
      }

      if (scontoIn) {
        localVarQueryParameter['sconto.in'] = scontoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (scontoLessThan !== undefined) {
        localVarQueryParameter['sconto.lessThan'] = scontoLessThan;
      }

      if (scontoLessThanOrEqual !== undefined) {
        localVarQueryParameter['sconto.lessThanOrEqual'] = scontoLessThanOrEqual;
      }

      if (scontoNotEquals !== undefined) {
        localVarQueryParameter['sconto.notEquals'] = scontoNotEquals;
      }

      if (scontoNotIn) {
        localVarQueryParameter['sconto.notIn'] = scontoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (scontoSpecified !== undefined) {
        localVarQueryParameter['sconto.specified'] = scontoSpecified;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }

      if (tipoCarburanteEquals !== undefined) {
        localVarQueryParameter['tipoCarburante.equals'] = tipoCarburanteEquals;
      }

      if (tipoCarburanteIn) {
        localVarQueryParameter['tipoCarburante.in'] = tipoCarburanteIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoCarburanteNotEquals !== undefined) {
        localVarQueryParameter['tipoCarburante.notEquals'] = tipoCarburanteNotEquals;
      }

      if (tipoCarburanteNotIn) {
        localVarQueryParameter['tipoCarburante.notIn'] = tipoCarburanteNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoCarburanteSpecified !== undefined) {
        localVarQueryParameter['tipoCarburante.specified'] = tipoCarburanteSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRifornimentoUsingPOST: async (rifornimento?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/rifornimentos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof rifornimento !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(rifornimento !== undefined ? rifornimento : {})
        : (rifornimento || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRifornimentoUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRifornimentoUsingDELETE.');
      }
      const localVarPath = `/api/rifornimentos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllRifornimentosUsingGET: async (dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/rifornimentos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (dataEquals !== undefined) {
        localVarQueryParameter['data.equals'] = (dataEquals as any instanceof Date) ?
          (dataEquals as any).toISOString() :
          dataEquals;
      }

      if (dataGreaterThan !== undefined) {
        localVarQueryParameter['data.greaterThan'] = (dataGreaterThan as any instanceof Date) ?
          (dataGreaterThan as any).toISOString() :
          dataGreaterThan;
      }

      if (dataGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['data.greaterThanOrEqual'] = (dataGreaterThanOrEqual as any instanceof Date) ?
          (dataGreaterThanOrEqual as any).toISOString() :
          dataGreaterThanOrEqual;
      }

      if (dataIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.in[0].dayOfMonth'] = dataIn0DayOfMonth;
      }

      if (dataIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].dayOfWeek'] = dataIn0DayOfWeek;
      }

      if (dataIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.in[0].dayOfYear'] = dataIn0DayOfYear;
      }

      if (dataIn0Hour !== undefined) {
        localVarQueryParameter['data.in[0].hour'] = dataIn0Hour;
      }

      if (dataIn0Minute !== undefined) {
        localVarQueryParameter['data.in[0].minute'] = dataIn0Minute;
      }

      if (dataIn0Month !== undefined) {
        localVarQueryParameter['data.in[0].month'] = dataIn0Month;
      }

      if (dataIn0MonthValue !== undefined) {
        localVarQueryParameter['data.in[0].monthValue'] = dataIn0MonthValue;
      }

      if (dataIn0Nano !== undefined) {
        localVarQueryParameter['data.in[0].nano'] = dataIn0Nano;
      }

      if (dataIn0OffsetId !== undefined) {
        localVarQueryParameter['data.in[0].offset.id'] = dataIn0OffsetId;
      }

      if (dataIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.fixedOffset'] = dataIn0OffsetRulesFixedOffset;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].localTime.second'] = dataIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].month'] = dataIn0OffsetRulesTransitionRules0Month;
      }

      if (dataIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.nano'] = dataIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.negative'] = dataIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.seconds'] = dataIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].duration.zero'] = dataIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].gap'] = dataIn0OffsetRulesTransitions0Gap;
      }

      if (dataIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].instant'] = (dataIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataIn0OffsetRulesTransitions0Instant;
      }

      if (dataIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].offset.rules.transitions[0].overlap'] = dataIn0OffsetRulesTransitions0Overlap;
      }

      if (dataIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].offset.totalSeconds'] = dataIn0OffsetTotalSeconds;
      }

      if (dataIn0Second !== undefined) {
        localVarQueryParameter['data.in[0].second'] = dataIn0Second;
      }

      if (dataIn0Year !== undefined) {
        localVarQueryParameter['data.in[0].year'] = dataIn0Year;
      }

      if (dataIn0ZoneId !== undefined) {
        localVarQueryParameter['data.in[0].zone.id'] = dataIn0ZoneId;
      }

      if (dataIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.fixedOffset'] = dataIn0ZoneRulesFixedOffset;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].localTime.second'] = dataIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].month'] = dataIn0ZoneRulesTransitionRules0Month;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.nano'] = dataIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.negative'] = dataIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.seconds'] = dataIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].duration.zero'] = dataIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].gap'] = dataIn0ZoneRulesTransitions0Gap;
      }

      if (dataIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].instant'] = (dataIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataIn0ZoneRulesTransitions0Instant;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.in[0].zone.rules.transitions[0].overlap'] = dataIn0ZoneRulesTransitions0Overlap;
      }

      if (dataLessThan !== undefined) {
        localVarQueryParameter['data.lessThan'] = (dataLessThan as any instanceof Date) ?
          (dataLessThan as any).toISOString() :
          dataLessThan;
      }

      if (dataLessThanOrEqual !== undefined) {
        localVarQueryParameter['data.lessThanOrEqual'] = (dataLessThanOrEqual as any instanceof Date) ?
          (dataLessThanOrEqual as any).toISOString() :
          dataLessThanOrEqual;
      }

      if (dataNotEquals !== undefined) {
        localVarQueryParameter['data.notEquals'] = (dataNotEquals as any instanceof Date) ?
          (dataNotEquals as any).toISOString() :
          dataNotEquals;
      }

      if (dataNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfMonth'] = dataNotIn0DayOfMonth;
      }

      if (dataNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfWeek'] = dataNotIn0DayOfWeek;
      }

      if (dataNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['data.notIn[0].dayOfYear'] = dataNotIn0DayOfYear;
      }

      if (dataNotIn0Hour !== undefined) {
        localVarQueryParameter['data.notIn[0].hour'] = dataNotIn0Hour;
      }

      if (dataNotIn0Minute !== undefined) {
        localVarQueryParameter['data.notIn[0].minute'] = dataNotIn0Minute;
      }

      if (dataNotIn0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].month'] = dataNotIn0Month;
      }

      if (dataNotIn0MonthValue !== undefined) {
        localVarQueryParameter['data.notIn[0].monthValue'] = dataNotIn0MonthValue;
      }

      if (dataNotIn0Nano !== undefined) {
        localVarQueryParameter['data.notIn[0].nano'] = dataNotIn0Nano;
      }

      if (dataNotIn0OffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.id'] = dataNotIn0OffsetId;
      }

      if (dataNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.fixedOffset'] = dataNotIn0OffsetRulesFixedOffset;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].month'] = dataNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.nano'] = dataNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.negative'] = dataNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].duration.zero'] = dataNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].gap'] = dataNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].instant'] = (dataNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.rules.transitions[0].overlap'] = dataNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].offset.totalSeconds'] = dataNotIn0OffsetTotalSeconds;
      }

      if (dataNotIn0Second !== undefined) {
        localVarQueryParameter['data.notIn[0].second'] = dataNotIn0Second;
      }

      if (dataNotIn0Year !== undefined) {
        localVarQueryParameter['data.notIn[0].year'] = dataNotIn0Year;
      }

      if (dataNotIn0ZoneId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.id'] = dataNotIn0ZoneId;
      }

      if (dataNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.fixedOffset'] = dataNotIn0ZoneRulesFixedOffset;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].month'] = dataNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.nano'] = dataNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.negative'] = dataNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].duration.zero'] = dataNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].gap'] = dataNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].instant'] = (dataNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['data.notIn[0].zone.rules.transitions[0].overlap'] = dataNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataSpecified !== undefined) {
        localVarQueryParameter['data.specified'] = dataSpecified;
      }

      if (gestoreIdEquals !== undefined) {
        localVarQueryParameter['gestoreId.equals'] = gestoreIdEquals;
      }

      if (gestoreIdGreaterThan !== undefined) {
        localVarQueryParameter['gestoreId.greaterThan'] = gestoreIdGreaterThan;
      }

      if (gestoreIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['gestoreId.greaterThanOrEqual'] = gestoreIdGreaterThanOrEqual;
      }

      if (gestoreIdIn) {
        localVarQueryParameter['gestoreId.in'] = gestoreIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gestoreIdLessThan !== undefined) {
        localVarQueryParameter['gestoreId.lessThan'] = gestoreIdLessThan;
      }

      if (gestoreIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['gestoreId.lessThanOrEqual'] = gestoreIdLessThanOrEqual;
      }

      if (gestoreIdNotEquals !== undefined) {
        localVarQueryParameter['gestoreId.notEquals'] = gestoreIdNotEquals;
      }

      if (gestoreIdNotIn) {
        localVarQueryParameter['gestoreId.notIn'] = gestoreIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (gestoreIdSpecified !== undefined) {
        localVarQueryParameter['gestoreId.specified'] = gestoreIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (litriErogatiEquals !== undefined) {
        localVarQueryParameter['litriErogati.equals'] = litriErogatiEquals;
      }

      if (litriErogatiGreaterThan !== undefined) {
        localVarQueryParameter['litriErogati.greaterThan'] = litriErogatiGreaterThan;
      }

      if (litriErogatiGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['litriErogati.greaterThanOrEqual'] = litriErogatiGreaterThanOrEqual;
      }

      if (litriErogatiIn) {
        localVarQueryParameter['litriErogati.in'] = litriErogatiIn.join(COLLECTION_FORMATS.pipes);
      }

      if (litriErogatiLessThan !== undefined) {
        localVarQueryParameter['litriErogati.lessThan'] = litriErogatiLessThan;
      }

      if (litriErogatiLessThanOrEqual !== undefined) {
        localVarQueryParameter['litriErogati.lessThanOrEqual'] = litriErogatiLessThanOrEqual;
      }

      if (litriErogatiNotEquals !== undefined) {
        localVarQueryParameter['litriErogati.notEquals'] = litriErogatiNotEquals;
      }

      if (litriErogatiNotIn) {
        localVarQueryParameter['litriErogati.notIn'] = litriErogatiNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (litriErogatiSpecified !== undefined) {
        localVarQueryParameter['litriErogati.specified'] = litriErogatiSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (prezzoAlLitroEquals !== undefined) {
        localVarQueryParameter['prezzoAlLitro.equals'] = prezzoAlLitroEquals;
      }

      if (prezzoAlLitroGreaterThan !== undefined) {
        localVarQueryParameter['prezzoAlLitro.greaterThan'] = prezzoAlLitroGreaterThan;
      }

      if (prezzoAlLitroGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['prezzoAlLitro.greaterThanOrEqual'] = prezzoAlLitroGreaterThanOrEqual;
      }

      if (prezzoAlLitroIn) {
        localVarQueryParameter['prezzoAlLitro.in'] = prezzoAlLitroIn.join(COLLECTION_FORMATS.pipes);
      }

      if (prezzoAlLitroLessThan !== undefined) {
        localVarQueryParameter['prezzoAlLitro.lessThan'] = prezzoAlLitroLessThan;
      }

      if (prezzoAlLitroLessThanOrEqual !== undefined) {
        localVarQueryParameter['prezzoAlLitro.lessThanOrEqual'] = prezzoAlLitroLessThanOrEqual;
      }

      if (prezzoAlLitroNotEquals !== undefined) {
        localVarQueryParameter['prezzoAlLitro.notEquals'] = prezzoAlLitroNotEquals;
      }

      if (prezzoAlLitroNotIn) {
        localVarQueryParameter['prezzoAlLitro.notIn'] = prezzoAlLitroNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (prezzoAlLitroSpecified !== undefined) {
        localVarQueryParameter['prezzoAlLitro.specified'] = prezzoAlLitroSpecified;
      }

      if (scontoEquals !== undefined) {
        localVarQueryParameter['sconto.equals'] = scontoEquals;
      }

      if (scontoGreaterThan !== undefined) {
        localVarQueryParameter['sconto.greaterThan'] = scontoGreaterThan;
      }

      if (scontoGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['sconto.greaterThanOrEqual'] = scontoGreaterThanOrEqual;
      }

      if (scontoIn) {
        localVarQueryParameter['sconto.in'] = scontoIn.join(COLLECTION_FORMATS.pipes);
      }

      if (scontoLessThan !== undefined) {
        localVarQueryParameter['sconto.lessThan'] = scontoLessThan;
      }

      if (scontoLessThanOrEqual !== undefined) {
        localVarQueryParameter['sconto.lessThanOrEqual'] = scontoLessThanOrEqual;
      }

      if (scontoNotEquals !== undefined) {
        localVarQueryParameter['sconto.notEquals'] = scontoNotEquals;
      }

      if (scontoNotIn) {
        localVarQueryParameter['sconto.notIn'] = scontoNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (scontoSpecified !== undefined) {
        localVarQueryParameter['sconto.specified'] = scontoSpecified;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (tesseraIdEquals !== undefined) {
        localVarQueryParameter['tesseraId.equals'] = tesseraIdEquals;
      }

      if (tesseraIdGreaterThan !== undefined) {
        localVarQueryParameter['tesseraId.greaterThan'] = tesseraIdGreaterThan;
      }

      if (tesseraIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.greaterThanOrEqual'] = tesseraIdGreaterThanOrEqual;
      }

      if (tesseraIdIn) {
        localVarQueryParameter['tesseraId.in'] = tesseraIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdLessThan !== undefined) {
        localVarQueryParameter['tesseraId.lessThan'] = tesseraIdLessThan;
      }

      if (tesseraIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['tesseraId.lessThanOrEqual'] = tesseraIdLessThanOrEqual;
      }

      if (tesseraIdNotEquals !== undefined) {
        localVarQueryParameter['tesseraId.notEquals'] = tesseraIdNotEquals;
      }

      if (tesseraIdNotIn) {
        localVarQueryParameter['tesseraId.notIn'] = tesseraIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tesseraIdSpecified !== undefined) {
        localVarQueryParameter['tesseraId.specified'] = tesseraIdSpecified;
      }

      if (tipoCarburanteEquals !== undefined) {
        localVarQueryParameter['tipoCarburante.equals'] = tipoCarburanteEquals;
      }

      if (tipoCarburanteIn) {
        localVarQueryParameter['tipoCarburante.in'] = tipoCarburanteIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoCarburanteNotEquals !== undefined) {
        localVarQueryParameter['tipoCarburante.notEquals'] = tipoCarburanteNotEquals;
      }

      if (tipoCarburanteNotIn) {
        localVarQueryParameter['tipoCarburante.notIn'] = tipoCarburanteNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (tipoCarburanteSpecified !== undefined) {
        localVarQueryParameter['tipoCarburante.specified'] = tipoCarburanteSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRifornimentoUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getRifornimentoUsingGET.');
      }
      const localVarPath = `/api/rifornimentos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateRifornimentoUsingPATCH: async (rifornimento?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/rifornimentos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof rifornimento !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(rifornimento !== undefined ? rifornimento : {})
        : (rifornimento || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRifornimentoUsingPUT: async (rifornimento?: Rifornimento, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/rifornimentos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof rifornimento !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(rifornimento !== undefined ? rifornimento : {})
        : (rifornimento || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * RifornimentoResourceApi - functional programming interface
 * @export
 */
export const RifornimentoResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRifornimentoUsingPOST(rifornimento?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).createRifornimentoUsingPOST(rifornimento, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRifornimentoUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).deleteRifornimentoUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rifornimento>>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).getAllRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRifornimentoUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).getRifornimentoUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateRifornimentoUsingPATCH(rifornimento?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).partialUpdateRifornimentoUsingPATCH(rifornimento, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRifornimentoUsingPUT(rifornimento?: Rifornimento, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rifornimento>> {
      const localVarAxiosArgs = await RifornimentoResourceApiAxiosParamCreator(configuration).updateRifornimentoUsingPUT(rifornimento, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * RifornimentoResourceApi - factory interface
 * @export
 */
export const RifornimentoResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): AxiosPromise<number> {
      return RifornimentoResourceApiFp(configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRifornimentoUsingPOST(rifornimento?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
      return RifornimentoResourceApiFp(configuration).createRifornimentoUsingPOST(rifornimento, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRifornimentoUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return RifornimentoResourceApiFp(configuration).deleteRifornimentoUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllRifornimentos
     * @param {string} [dataEquals]
     * @param {string} [dataGreaterThan]
     * @param {string} [dataGreaterThanOrEqual]
     * @param {number} [dataIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
     * @param {number} [dataIn0DayOfYear]
     * @param {number} [dataIn0Hour]
     * @param {number} [dataIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
     * @param {number} [dataIn0MonthValue]
     * @param {number} [dataIn0Nano]
     * @param {string} [dataIn0OffsetId]
     * @param {boolean} [dataIn0OffsetRulesFixedOffset]
     * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataIn0OffsetTotalSeconds]
     * @param {number} [dataIn0Second]
     * @param {number} [dataIn0Year]
     * @param {string} [dataIn0ZoneId]
     * @param {boolean} [dataIn0ZoneRulesFixedOffset]
     * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataLessThan]
     * @param {string} [dataLessThanOrEqual]
     * @param {string} [dataNotEquals]
     * @param {number} [dataNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
     * @param {number} [dataNotIn0DayOfYear]
     * @param {number} [dataNotIn0Hour]
     * @param {number} [dataNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
     * @param {number} [dataNotIn0MonthValue]
     * @param {number} [dataNotIn0Nano]
     * @param {string} [dataNotIn0OffsetId]
     * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataNotIn0OffsetTotalSeconds]
     * @param {number} [dataNotIn0Second]
     * @param {number} [dataNotIn0Year]
     * @param {string} [dataNotIn0ZoneId]
     * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataSpecified]
     * @param {number} [gestoreIdEquals]
     * @param {number} [gestoreIdGreaterThan]
     * @param {number} [gestoreIdGreaterThanOrEqual]
     * @param {Array<number>} [gestoreIdIn]
     * @param {number} [gestoreIdLessThan]
     * @param {number} [gestoreIdLessThanOrEqual]
     * @param {number} [gestoreIdNotEquals]
     * @param {Array<number>} [gestoreIdNotIn]
     * @param {boolean} [gestoreIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [litriErogatiEquals]
     * @param {number} [litriErogatiGreaterThan]
     * @param {number} [litriErogatiGreaterThanOrEqual]
     * @param {Array<number>} [litriErogatiIn]
     * @param {number} [litriErogatiLessThan]
     * @param {number} [litriErogatiLessThanOrEqual]
     * @param {number} [litriErogatiNotEquals]
     * @param {Array<number>} [litriErogatiNotIn]
     * @param {boolean} [litriErogatiSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [prezzoAlLitroEquals]
     * @param {number} [prezzoAlLitroGreaterThan]
     * @param {number} [prezzoAlLitroGreaterThanOrEqual]
     * @param {Array<number>} [prezzoAlLitroIn]
     * @param {number} [prezzoAlLitroLessThan]
     * @param {number} [prezzoAlLitroLessThanOrEqual]
     * @param {number} [prezzoAlLitroNotEquals]
     * @param {Array<number>} [prezzoAlLitroNotIn]
     * @param {boolean} [prezzoAlLitroSpecified]
     * @param {number} [scontoEquals]
     * @param {number} [scontoGreaterThan]
     * @param {number} [scontoGreaterThanOrEqual]
     * @param {Array<number>} [scontoIn]
     * @param {number} [scontoLessThan]
     * @param {number} [scontoLessThanOrEqual]
     * @param {number} [scontoNotEquals]
     * @param {Array<number>} [scontoNotIn]
     * @param {boolean} [scontoSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {number} [tesseraIdEquals]
     * @param {number} [tesseraIdGreaterThan]
     * @param {number} [tesseraIdGreaterThanOrEqual]
     * @param {Array<number>} [tesseraIdIn]
     * @param {number} [tesseraIdLessThan]
     * @param {number} [tesseraIdLessThanOrEqual]
     * @param {number} [tesseraIdNotEquals]
     * @param {Array<number>} [tesseraIdNotIn]
     * @param {boolean} [tesseraIdSpecified]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
     * @param {Array<string>} [tipoCarburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
     * @param {Array<string>} [tipoCarburanteNotIn]
     * @param {boolean} [tipoCarburanteSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any): AxiosPromise<Array<Rifornimento>> {
      return RifornimentoResourceApiFp(configuration).getAllRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getRifornimento
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRifornimentoUsingGET(id: number, options?: any): AxiosPromise<Rifornimento> {
      return RifornimentoResourceApiFp(configuration).getRifornimentoUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateRifornimentoUsingPATCH(rifornimento?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
      return RifornimentoResourceApiFp(configuration).partialUpdateRifornimentoUsingPATCH(rifornimento, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateRifornimento
     * @param {Rifornimento} [rifornimento]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRifornimentoUsingPUT(rifornimento?: Rifornimento, options?: any): AxiosPromise<Rifornimento> {
      return RifornimentoResourceApiFp(configuration).updateRifornimentoUsingPUT(rifornimento, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RifornimentoResourceApi - object-oriented interface
 * @export
 * @class RifornimentoResourceApi
 * @extends {BaseAPI}
 */
export class RifornimentoResourceApi extends BaseAPI {
  /**
   *
   * @summary countRifornimentos
   * @param {string} [dataEquals]
   * @param {string} [dataGreaterThan]
   * @param {string} [dataGreaterThanOrEqual]
   * @param {number} [dataIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
   * @param {number} [dataIn0DayOfYear]
   * @param {number} [dataIn0Hour]
   * @param {number} [dataIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
   * @param {number} [dataIn0MonthValue]
   * @param {number} [dataIn0Nano]
   * @param {string} [dataIn0OffsetId]
   * @param {boolean} [dataIn0OffsetRulesFixedOffset]
   * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataIn0OffsetTotalSeconds]
   * @param {number} [dataIn0Second]
   * @param {number} [dataIn0Year]
   * @param {string} [dataIn0ZoneId]
   * @param {boolean} [dataIn0ZoneRulesFixedOffset]
   * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataLessThan]
   * @param {string} [dataLessThanOrEqual]
   * @param {string} [dataNotEquals]
   * @param {number} [dataNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
   * @param {number} [dataNotIn0DayOfYear]
   * @param {number} [dataNotIn0Hour]
   * @param {number} [dataNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
   * @param {number} [dataNotIn0MonthValue]
   * @param {number} [dataNotIn0Nano]
   * @param {string} [dataNotIn0OffsetId]
   * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataNotIn0OffsetTotalSeconds]
   * @param {number} [dataNotIn0Second]
   * @param {number} [dataNotIn0Year]
   * @param {string} [dataNotIn0ZoneId]
   * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataSpecified]
   * @param {number} [gestoreIdEquals]
   * @param {number} [gestoreIdGreaterThan]
   * @param {number} [gestoreIdGreaterThanOrEqual]
   * @param {Array<number>} [gestoreIdIn]
   * @param {number} [gestoreIdLessThan]
   * @param {number} [gestoreIdLessThanOrEqual]
   * @param {number} [gestoreIdNotEquals]
   * @param {Array<number>} [gestoreIdNotIn]
   * @param {boolean} [gestoreIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [litriErogatiEquals]
   * @param {number} [litriErogatiGreaterThan]
   * @param {number} [litriErogatiGreaterThanOrEqual]
   * @param {Array<number>} [litriErogatiIn]
   * @param {number} [litriErogatiLessThan]
   * @param {number} [litriErogatiLessThanOrEqual]
   * @param {number} [litriErogatiNotEquals]
   * @param {Array<number>} [litriErogatiNotIn]
   * @param {boolean} [litriErogatiSpecified]
   * @param {number} [prezzoAlLitroEquals]
   * @param {number} [prezzoAlLitroGreaterThan]
   * @param {number} [prezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [prezzoAlLitroIn]
   * @param {number} [prezzoAlLitroLessThan]
   * @param {number} [prezzoAlLitroLessThanOrEqual]
   * @param {number} [prezzoAlLitroNotEquals]
   * @param {Array<number>} [prezzoAlLitroNotIn]
   * @param {boolean} [prezzoAlLitroSpecified]
   * @param {number} [scontoEquals]
   * @param {number} [scontoGreaterThan]
   * @param {number} [scontoGreaterThanOrEqual]
   * @param {Array<number>} [scontoIn]
   * @param {number} [scontoLessThan]
   * @param {number} [scontoLessThanOrEqual]
   * @param {number} [scontoNotEquals]
   * @param {Array<number>} [scontoNotIn]
   * @param {boolean} [scontoSpecified]
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
   * @param {Array<string>} [tipoCarburanteIn]
   * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
   * @param {Array<string>} [tipoCarburanteNotIn]
   * @param {boolean} [tipoCarburanteSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public countRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).countRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createRifornimento
   * @param {Rifornimento} [rifornimento]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public createRifornimentoUsingPOST(rifornimento?: Rifornimento, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).createRifornimentoUsingPOST(rifornimento, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteRifornimento
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public deleteRifornimentoUsingDELETE(id: number, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).deleteRifornimentoUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllRifornimentos
   * @param {string} [dataEquals]
   * @param {string} [dataGreaterThan]
   * @param {string} [dataGreaterThanOrEqual]
   * @param {number} [dataIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0DayOfWeek]
   * @param {number} [dataIn0DayOfYear]
   * @param {number} [dataIn0Hour]
   * @param {number} [dataIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0Month]
   * @param {number} [dataIn0MonthValue]
   * @param {number} [dataIn0Nano]
   * @param {string} [dataIn0OffsetId]
   * @param {boolean} [dataIn0OffsetRulesFixedOffset]
   * @param {number} [dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataIn0OffsetTotalSeconds]
   * @param {number} [dataIn0Second]
   * @param {number} [dataIn0Year]
   * @param {string} [dataIn0ZoneId]
   * @param {boolean} [dataIn0ZoneRulesFixedOffset]
   * @param {number} [dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataLessThan]
   * @param {string} [dataLessThanOrEqual]
   * @param {string} [dataNotEquals]
   * @param {number} [dataNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0DayOfWeek]
   * @param {number} [dataNotIn0DayOfYear]
   * @param {number} [dataNotIn0Hour]
   * @param {number} [dataNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0Month]
   * @param {number} [dataNotIn0MonthValue]
   * @param {number} [dataNotIn0Nano]
   * @param {string} [dataNotIn0OffsetId]
   * @param {boolean} [dataNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataNotIn0OffsetTotalSeconds]
   * @param {number} [dataNotIn0Second]
   * @param {number} [dataNotIn0Year]
   * @param {string} [dataNotIn0ZoneId]
   * @param {boolean} [dataNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataSpecified]
   * @param {number} [gestoreIdEquals]
   * @param {number} [gestoreIdGreaterThan]
   * @param {number} [gestoreIdGreaterThanOrEqual]
   * @param {Array<number>} [gestoreIdIn]
   * @param {number} [gestoreIdLessThan]
   * @param {number} [gestoreIdLessThanOrEqual]
   * @param {number} [gestoreIdNotEquals]
   * @param {Array<number>} [gestoreIdNotIn]
   * @param {boolean} [gestoreIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [litriErogatiEquals]
   * @param {number} [litriErogatiGreaterThan]
   * @param {number} [litriErogatiGreaterThanOrEqual]
   * @param {Array<number>} [litriErogatiIn]
   * @param {number} [litriErogatiLessThan]
   * @param {number} [litriErogatiLessThanOrEqual]
   * @param {number} [litriErogatiNotEquals]
   * @param {Array<number>} [litriErogatiNotIn]
   * @param {boolean} [litriErogatiSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [prezzoAlLitroEquals]
   * @param {number} [prezzoAlLitroGreaterThan]
   * @param {number} [prezzoAlLitroGreaterThanOrEqual]
   * @param {Array<number>} [prezzoAlLitroIn]
   * @param {number} [prezzoAlLitroLessThan]
   * @param {number} [prezzoAlLitroLessThanOrEqual]
   * @param {number} [prezzoAlLitroNotEquals]
   * @param {Array<number>} [prezzoAlLitroNotIn]
   * @param {boolean} [prezzoAlLitroSpecified]
   * @param {number} [scontoEquals]
   * @param {number} [scontoGreaterThan]
   * @param {number} [scontoGreaterThanOrEqual]
   * @param {Array<number>} [scontoIn]
   * @param {number} [scontoLessThan]
   * @param {number} [scontoLessThanOrEqual]
   * @param {number} [scontoNotEquals]
   * @param {Array<number>} [scontoNotIn]
   * @param {boolean} [scontoSpecified]
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {number} [tesseraIdEquals]
   * @param {number} [tesseraIdGreaterThan]
   * @param {number} [tesseraIdGreaterThanOrEqual]
   * @param {Array<number>} [tesseraIdIn]
   * @param {number} [tesseraIdLessThan]
   * @param {number} [tesseraIdLessThanOrEqual]
   * @param {number} [tesseraIdNotEquals]
   * @param {Array<number>} [tesseraIdNotIn]
   * @param {boolean} [tesseraIdSpecified]
   * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteEquals]
   * @param {Array<string>} [tipoCarburanteIn]
   * @param {'BENZINA' | 'DIESEL'} [tipoCarburanteNotEquals]
   * @param {Array<string>} [tipoCarburanteNotIn]
   * @param {boolean} [tipoCarburanteSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public getAllRifornimentosUsingGET(dataEquals?: string, dataGreaterThan?: string, dataGreaterThanOrEqual?: string, dataIn0DayOfMonth?: number, dataIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0DayOfYear?: number, dataIn0Hour?: number, dataIn0Minute?: number, dataIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0MonthValue?: number, dataIn0Nano?: number, dataIn0OffsetId?: string, dataIn0OffsetRulesFixedOffset?: boolean, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0OffsetRulesTransitions0DateTimeAfter?: string, dataIn0OffsetRulesTransitions0DateTimeBefore?: string, dataIn0OffsetRulesTransitions0DurationNano?: number, dataIn0OffsetRulesTransitions0DurationNegative?: boolean, dataIn0OffsetRulesTransitions0DurationSeconds?: number, dataIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0OffsetRulesTransitions0DurationZero?: boolean, dataIn0OffsetRulesTransitions0Gap?: boolean, dataIn0OffsetRulesTransitions0Instant?: string, dataIn0OffsetRulesTransitions0Overlap?: boolean, dataIn0OffsetTotalSeconds?: number, dataIn0Second?: number, dataIn0Year?: number, dataIn0ZoneId?: string, dataIn0ZoneRulesFixedOffset?: boolean, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataIn0ZoneRulesTransitions0DateTimeAfter?: string, dataIn0ZoneRulesTransitions0DateTimeBefore?: string, dataIn0ZoneRulesTransitions0DurationNano?: number, dataIn0ZoneRulesTransitions0DurationNegative?: boolean, dataIn0ZoneRulesTransitions0DurationSeconds?: number, dataIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataIn0ZoneRulesTransitions0DurationZero?: boolean, dataIn0ZoneRulesTransitions0Gap?: boolean, dataIn0ZoneRulesTransitions0Instant?: string, dataIn0ZoneRulesTransitions0OffsetAfterId?: string, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataIn0ZoneRulesTransitions0Overlap?: boolean, dataLessThan?: string, dataLessThanOrEqual?: string, dataNotEquals?: string, dataNotIn0DayOfMonth?: number, dataNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0DayOfYear?: number, dataNotIn0Hour?: number, dataNotIn0Minute?: number, dataNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0MonthValue?: number, dataNotIn0Nano?: number, dataNotIn0OffsetId?: string, dataNotIn0OffsetRulesFixedOffset?: boolean, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataNotIn0OffsetRulesTransitions0DurationNano?: number, dataNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataNotIn0OffsetRulesTransitions0Gap?: boolean, dataNotIn0OffsetRulesTransitions0Instant?: string, dataNotIn0OffsetRulesTransitions0Overlap?: boolean, dataNotIn0OffsetTotalSeconds?: number, dataNotIn0Second?: number, dataNotIn0Year?: number, dataNotIn0ZoneId?: string, dataNotIn0ZoneRulesFixedOffset?: boolean, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataNotIn0ZoneRulesTransitions0DurationNano?: number, dataNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataNotIn0ZoneRulesTransitions0Gap?: boolean, dataNotIn0ZoneRulesTransitions0Instant?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataNotIn0ZoneRulesTransitions0Overlap?: boolean, dataSpecified?: boolean, gestoreIdEquals?: number, gestoreIdGreaterThan?: number, gestoreIdGreaterThanOrEqual?: number, gestoreIdIn?: Array<number>, gestoreIdLessThan?: number, gestoreIdLessThanOrEqual?: number, gestoreIdNotEquals?: number, gestoreIdNotIn?: Array<number>, gestoreIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, litriErogatiEquals?: number, litriErogatiGreaterThan?: number, litriErogatiGreaterThanOrEqual?: number, litriErogatiIn?: Array<number>, litriErogatiLessThan?: number, litriErogatiLessThanOrEqual?: number, litriErogatiNotEquals?: number, litriErogatiNotIn?: Array<number>, litriErogatiSpecified?: boolean, page?: number, prezzoAlLitroEquals?: number, prezzoAlLitroGreaterThan?: number, prezzoAlLitroGreaterThanOrEqual?: number, prezzoAlLitroIn?: Array<number>, prezzoAlLitroLessThan?: number, prezzoAlLitroLessThanOrEqual?: number, prezzoAlLitroNotEquals?: number, prezzoAlLitroNotIn?: Array<number>, prezzoAlLitroSpecified?: boolean, scontoEquals?: number, scontoGreaterThan?: number, scontoGreaterThanOrEqual?: number, scontoIn?: Array<number>, scontoLessThan?: number, scontoLessThanOrEqual?: number, scontoNotEquals?: number, scontoNotIn?: Array<number>, scontoSpecified?: boolean, size?: number, sort?: Array<string>, tesseraIdEquals?: number, tesseraIdGreaterThan?: number, tesseraIdGreaterThanOrEqual?: number, tesseraIdIn?: Array<number>, tesseraIdLessThan?: number, tesseraIdLessThanOrEqual?: number, tesseraIdNotEquals?: number, tesseraIdNotIn?: Array<number>, tesseraIdSpecified?: boolean, tipoCarburanteEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteIn?: Array<string>, tipoCarburanteNotEquals?: 'BENZINA' | 'DIESEL', tipoCarburanteNotIn?: Array<string>, tipoCarburanteSpecified?: boolean, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).getAllRifornimentosUsingGET(dataEquals, dataGreaterThan, dataGreaterThanOrEqual, dataIn0DayOfMonth, dataIn0DayOfWeek, dataIn0DayOfYear, dataIn0Hour, dataIn0Minute, dataIn0Month, dataIn0MonthValue, dataIn0Nano, dataIn0OffsetId, dataIn0OffsetRulesFixedOffset, dataIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataIn0OffsetRulesTransitionRules0DayOfWeek, dataIn0OffsetRulesTransitionRules0LocalTimeHour, dataIn0OffsetRulesTransitionRules0LocalTimeMinute, dataIn0OffsetRulesTransitionRules0LocalTimeNano, dataIn0OffsetRulesTransitionRules0LocalTimeSecond, dataIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataIn0OffsetRulesTransitionRules0Month, dataIn0OffsetRulesTransitionRules0TimeDefinition, dataIn0OffsetRulesTransitions0DateTimeAfter, dataIn0OffsetRulesTransitions0DateTimeBefore, dataIn0OffsetRulesTransitions0DurationNano, dataIn0OffsetRulesTransitions0DurationNegative, dataIn0OffsetRulesTransitions0DurationSeconds, dataIn0OffsetRulesTransitions0DurationUnits0DateBased, dataIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataIn0OffsetRulesTransitions0DurationZero, dataIn0OffsetRulesTransitions0Gap, dataIn0OffsetRulesTransitions0Instant, dataIn0OffsetRulesTransitions0Overlap, dataIn0OffsetTotalSeconds, dataIn0Second, dataIn0Year, dataIn0ZoneId, dataIn0ZoneRulesFixedOffset, dataIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataIn0ZoneRulesTransitionRules0DayOfWeek, dataIn0ZoneRulesTransitionRules0LocalTimeHour, dataIn0ZoneRulesTransitionRules0LocalTimeMinute, dataIn0ZoneRulesTransitionRules0LocalTimeNano, dataIn0ZoneRulesTransitionRules0LocalTimeSecond, dataIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataIn0ZoneRulesTransitionRules0Month, dataIn0ZoneRulesTransitionRules0OffsetAfterId, dataIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitionRules0OffsetBeforeId, dataIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitionRules0StandardOffsetId, dataIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataIn0ZoneRulesTransitionRules0TimeDefinition, dataIn0ZoneRulesTransitions0DateTimeAfter, dataIn0ZoneRulesTransitions0DateTimeBefore, dataIn0ZoneRulesTransitions0DurationNano, dataIn0ZoneRulesTransitions0DurationNegative, dataIn0ZoneRulesTransitions0DurationSeconds, dataIn0ZoneRulesTransitions0DurationUnits0DateBased, dataIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataIn0ZoneRulesTransitions0DurationZero, dataIn0ZoneRulesTransitions0Gap, dataIn0ZoneRulesTransitions0Instant, dataIn0ZoneRulesTransitions0OffsetAfterId, dataIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataIn0ZoneRulesTransitions0OffsetBeforeId, dataIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataIn0ZoneRulesTransitions0Overlap, dataLessThan, dataLessThanOrEqual, dataNotEquals, dataNotIn0DayOfMonth, dataNotIn0DayOfWeek, dataNotIn0DayOfYear, dataNotIn0Hour, dataNotIn0Minute, dataNotIn0Month, dataNotIn0MonthValue, dataNotIn0Nano, dataNotIn0OffsetId, dataNotIn0OffsetRulesFixedOffset, dataNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataNotIn0OffsetRulesTransitionRules0DayOfWeek, dataNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataNotIn0OffsetRulesTransitionRules0Month, dataNotIn0OffsetRulesTransitionRules0TimeDefinition, dataNotIn0OffsetRulesTransitions0DateTimeAfter, dataNotIn0OffsetRulesTransitions0DateTimeBefore, dataNotIn0OffsetRulesTransitions0DurationNano, dataNotIn0OffsetRulesTransitions0DurationNegative, dataNotIn0OffsetRulesTransitions0DurationSeconds, dataNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataNotIn0OffsetRulesTransitions0DurationZero, dataNotIn0OffsetRulesTransitions0Gap, dataNotIn0OffsetRulesTransitions0Instant, dataNotIn0OffsetRulesTransitions0Overlap, dataNotIn0OffsetTotalSeconds, dataNotIn0Second, dataNotIn0Year, dataNotIn0ZoneId, dataNotIn0ZoneRulesFixedOffset, dataNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataNotIn0ZoneRulesTransitionRules0DayOfWeek, dataNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataNotIn0ZoneRulesTransitionRules0Month, dataNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataNotIn0ZoneRulesTransitionRules0TimeDefinition, dataNotIn0ZoneRulesTransitions0DateTimeAfter, dataNotIn0ZoneRulesTransitions0DateTimeBefore, dataNotIn0ZoneRulesTransitions0DurationNano, dataNotIn0ZoneRulesTransitions0DurationNegative, dataNotIn0ZoneRulesTransitions0DurationSeconds, dataNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataNotIn0ZoneRulesTransitions0DurationZero, dataNotIn0ZoneRulesTransitions0Gap, dataNotIn0ZoneRulesTransitions0Instant, dataNotIn0ZoneRulesTransitions0OffsetAfterId, dataNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataNotIn0ZoneRulesTransitions0OffsetBeforeId, dataNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataNotIn0ZoneRulesTransitions0Overlap, dataSpecified, gestoreIdEquals, gestoreIdGreaterThan, gestoreIdGreaterThanOrEqual, gestoreIdIn, gestoreIdLessThan, gestoreIdLessThanOrEqual, gestoreIdNotEquals, gestoreIdNotIn, gestoreIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, litriErogatiEquals, litriErogatiGreaterThan, litriErogatiGreaterThanOrEqual, litriErogatiIn, litriErogatiLessThan, litriErogatiLessThanOrEqual, litriErogatiNotEquals, litriErogatiNotIn, litriErogatiSpecified, page, prezzoAlLitroEquals, prezzoAlLitroGreaterThan, prezzoAlLitroGreaterThanOrEqual, prezzoAlLitroIn, prezzoAlLitroLessThan, prezzoAlLitroLessThanOrEqual, prezzoAlLitroNotEquals, prezzoAlLitroNotIn, prezzoAlLitroSpecified, scontoEquals, scontoGreaterThan, scontoGreaterThanOrEqual, scontoIn, scontoLessThan, scontoLessThanOrEqual, scontoNotEquals, scontoNotIn, scontoSpecified, size, sort, tesseraIdEquals, tesseraIdGreaterThan, tesseraIdGreaterThanOrEqual, tesseraIdIn, tesseraIdLessThan, tesseraIdLessThanOrEqual, tesseraIdNotEquals, tesseraIdNotIn, tesseraIdSpecified, tipoCarburanteEquals, tipoCarburanteIn, tipoCarburanteNotEquals, tipoCarburanteNotIn, tipoCarburanteSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getRifornimento
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public getRifornimentoUsingGET(id: number, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).getRifornimentoUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateRifornimento
   * @param {Rifornimento} [rifornimento]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public partialUpdateRifornimentoUsingPATCH(rifornimento?: Rifornimento, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).partialUpdateRifornimentoUsingPATCH(rifornimento, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateRifornimento
   * @param {Rifornimento} [rifornimento]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RifornimentoResourceApi
   */
  public updateRifornimentoUsingPUT(rifornimento?: Rifornimento, options?: any) {
    return RifornimentoResourceApiFp(this.configuration).updateRifornimentoUsingPUT(rifornimento, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * TesseraResourceApi - axios parameter creator
 * @export
 */
export const TesseraResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countTesserasUsingGET: async (carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/tesseras/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (carburanteEquals !== undefined) {
        localVarQueryParameter['carburante.equals'] = carburanteEquals;
      }

      if (carburanteIn) {
        localVarQueryParameter['carburante.in'] = carburanteIn.join(COLLECTION_FORMATS.pipes);
      }

      if (carburanteNotEquals !== undefined) {
        localVarQueryParameter['carburante.notEquals'] = carburanteNotEquals;
      }

      if (carburanteNotIn) {
        localVarQueryParameter['carburante.notIn'] = carburanteNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (carburanteSpecified !== undefined) {
        localVarQueryParameter['carburante.specified'] = carburanteSpecified;
      }

      if (cittadinoIdEquals !== undefined) {
        localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
      }

      if (cittadinoIdGreaterThan !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
      }

      if (cittadinoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
      }

      if (cittadinoIdIn) {
        localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdLessThan !== undefined) {
        localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
      }

      if (cittadinoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
      }

      if (cittadinoIdNotEquals !== undefined) {
        localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
      }

      if (cittadinoIdNotIn) {
        localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdSpecified !== undefined) {
        localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
      }

      if (codiceContains !== undefined) {
        localVarQueryParameter['codice.contains'] = codiceContains;
      }

      if (codiceDoesNotContain !== undefined) {
        localVarQueryParameter['codice.doesNotContain'] = codiceDoesNotContain;
      }

      if (codiceEquals !== undefined) {
        localVarQueryParameter['codice.equals'] = codiceEquals;
      }

      if (codiceIn) {
        localVarQueryParameter['codice.in'] = codiceIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceNotEquals !== undefined) {
        localVarQueryParameter['codice.notEquals'] = codiceNotEquals;
      }

      if (codiceNotIn) {
        localVarQueryParameter['codice.notIn'] = codiceNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceSpecified !== undefined) {
        localVarQueryParameter['codice.specified'] = codiceSpecified;
      }

      if (dataEmissioneEquals !== undefined) {
        localVarQueryParameter['dataEmissione.equals'] = (dataEmissioneEquals as any instanceof Date) ?
          (dataEmissioneEquals as any).toISOString() :
          dataEmissioneEquals;
      }

      if (dataEmissioneGreaterThan !== undefined) {
        localVarQueryParameter['dataEmissione.greaterThan'] = (dataEmissioneGreaterThan as any instanceof Date) ?
          (dataEmissioneGreaterThan as any).toISOString() :
          dataEmissioneGreaterThan;
      }

      if (dataEmissioneGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['dataEmissione.greaterThanOrEqual'] = (dataEmissioneGreaterThanOrEqual as any instanceof Date) ?
          (dataEmissioneGreaterThanOrEqual as any).toISOString() :
          dataEmissioneGreaterThanOrEqual;
      }

      if (dataEmissioneIn0DayOfMonth !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfMonth'] = dataEmissioneIn0DayOfMonth;
      }

      if (dataEmissioneIn0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfWeek'] = dataEmissioneIn0DayOfWeek;
      }

      if (dataEmissioneIn0DayOfYear !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfYear'] = dataEmissioneIn0DayOfYear;
      }

      if (dataEmissioneIn0Hour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].hour'] = dataEmissioneIn0Hour;
      }

      if (dataEmissioneIn0Minute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].minute'] = dataEmissioneIn0Minute;
      }

      if (dataEmissioneIn0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].month'] = dataEmissioneIn0Month;
      }

      if (dataEmissioneIn0MonthValue !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].monthValue'] = dataEmissioneIn0MonthValue;
      }

      if (dataEmissioneIn0Nano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].nano'] = dataEmissioneIn0Nano;
      }

      if (dataEmissioneIn0OffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.id'] = dataEmissioneIn0OffsetId;
      }

      if (dataEmissioneIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.fixedOffset'] = dataEmissioneIn0OffsetRulesFixedOffset;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].month'] = dataEmissioneIn0OffsetRulesTransitionRules0Month;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].gap'] = dataEmissioneIn0OffsetRulesTransitions0Gap;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].instant'] = (dataEmissioneIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0Instant;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].overlap'] = dataEmissioneIn0OffsetRulesTransitions0Overlap;
      }

      if (dataEmissioneIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.totalSeconds'] = dataEmissioneIn0OffsetTotalSeconds;
      }

      if (dataEmissioneIn0Second !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].second'] = dataEmissioneIn0Second;
      }

      if (dataEmissioneIn0Year !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].year'] = dataEmissioneIn0Year;
      }

      if (dataEmissioneIn0ZoneId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.id'] = dataEmissioneIn0ZoneId;
      }

      if (dataEmissioneIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.fixedOffset'] = dataEmissioneIn0ZoneRulesFixedOffset;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].month'] = dataEmissioneIn0ZoneRulesTransitionRules0Month;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].gap'] = dataEmissioneIn0ZoneRulesTransitions0Gap;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].instant'] = (dataEmissioneIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0Instant;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].overlap'] = dataEmissioneIn0ZoneRulesTransitions0Overlap;
      }

      if (dataEmissioneLessThan !== undefined) {
        localVarQueryParameter['dataEmissione.lessThan'] = (dataEmissioneLessThan as any instanceof Date) ?
          (dataEmissioneLessThan as any).toISOString() :
          dataEmissioneLessThan;
      }

      if (dataEmissioneLessThanOrEqual !== undefined) {
        localVarQueryParameter['dataEmissione.lessThanOrEqual'] = (dataEmissioneLessThanOrEqual as any instanceof Date) ?
          (dataEmissioneLessThanOrEqual as any).toISOString() :
          dataEmissioneLessThanOrEqual;
      }

      if (dataEmissioneNotEquals !== undefined) {
        localVarQueryParameter['dataEmissione.notEquals'] = (dataEmissioneNotEquals as any instanceof Date) ?
          (dataEmissioneNotEquals as any).toISOString() :
          dataEmissioneNotEquals;
      }

      if (dataEmissioneNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfMonth'] = dataEmissioneNotIn0DayOfMonth;
      }

      if (dataEmissioneNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfWeek'] = dataEmissioneNotIn0DayOfWeek;
      }

      if (dataEmissioneNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfYear'] = dataEmissioneNotIn0DayOfYear;
      }

      if (dataEmissioneNotIn0Hour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].hour'] = dataEmissioneNotIn0Hour;
      }

      if (dataEmissioneNotIn0Minute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].minute'] = dataEmissioneNotIn0Minute;
      }

      if (dataEmissioneNotIn0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].month'] = dataEmissioneNotIn0Month;
      }

      if (dataEmissioneNotIn0MonthValue !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].monthValue'] = dataEmissioneNotIn0MonthValue;
      }

      if (dataEmissioneNotIn0Nano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].nano'] = dataEmissioneNotIn0Nano;
      }

      if (dataEmissioneNotIn0OffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.id'] = dataEmissioneNotIn0OffsetId;
      }

      if (dataEmissioneNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.fixedOffset'] = dataEmissioneNotIn0OffsetRulesFixedOffset;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].month'] = dataEmissioneNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].gap'] = dataEmissioneNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].instant'] = (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].overlap'] = dataEmissioneNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataEmissioneNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.totalSeconds'] = dataEmissioneNotIn0OffsetTotalSeconds;
      }

      if (dataEmissioneNotIn0Second !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].second'] = dataEmissioneNotIn0Second;
      }

      if (dataEmissioneNotIn0Year !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].year'] = dataEmissioneNotIn0Year;
      }

      if (dataEmissioneNotIn0ZoneId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.id'] = dataEmissioneNotIn0ZoneId;
      }

      if (dataEmissioneNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.fixedOffset'] = dataEmissioneNotIn0ZoneRulesFixedOffset;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].month'] = dataEmissioneNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].gap'] = dataEmissioneNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].instant'] = (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].overlap'] = dataEmissioneNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataEmissioneSpecified !== undefined) {
        localVarQueryParameter['dataEmissione.specified'] = dataEmissioneSpecified;
      }

      if (delegaIdEquals !== undefined) {
        localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
      }

      if (delegaIdGreaterThan !== undefined) {
        localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
      }

      if (delegaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
      }

      if (delegaIdIn) {
        localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdLessThan !== undefined) {
        localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
      }

      if (delegaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
      }

      if (delegaIdNotEquals !== undefined) {
        localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
      }

      if (delegaIdNotIn) {
        localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdSpecified !== undefined) {
        localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (rifornimentoIdEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
      }

      if (rifornimentoIdGreaterThan !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
      }

      if (rifornimentoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
      }

      if (rifornimentoIdIn) {
        localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdLessThan !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
      }

      if (rifornimentoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
      }

      if (rifornimentoIdNotEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
      }

      if (rifornimentoIdNotIn) {
        localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdSpecified !== undefined) {
        localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
      }

      if (targaContains !== undefined) {
        localVarQueryParameter['targa.contains'] = targaContains;
      }

      if (targaDoesNotContain !== undefined) {
        localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
      }

      if (targaEquals !== undefined) {
        localVarQueryParameter['targa.equals'] = targaEquals;
      }

      if (targaIn) {
        localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaNotEquals !== undefined) {
        localVarQueryParameter['targa.notEquals'] = targaNotEquals;
      }

      if (targaNotIn) {
        localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaSpecified !== undefined) {
        localVarQueryParameter['targa.specified'] = targaSpecified;
      }

      if (veicoloEquals !== undefined) {
        localVarQueryParameter['veicolo.equals'] = veicoloEquals;
      }

      if (veicoloIn) {
        localVarQueryParameter['veicolo.in'] = veicoloIn.join(COLLECTION_FORMATS.pipes);
      }

      if (veicoloNotEquals !== undefined) {
        localVarQueryParameter['veicolo.notEquals'] = veicoloNotEquals;
      }

      if (veicoloNotIn) {
        localVarQueryParameter['veicolo.notIn'] = veicoloNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (veicoloSpecified !== undefined) {
        localVarQueryParameter['veicolo.specified'] = veicoloSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary createTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTesseraUsingPOST: async (tessera?: Tessera, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/tesseras`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof tessera !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tessera !== undefined ? tessera : {})
        : (tessera || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTesseraUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteTesseraUsingDELETE.');
      }
      const localVarPath = `/api/tesseras/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTesserasUsingGET: async (carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/tesseras`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (carburanteEquals !== undefined) {
        localVarQueryParameter['carburante.equals'] = carburanteEquals;
      }

      if (carburanteIn) {
        localVarQueryParameter['carburante.in'] = carburanteIn.join(COLLECTION_FORMATS.pipes);
      }

      if (carburanteNotEquals !== undefined) {
        localVarQueryParameter['carburante.notEquals'] = carburanteNotEquals;
      }

      if (carburanteNotIn) {
        localVarQueryParameter['carburante.notIn'] = carburanteNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (carburanteSpecified !== undefined) {
        localVarQueryParameter['carburante.specified'] = carburanteSpecified;
      }

      if (cittadinoIdEquals !== undefined) {
        localVarQueryParameter['cittadinoId.equals'] = cittadinoIdEquals;
      }

      if (cittadinoIdGreaterThan !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThan'] = cittadinoIdGreaterThan;
      }

      if (cittadinoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.greaterThanOrEqual'] = cittadinoIdGreaterThanOrEqual;
      }

      if (cittadinoIdIn) {
        localVarQueryParameter['cittadinoId.in'] = cittadinoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdLessThan !== undefined) {
        localVarQueryParameter['cittadinoId.lessThan'] = cittadinoIdLessThan;
      }

      if (cittadinoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['cittadinoId.lessThanOrEqual'] = cittadinoIdLessThanOrEqual;
      }

      if (cittadinoIdNotEquals !== undefined) {
        localVarQueryParameter['cittadinoId.notEquals'] = cittadinoIdNotEquals;
      }

      if (cittadinoIdNotIn) {
        localVarQueryParameter['cittadinoId.notIn'] = cittadinoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (cittadinoIdSpecified !== undefined) {
        localVarQueryParameter['cittadinoId.specified'] = cittadinoIdSpecified;
      }

      if (codiceContains !== undefined) {
        localVarQueryParameter['codice.contains'] = codiceContains;
      }

      if (codiceDoesNotContain !== undefined) {
        localVarQueryParameter['codice.doesNotContain'] = codiceDoesNotContain;
      }

      if (codiceEquals !== undefined) {
        localVarQueryParameter['codice.equals'] = codiceEquals;
      }

      if (codiceIn) {
        localVarQueryParameter['codice.in'] = codiceIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceNotEquals !== undefined) {
        localVarQueryParameter['codice.notEquals'] = codiceNotEquals;
      }

      if (codiceNotIn) {
        localVarQueryParameter['codice.notIn'] = codiceNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (codiceSpecified !== undefined) {
        localVarQueryParameter['codice.specified'] = codiceSpecified;
      }

      if (dataEmissioneEquals !== undefined) {
        localVarQueryParameter['dataEmissione.equals'] = (dataEmissioneEquals as any instanceof Date) ?
          (dataEmissioneEquals as any).toISOString() :
          dataEmissioneEquals;
      }

      if (dataEmissioneGreaterThan !== undefined) {
        localVarQueryParameter['dataEmissione.greaterThan'] = (dataEmissioneGreaterThan as any instanceof Date) ?
          (dataEmissioneGreaterThan as any).toISOString() :
          dataEmissioneGreaterThan;
      }

      if (dataEmissioneGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['dataEmissione.greaterThanOrEqual'] = (dataEmissioneGreaterThanOrEqual as any instanceof Date) ?
          (dataEmissioneGreaterThanOrEqual as any).toISOString() :
          dataEmissioneGreaterThanOrEqual;
      }

      if (dataEmissioneIn0DayOfMonth !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfMonth'] = dataEmissioneIn0DayOfMonth;
      }

      if (dataEmissioneIn0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfWeek'] = dataEmissioneIn0DayOfWeek;
      }

      if (dataEmissioneIn0DayOfYear !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].dayOfYear'] = dataEmissioneIn0DayOfYear;
      }

      if (dataEmissioneIn0Hour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].hour'] = dataEmissioneIn0Hour;
      }

      if (dataEmissioneIn0Minute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].minute'] = dataEmissioneIn0Minute;
      }

      if (dataEmissioneIn0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].month'] = dataEmissioneIn0Month;
      }

      if (dataEmissioneIn0MonthValue !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].monthValue'] = dataEmissioneIn0MonthValue;
      }

      if (dataEmissioneIn0Nano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].nano'] = dataEmissioneIn0Nano;
      }

      if (dataEmissioneIn0OffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.id'] = dataEmissioneIn0OffsetId;
      }

      if (dataEmissioneIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.fixedOffset'] = dataEmissioneIn0OffsetRulesFixedOffset;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].month'] = dataEmissioneIn0OffsetRulesTransitionRules0Month;
      }

      if (dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].gap'] = dataEmissioneIn0OffsetRulesTransitions0Gap;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].instant'] = (dataEmissioneIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataEmissioneIn0OffsetRulesTransitions0Instant;
      }

      if (dataEmissioneIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.rules.transitions[0].overlap'] = dataEmissioneIn0OffsetRulesTransitions0Overlap;
      }

      if (dataEmissioneIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].offset.totalSeconds'] = dataEmissioneIn0OffsetTotalSeconds;
      }

      if (dataEmissioneIn0Second !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].second'] = dataEmissioneIn0Second;
      }

      if (dataEmissioneIn0Year !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].year'] = dataEmissioneIn0Year;
      }

      if (dataEmissioneIn0ZoneId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.id'] = dataEmissioneIn0ZoneId;
      }

      if (dataEmissioneIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.fixedOffset'] = dataEmissioneIn0ZoneRulesFixedOffset;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].month'] = dataEmissioneIn0ZoneRulesTransitionRules0Month;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].gap'] = dataEmissioneIn0ZoneRulesTransitions0Gap;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].instant'] = (dataEmissioneIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataEmissioneIn0ZoneRulesTransitions0Instant;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.in[0].zone.rules.transitions[0].overlap'] = dataEmissioneIn0ZoneRulesTransitions0Overlap;
      }

      if (dataEmissioneLessThan !== undefined) {
        localVarQueryParameter['dataEmissione.lessThan'] = (dataEmissioneLessThan as any instanceof Date) ?
          (dataEmissioneLessThan as any).toISOString() :
          dataEmissioneLessThan;
      }

      if (dataEmissioneLessThanOrEqual !== undefined) {
        localVarQueryParameter['dataEmissione.lessThanOrEqual'] = (dataEmissioneLessThanOrEqual as any instanceof Date) ?
          (dataEmissioneLessThanOrEqual as any).toISOString() :
          dataEmissioneLessThanOrEqual;
      }

      if (dataEmissioneNotEquals !== undefined) {
        localVarQueryParameter['dataEmissione.notEquals'] = (dataEmissioneNotEquals as any instanceof Date) ?
          (dataEmissioneNotEquals as any).toISOString() :
          dataEmissioneNotEquals;
      }

      if (dataEmissioneNotIn0DayOfMonth !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfMonth'] = dataEmissioneNotIn0DayOfMonth;
      }

      if (dataEmissioneNotIn0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfWeek'] = dataEmissioneNotIn0DayOfWeek;
      }

      if (dataEmissioneNotIn0DayOfYear !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].dayOfYear'] = dataEmissioneNotIn0DayOfYear;
      }

      if (dataEmissioneNotIn0Hour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].hour'] = dataEmissioneNotIn0Hour;
      }

      if (dataEmissioneNotIn0Minute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].minute'] = dataEmissioneNotIn0Minute;
      }

      if (dataEmissioneNotIn0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].month'] = dataEmissioneNotIn0Month;
      }

      if (dataEmissioneNotIn0MonthValue !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].monthValue'] = dataEmissioneNotIn0MonthValue;
      }

      if (dataEmissioneNotIn0Nano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].nano'] = dataEmissioneNotIn0Nano;
      }

      if (dataEmissioneNotIn0OffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.id'] = dataEmissioneNotIn0OffsetId;
      }

      if (dataEmissioneNotIn0OffsetRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.fixedOffset'] = dataEmissioneNotIn0OffsetRulesFixedOffset;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].month'] = dataEmissioneNotIn0OffsetRulesTransitionRules0Month;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNano;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0OffsetRulesTransitions0DurationZero;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].gap'] = dataEmissioneNotIn0OffsetRulesTransitions0Gap;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].instant'] = (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneNotIn0OffsetRulesTransitions0Instant as any).toISOString() :
          dataEmissioneNotIn0OffsetRulesTransitions0Instant;
      }

      if (dataEmissioneNotIn0OffsetRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.rules.transitions[0].overlap'] = dataEmissioneNotIn0OffsetRulesTransitions0Overlap;
      }

      if (dataEmissioneNotIn0OffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].offset.totalSeconds'] = dataEmissioneNotIn0OffsetTotalSeconds;
      }

      if (dataEmissioneNotIn0Second !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].second'] = dataEmissioneNotIn0Second;
      }

      if (dataEmissioneNotIn0Year !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].year'] = dataEmissioneNotIn0Year;
      }

      if (dataEmissioneNotIn0ZoneId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.id'] = dataEmissioneNotIn0ZoneId;
      }

      if (dataEmissioneNotIn0ZoneRulesFixedOffset !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.fixedOffset'] = dataEmissioneNotIn0ZoneRulesFixedOffset;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfMonthIndicator'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].dayOfWeek'] = dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.hour'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.minute'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.nano'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].localTime.second'] = dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].midnightEndOfDay'] = dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0Month !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].month'] = dataEmissioneNotIn0ZoneRulesTransitionRules0Month;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.id'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].standardOffset.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitionRules[0].timeDefinition'] = dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeAfter'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].dateTimeBefore'] = (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNano !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.nano'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNano;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.negative'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.seconds'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].dateBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].durationEstimated'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.units[0].timeBased'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0DurationZero !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].duration.zero'] = dataEmissioneNotIn0ZoneRulesTransitions0DurationZero;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Gap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].gap'] = dataEmissioneNotIn0ZoneRulesTransitions0Gap;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Instant !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].instant'] = (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any instanceof Date) ?
          (dataEmissioneNotIn0ZoneRulesTransitions0Instant as any).toISOString() :
          dataEmissioneNotIn0ZoneRulesTransitions0Instant;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetAfter.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.id'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].offsetBefore.totalSeconds'] = dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds;
      }

      if (dataEmissioneNotIn0ZoneRulesTransitions0Overlap !== undefined) {
        localVarQueryParameter['dataEmissione.notIn[0].zone.rules.transitions[0].overlap'] = dataEmissioneNotIn0ZoneRulesTransitions0Overlap;
      }

      if (dataEmissioneSpecified !== undefined) {
        localVarQueryParameter['dataEmissione.specified'] = dataEmissioneSpecified;
      }

      if (delegaIdEquals !== undefined) {
        localVarQueryParameter['delegaId.equals'] = delegaIdEquals;
      }

      if (delegaIdGreaterThan !== undefined) {
        localVarQueryParameter['delegaId.greaterThan'] = delegaIdGreaterThan;
      }

      if (delegaIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.greaterThanOrEqual'] = delegaIdGreaterThanOrEqual;
      }

      if (delegaIdIn) {
        localVarQueryParameter['delegaId.in'] = delegaIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdLessThan !== undefined) {
        localVarQueryParameter['delegaId.lessThan'] = delegaIdLessThan;
      }

      if (delegaIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['delegaId.lessThanOrEqual'] = delegaIdLessThanOrEqual;
      }

      if (delegaIdNotEquals !== undefined) {
        localVarQueryParameter['delegaId.notEquals'] = delegaIdNotEquals;
      }

      if (delegaIdNotIn) {
        localVarQueryParameter['delegaId.notIn'] = delegaIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (delegaIdSpecified !== undefined) {
        localVarQueryParameter['delegaId.specified'] = delegaIdSpecified;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter['id.equals'] = idEquals;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter['id.greaterThan'] = idGreaterThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['id.greaterThanOrEqual'] = idGreaterThanOrEqual;
      }

      if (idIn) {
        localVarQueryParameter['id.in'] = idIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter['id.lessThan'] = idLessThan;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter['id.lessThanOrEqual'] = idLessThanOrEqual;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter['id.notEquals'] = idNotEquals;
      }

      if (idNotIn) {
        localVarQueryParameter['id.notIn'] = idNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter['id.specified'] = idSpecified;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (rifornimentoIdEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.equals'] = rifornimentoIdEquals;
      }

      if (rifornimentoIdGreaterThan !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThan'] = rifornimentoIdGreaterThan;
      }

      if (rifornimentoIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.greaterThanOrEqual'] = rifornimentoIdGreaterThanOrEqual;
      }

      if (rifornimentoIdIn) {
        localVarQueryParameter['rifornimentoId.in'] = rifornimentoIdIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdLessThan !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThan'] = rifornimentoIdLessThan;
      }

      if (rifornimentoIdLessThanOrEqual !== undefined) {
        localVarQueryParameter['rifornimentoId.lessThanOrEqual'] = rifornimentoIdLessThanOrEqual;
      }

      if (rifornimentoIdNotEquals !== undefined) {
        localVarQueryParameter['rifornimentoId.notEquals'] = rifornimentoIdNotEquals;
      }

      if (rifornimentoIdNotIn) {
        localVarQueryParameter['rifornimentoId.notIn'] = rifornimentoIdNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (rifornimentoIdSpecified !== undefined) {
        localVarQueryParameter['rifornimentoId.specified'] = rifornimentoIdSpecified;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (targaContains !== undefined) {
        localVarQueryParameter['targa.contains'] = targaContains;
      }

      if (targaDoesNotContain !== undefined) {
        localVarQueryParameter['targa.doesNotContain'] = targaDoesNotContain;
      }

      if (targaEquals !== undefined) {
        localVarQueryParameter['targa.equals'] = targaEquals;
      }

      if (targaIn) {
        localVarQueryParameter['targa.in'] = targaIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaNotEquals !== undefined) {
        localVarQueryParameter['targa.notEquals'] = targaNotEquals;
      }

      if (targaNotIn) {
        localVarQueryParameter['targa.notIn'] = targaNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (targaSpecified !== undefined) {
        localVarQueryParameter['targa.specified'] = targaSpecified;
      }

      if (veicoloEquals !== undefined) {
        localVarQueryParameter['veicolo.equals'] = veicoloEquals;
      }

      if (veicoloIn) {
        localVarQueryParameter['veicolo.in'] = veicoloIn.join(COLLECTION_FORMATS.pipes);
      }

      if (veicoloNotEquals !== undefined) {
        localVarQueryParameter['veicolo.notEquals'] = veicoloNotEquals;
      }

      if (veicoloNotIn) {
        localVarQueryParameter['veicolo.notIn'] = veicoloNotIn.join(COLLECTION_FORMATS.pipes);
      }

      if (veicoloSpecified !== undefined) {
        localVarQueryParameter['veicolo.specified'] = veicoloSpecified;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTesseraUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getTesseraUsingGET.');
      }
      const localVarPath = `/api/tesseras/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary partialUpdateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateTesseraUsingPATCH: async (tessera?: Tessera, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/tesseras`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof tessera !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tessera !== undefined ? tessera : {})
        : (tessera || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTesseraUsingPUT: async (tessera?: Tessera, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/tesseras`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof tessera !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tessera !== undefined ? tessera : {})
        : (tessera || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * TesseraResourceApi - functional programming interface
 * @export
 */
export const TesseraResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary countTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary createTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTesseraUsingPOST(tessera?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).createTesseraUsingPOST(tessera, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTesseraUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).deleteTesseraUsingDELETE(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tessera>>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTesseraUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).getTesseraUsingGET(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary partialUpdateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateTesseraUsingPATCH(tessera?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).partialUpdateTesseraUsingPATCH(tessera, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTesseraUsingPUT(tessera?: Tessera, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tessera>> {
      const localVarAxiosArgs = await TesseraResourceApiAxiosParamCreator(configuration).updateTesseraUsingPUT(tessera, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * TesseraResourceApi - factory interface
 * @export
 */
export const TesseraResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary countTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): AxiosPromise<number> {
      return TesseraResourceApiFp(configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary createTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTesseraUsingPOST(tessera?: Tessera, options?: any): AxiosPromise<Tessera> {
      return TesseraResourceApiFp(configuration).createTesseraUsingPOST(tessera, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTesseraUsingDELETE(id: number, options?: any): AxiosPromise<void> {
      return TesseraResourceApiFp(configuration).deleteTesseraUsingDELETE(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllTesseras
     * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
     * @param {Array<string>} [carburanteIn]
     * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
     * @param {Array<string>} [carburanteNotIn]
     * @param {boolean} [carburanteSpecified]
     * @param {number} [cittadinoIdEquals]
     * @param {number} [cittadinoIdGreaterThan]
     * @param {number} [cittadinoIdGreaterThanOrEqual]
     * @param {Array<number>} [cittadinoIdIn]
     * @param {number} [cittadinoIdLessThan]
     * @param {number} [cittadinoIdLessThanOrEqual]
     * @param {number} [cittadinoIdNotEquals]
     * @param {Array<number>} [cittadinoIdNotIn]
     * @param {boolean} [cittadinoIdSpecified]
     * @param {string} [codiceContains]
     * @param {string} [codiceDoesNotContain]
     * @param {string} [codiceEquals]
     * @param {Array<string>} [codiceIn]
     * @param {string} [codiceNotEquals]
     * @param {Array<string>} [codiceNotIn]
     * @param {boolean} [codiceSpecified]
     * @param {string} [dataEmissioneEquals]
     * @param {string} [dataEmissioneGreaterThan]
     * @param {string} [dataEmissioneGreaterThanOrEqual]
     * @param {number} [dataEmissioneIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
     * @param {number} [dataEmissioneIn0DayOfYear]
     * @param {number} [dataEmissioneIn0Hour]
     * @param {number} [dataEmissioneIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
     * @param {number} [dataEmissioneIn0MonthValue]
     * @param {number} [dataEmissioneIn0Nano]
     * @param {string} [dataEmissioneIn0OffsetId]
     * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneIn0Second]
     * @param {number} [dataEmissioneIn0Year]
     * @param {string} [dataEmissioneIn0ZoneId]
     * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
     * @param {string} [dataEmissioneLessThan]
     * @param {string} [dataEmissioneLessThanOrEqual]
     * @param {string} [dataEmissioneNotEquals]
     * @param {number} [dataEmissioneNotIn0DayOfMonth]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0DayOfYear]
     * @param {number} [dataEmissioneNotIn0Hour]
     * @param {number} [dataEmissioneNotIn0Minute]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
     * @param {number} [dataEmissioneNotIn0MonthValue]
     * @param {number} [dataEmissioneNotIn0Nano]
     * @param {string} [dataEmissioneNotIn0OffsetId]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
     * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
     * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
     * @param {number} [dataEmissioneNotIn0Second]
     * @param {number} [dataEmissioneNotIn0Year]
     * @param {string} [dataEmissioneNotIn0ZoneId]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
     * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
     * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
     * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
     * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
     * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
     * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
     * @param {boolean} [dataEmissioneSpecified]
     * @param {number} [delegaIdEquals]
     * @param {number} [delegaIdGreaterThan]
     * @param {number} [delegaIdGreaterThanOrEqual]
     * @param {Array<number>} [delegaIdIn]
     * @param {number} [delegaIdLessThan]
     * @param {number} [delegaIdLessThanOrEqual]
     * @param {number} [delegaIdNotEquals]
     * @param {Array<number>} [delegaIdNotIn]
     * @param {boolean} [delegaIdSpecified]
     * @param {number} [idEquals]
     * @param {number} [idGreaterThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {Array<number>} [idIn]
     * @param {number} [idLessThan]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idNotEquals]
     * @param {Array<number>} [idNotIn]
     * @param {boolean} [idSpecified]
     * @param {number} [page] Page number of the requested page
     * @param {number} [rifornimentoIdEquals]
     * @param {number} [rifornimentoIdGreaterThan]
     * @param {number} [rifornimentoIdGreaterThanOrEqual]
     * @param {Array<number>} [rifornimentoIdIn]
     * @param {number} [rifornimentoIdLessThan]
     * @param {number} [rifornimentoIdLessThanOrEqual]
     * @param {number} [rifornimentoIdNotEquals]
     * @param {Array<number>} [rifornimentoIdNotIn]
     * @param {boolean} [rifornimentoIdSpecified]
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [targaContains]
     * @param {string} [targaDoesNotContain]
     * @param {string} [targaEquals]
     * @param {Array<string>} [targaIn]
     * @param {string} [targaNotEquals]
     * @param {Array<string>} [targaNotIn]
     * @param {boolean} [targaSpecified]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
     * @param {Array<string>} [veicoloIn]
     * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
     * @param {Array<string>} [veicoloNotIn]
     * @param {boolean} [veicoloSpecified]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any): AxiosPromise<Array<Tessera>> {
      return TesseraResourceApiFp(configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getTessera
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTesseraUsingGET(id: number, options?: any): AxiosPromise<Tessera> {
      return TesseraResourceApiFp(configuration).getTesseraUsingGET(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary partialUpdateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateTesseraUsingPATCH(tessera?: Tessera, options?: any): AxiosPromise<Tessera> {
      return TesseraResourceApiFp(configuration).partialUpdateTesseraUsingPATCH(tessera, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateTessera
     * @param {Tessera} [tessera]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTesseraUsingPUT(tessera?: Tessera, options?: any): AxiosPromise<Tessera> {
      return TesseraResourceApiFp(configuration).updateTesseraUsingPUT(tessera, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TesseraResourceApi - object-oriented interface
 * @export
 * @class TesseraResourceApi
 * @extends {BaseAPI}
 */
export class TesseraResourceApi extends BaseAPI {
  /**
   *
   * @summary countTesseras
   * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
   * @param {Array<string>} [carburanteIn]
   * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
   * @param {Array<string>} [carburanteNotIn]
   * @param {boolean} [carburanteSpecified]
   * @param {number} [cittadinoIdEquals]
   * @param {number} [cittadinoIdGreaterThan]
   * @param {number} [cittadinoIdGreaterThanOrEqual]
   * @param {Array<number>} [cittadinoIdIn]
   * @param {number} [cittadinoIdLessThan]
   * @param {number} [cittadinoIdLessThanOrEqual]
   * @param {number} [cittadinoIdNotEquals]
   * @param {Array<number>} [cittadinoIdNotIn]
   * @param {boolean} [cittadinoIdSpecified]
   * @param {string} [codiceContains]
   * @param {string} [codiceDoesNotContain]
   * @param {string} [codiceEquals]
   * @param {Array<string>} [codiceIn]
   * @param {string} [codiceNotEquals]
   * @param {Array<string>} [codiceNotIn]
   * @param {boolean} [codiceSpecified]
   * @param {string} [dataEmissioneEquals]
   * @param {string} [dataEmissioneGreaterThan]
   * @param {string} [dataEmissioneGreaterThanOrEqual]
   * @param {number} [dataEmissioneIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
   * @param {number} [dataEmissioneIn0DayOfYear]
   * @param {number} [dataEmissioneIn0Hour]
   * @param {number} [dataEmissioneIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
   * @param {number} [dataEmissioneIn0MonthValue]
   * @param {number} [dataEmissioneIn0Nano]
   * @param {string} [dataEmissioneIn0OffsetId]
   * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
   * @param {number} [dataEmissioneIn0Second]
   * @param {number} [dataEmissioneIn0Year]
   * @param {string} [dataEmissioneIn0ZoneId]
   * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataEmissioneLessThan]
   * @param {string} [dataEmissioneLessThanOrEqual]
   * @param {string} [dataEmissioneNotEquals]
   * @param {number} [dataEmissioneNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0DayOfYear]
   * @param {number} [dataEmissioneNotIn0Hour]
   * @param {number} [dataEmissioneNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
   * @param {number} [dataEmissioneNotIn0MonthValue]
   * @param {number} [dataEmissioneNotIn0Nano]
   * @param {string} [dataEmissioneNotIn0OffsetId]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
   * @param {number} [dataEmissioneNotIn0Second]
   * @param {number} [dataEmissioneNotIn0Year]
   * @param {string} [dataEmissioneNotIn0ZoneId]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataEmissioneSpecified]
   * @param {number} [delegaIdEquals]
   * @param {number} [delegaIdGreaterThan]
   * @param {number} [delegaIdGreaterThanOrEqual]
   * @param {Array<number>} [delegaIdIn]
   * @param {number} [delegaIdLessThan]
   * @param {number} [delegaIdLessThanOrEqual]
   * @param {number} [delegaIdNotEquals]
   * @param {Array<number>} [delegaIdNotIn]
   * @param {boolean} [delegaIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [rifornimentoIdEquals]
   * @param {number} [rifornimentoIdGreaterThan]
   * @param {number} [rifornimentoIdGreaterThanOrEqual]
   * @param {Array<number>} [rifornimentoIdIn]
   * @param {number} [rifornimentoIdLessThan]
   * @param {number} [rifornimentoIdLessThanOrEqual]
   * @param {number} [rifornimentoIdNotEquals]
   * @param {Array<number>} [rifornimentoIdNotIn]
   * @param {boolean} [rifornimentoIdSpecified]
   * @param {string} [targaContains]
   * @param {string} [targaDoesNotContain]
   * @param {string} [targaEquals]
   * @param {Array<string>} [targaIn]
   * @param {string} [targaNotEquals]
   * @param {Array<string>} [targaNotIn]
   * @param {boolean} [targaSpecified]
   * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
   * @param {Array<string>} [veicoloIn]
   * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
   * @param {Array<string>} [veicoloNotIn]
   * @param {boolean} [veicoloSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public countTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any) {
    return TesseraResourceApiFp(this.configuration).countTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary createTessera
   * @param {Tessera} [tessera]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public createTesseraUsingPOST(tessera?: Tessera, options?: any) {
    return TesseraResourceApiFp(this.configuration).createTesseraUsingPOST(tessera, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteTessera
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public deleteTesseraUsingDELETE(id: number, options?: any) {
    return TesseraResourceApiFp(this.configuration).deleteTesseraUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllTesseras
   * @param {'BENZINA' | 'DIESEL'} [carburanteEquals]
   * @param {Array<string>} [carburanteIn]
   * @param {'BENZINA' | 'DIESEL'} [carburanteNotEquals]
   * @param {Array<string>} [carburanteNotIn]
   * @param {boolean} [carburanteSpecified]
   * @param {number} [cittadinoIdEquals]
   * @param {number} [cittadinoIdGreaterThan]
   * @param {number} [cittadinoIdGreaterThanOrEqual]
   * @param {Array<number>} [cittadinoIdIn]
   * @param {number} [cittadinoIdLessThan]
   * @param {number} [cittadinoIdLessThanOrEqual]
   * @param {number} [cittadinoIdNotEquals]
   * @param {Array<number>} [cittadinoIdNotIn]
   * @param {boolean} [cittadinoIdSpecified]
   * @param {string} [codiceContains]
   * @param {string} [codiceDoesNotContain]
   * @param {string} [codiceEquals]
   * @param {Array<string>} [codiceIn]
   * @param {string} [codiceNotEquals]
   * @param {Array<string>} [codiceNotIn]
   * @param {boolean} [codiceSpecified]
   * @param {string} [dataEmissioneEquals]
   * @param {string} [dataEmissioneGreaterThan]
   * @param {string} [dataEmissioneGreaterThanOrEqual]
   * @param {number} [dataEmissioneIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0DayOfWeek]
   * @param {number} [dataEmissioneIn0DayOfYear]
   * @param {number} [dataEmissioneIn0Hour]
   * @param {number} [dataEmissioneIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0Month]
   * @param {number} [dataEmissioneIn0MonthValue]
   * @param {number} [dataEmissioneIn0Nano]
   * @param {string} [dataEmissioneIn0OffsetId]
   * @param {boolean} [dataEmissioneIn0OffsetRulesFixedOffset]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataEmissioneIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataEmissioneIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataEmissioneIn0OffsetTotalSeconds]
   * @param {number} [dataEmissioneIn0Second]
   * @param {number} [dataEmissioneIn0Year]
   * @param {string} [dataEmissioneIn0ZoneId]
   * @param {boolean} [dataEmissioneIn0ZoneRulesFixedOffset]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataEmissioneIn0ZoneRulesTransitions0Overlap]
   * @param {string} [dataEmissioneLessThan]
   * @param {string} [dataEmissioneLessThanOrEqual]
   * @param {string} [dataEmissioneNotEquals]
   * @param {number} [dataEmissioneNotIn0DayOfMonth]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0DayOfYear]
   * @param {number} [dataEmissioneNotIn0Hour]
   * @param {number} [dataEmissioneNotIn0Minute]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0Month]
   * @param {number} [dataEmissioneNotIn0MonthValue]
   * @param {number} [dataEmissioneNotIn0Nano]
   * @param {string} [dataEmissioneNotIn0OffsetId]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesFixedOffset]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0OffsetRulesTransitionRules0Month]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Gap]
   * @param {string} [dataEmissioneNotIn0OffsetRulesTransitions0Instant]
   * @param {boolean} [dataEmissioneNotIn0OffsetRulesTransitions0Overlap]
   * @param {number} [dataEmissioneNotIn0OffsetTotalSeconds]
   * @param {number} [dataEmissioneNotIn0Second]
   * @param {number} [dataEmissioneNotIn0Year]
   * @param {string} [dataEmissioneNotIn0ZoneId]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesFixedOffset]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator]
   * @param {'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY'} [dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay]
   * @param {'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER'} [dataEmissioneNotIn0ZoneRulesTransitionRules0Month]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds]
   * @param {'STANDARD' | 'UTC' | 'WALL'} [dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNano]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0DurationZero]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Gap]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0Instant]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds]
   * @param {string} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId]
   * @param {number} [dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds]
   * @param {boolean} [dataEmissioneNotIn0ZoneRulesTransitions0Overlap]
   * @param {boolean} [dataEmissioneSpecified]
   * @param {number} [delegaIdEquals]
   * @param {number} [delegaIdGreaterThan]
   * @param {number} [delegaIdGreaterThanOrEqual]
   * @param {Array<number>} [delegaIdIn]
   * @param {number} [delegaIdLessThan]
   * @param {number} [delegaIdLessThanOrEqual]
   * @param {number} [delegaIdNotEquals]
   * @param {Array<number>} [delegaIdNotIn]
   * @param {boolean} [delegaIdSpecified]
   * @param {number} [idEquals]
   * @param {number} [idGreaterThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {Array<number>} [idIn]
   * @param {number} [idLessThan]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idNotEquals]
   * @param {Array<number>} [idNotIn]
   * @param {boolean} [idSpecified]
   * @param {number} [page] Page number of the requested page
   * @param {number} [rifornimentoIdEquals]
   * @param {number} [rifornimentoIdGreaterThan]
   * @param {number} [rifornimentoIdGreaterThanOrEqual]
   * @param {Array<number>} [rifornimentoIdIn]
   * @param {number} [rifornimentoIdLessThan]
   * @param {number} [rifornimentoIdLessThanOrEqual]
   * @param {number} [rifornimentoIdNotEquals]
   * @param {Array<number>} [rifornimentoIdNotIn]
   * @param {boolean} [rifornimentoIdSpecified]
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {string} [targaContains]
   * @param {string} [targaDoesNotContain]
   * @param {string} [targaEquals]
   * @param {Array<string>} [targaIn]
   * @param {string} [targaNotEquals]
   * @param {Array<string>} [targaNotIn]
   * @param {boolean} [targaSpecified]
   * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloEquals]
   * @param {Array<string>} [veicoloIn]
   * @param {'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO'} [veicoloNotEquals]
   * @param {Array<string>} [veicoloNotIn]
   * @param {boolean} [veicoloSpecified]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public getAllTesserasUsingGET(carburanteEquals?: 'BENZINA' | 'DIESEL', carburanteIn?: Array<string>, carburanteNotEquals?: 'BENZINA' | 'DIESEL', carburanteNotIn?: Array<string>, carburanteSpecified?: boolean, cittadinoIdEquals?: number, cittadinoIdGreaterThan?: number, cittadinoIdGreaterThanOrEqual?: number, cittadinoIdIn?: Array<number>, cittadinoIdLessThan?: number, cittadinoIdLessThanOrEqual?: number, cittadinoIdNotEquals?: number, cittadinoIdNotIn?: Array<number>, cittadinoIdSpecified?: boolean, codiceContains?: string, codiceDoesNotContain?: string, codiceEquals?: string, codiceIn?: Array<string>, codiceNotEquals?: string, codiceNotIn?: Array<string>, codiceSpecified?: boolean, dataEmissioneEquals?: string, dataEmissioneGreaterThan?: string, dataEmissioneGreaterThanOrEqual?: string, dataEmissioneIn0DayOfMonth?: number, dataEmissioneIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0DayOfYear?: number, dataEmissioneIn0Hour?: number, dataEmissioneIn0Minute?: number, dataEmissioneIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0MonthValue?: number, dataEmissioneIn0Nano?: number, dataEmissioneIn0OffsetId?: string, dataEmissioneIn0OffsetRulesFixedOffset?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneIn0OffsetRulesTransitions0Instant?: string, dataEmissioneIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneIn0OffsetTotalSeconds?: number, dataEmissioneIn0Second?: number, dataEmissioneIn0Year?: number, dataEmissioneIn0ZoneId?: string, dataEmissioneIn0ZoneRulesFixedOffset?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneIn0ZoneRulesTransitions0Instant?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneLessThan?: string, dataEmissioneLessThanOrEqual?: string, dataEmissioneNotEquals?: string, dataEmissioneNotIn0DayOfMonth?: number, dataEmissioneNotIn0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0DayOfYear?: number, dataEmissioneNotIn0Hour?: number, dataEmissioneNotIn0Minute?: number, dataEmissioneNotIn0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0MonthValue?: number, dataEmissioneNotIn0Nano?: number, dataEmissioneNotIn0OffsetId?: string, dataEmissioneNotIn0OffsetRulesFixedOffset?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0OffsetRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Gap?: boolean, dataEmissioneNotIn0OffsetRulesTransitions0Instant?: string, dataEmissioneNotIn0OffsetRulesTransitions0Overlap?: boolean, dataEmissioneNotIn0OffsetTotalSeconds?: number, dataEmissioneNotIn0Second?: number, dataEmissioneNotIn0Year?: number, dataEmissioneNotIn0ZoneId?: string, dataEmissioneNotIn0ZoneRulesFixedOffset?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek?: 'FRIDAY' | 'MONDAY' | 'SATURDAY' | 'SUNDAY' | 'THURSDAY' | 'TUESDAY' | 'WEDNESDAY', dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay?: boolean, dataEmissioneNotIn0ZoneRulesTransitionRules0Month?: 'APRIL' | 'AUGUST' | 'DECEMBER' | 'FEBRUARY' | 'JANUARY' | 'JULY' | 'JUNE' | 'MARCH' | 'MAY' | 'NOVEMBER' | 'OCTOBER' | 'SEPTEMBER', dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId?: string, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition?: 'STANDARD' | 'UTC' | 'WALL', dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter?: string, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore?: string, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Gap?: boolean, dataEmissioneNotIn0ZoneRulesTransitions0Instant?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId?: string, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds?: number, dataEmissioneNotIn0ZoneRulesTransitions0Overlap?: boolean, dataEmissioneSpecified?: boolean, delegaIdEquals?: number, delegaIdGreaterThan?: number, delegaIdGreaterThanOrEqual?: number, delegaIdIn?: Array<number>, delegaIdLessThan?: number, delegaIdLessThanOrEqual?: number, delegaIdNotEquals?: number, delegaIdNotIn?: Array<number>, delegaIdSpecified?: boolean, idEquals?: number, idGreaterThan?: number, idGreaterThanOrEqual?: number, idIn?: Array<number>, idLessThan?: number, idLessThanOrEqual?: number, idNotEquals?: number, idNotIn?: Array<number>, idSpecified?: boolean, page?: number, rifornimentoIdEquals?: number, rifornimentoIdGreaterThan?: number, rifornimentoIdGreaterThanOrEqual?: number, rifornimentoIdIn?: Array<number>, rifornimentoIdLessThan?: number, rifornimentoIdLessThanOrEqual?: number, rifornimentoIdNotEquals?: number, rifornimentoIdNotIn?: Array<number>, rifornimentoIdSpecified?: boolean, size?: number, sort?: Array<string>, targaContains?: string, targaDoesNotContain?: string, targaEquals?: string, targaIn?: Array<string>, targaNotEquals?: string, targaNotIn?: Array<string>, targaSpecified?: boolean, veicoloEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloIn?: Array<string>, veicoloNotEquals?: 'AUTOVEICOLO' | 'CICLOMOTORE' | 'MOTOVEICOLO', veicoloNotIn?: Array<string>, veicoloSpecified?: boolean, options?: any) {
    return TesseraResourceApiFp(this.configuration).getAllTesserasUsingGET(carburanteEquals, carburanteIn, carburanteNotEquals, carburanteNotIn, carburanteSpecified, cittadinoIdEquals, cittadinoIdGreaterThan, cittadinoIdGreaterThanOrEqual, cittadinoIdIn, cittadinoIdLessThan, cittadinoIdLessThanOrEqual, cittadinoIdNotEquals, cittadinoIdNotIn, cittadinoIdSpecified, codiceContains, codiceDoesNotContain, codiceEquals, codiceIn, codiceNotEquals, codiceNotIn, codiceSpecified, dataEmissioneEquals, dataEmissioneGreaterThan, dataEmissioneGreaterThanOrEqual, dataEmissioneIn0DayOfMonth, dataEmissioneIn0DayOfWeek, dataEmissioneIn0DayOfYear, dataEmissioneIn0Hour, dataEmissioneIn0Minute, dataEmissioneIn0Month, dataEmissioneIn0MonthValue, dataEmissioneIn0Nano, dataEmissioneIn0OffsetId, dataEmissioneIn0OffsetRulesFixedOffset, dataEmissioneIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0OffsetRulesTransitionRules0Month, dataEmissioneIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneIn0OffsetRulesTransitions0DurationNano, dataEmissioneIn0OffsetRulesTransitions0DurationNegative, dataEmissioneIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0OffsetRulesTransitions0DurationZero, dataEmissioneIn0OffsetRulesTransitions0Gap, dataEmissioneIn0OffsetRulesTransitions0Instant, dataEmissioneIn0OffsetRulesTransitions0Overlap, dataEmissioneIn0OffsetTotalSeconds, dataEmissioneIn0Second, dataEmissioneIn0Year, dataEmissioneIn0ZoneId, dataEmissioneIn0ZoneRulesFixedOffset, dataEmissioneIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneIn0ZoneRulesTransitionRules0Month, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneIn0ZoneRulesTransitions0DurationNano, dataEmissioneIn0ZoneRulesTransitions0DurationNegative, dataEmissioneIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneIn0ZoneRulesTransitions0DurationZero, dataEmissioneIn0ZoneRulesTransitions0Gap, dataEmissioneIn0ZoneRulesTransitions0Instant, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneIn0ZoneRulesTransitions0Overlap, dataEmissioneLessThan, dataEmissioneLessThanOrEqual, dataEmissioneNotEquals, dataEmissioneNotIn0DayOfMonth, dataEmissioneNotIn0DayOfWeek, dataEmissioneNotIn0DayOfYear, dataEmissioneNotIn0Hour, dataEmissioneNotIn0Minute, dataEmissioneNotIn0Month, dataEmissioneNotIn0MonthValue, dataEmissioneNotIn0Nano, dataEmissioneNotIn0OffsetId, dataEmissioneNotIn0OffsetRulesFixedOffset, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0OffsetRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0OffsetRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0OffsetRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0OffsetRulesTransitionRules0Month, dataEmissioneNotIn0OffsetRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeAfter, dataEmissioneNotIn0OffsetRulesTransitions0DateTimeBefore, dataEmissioneNotIn0OffsetRulesTransitions0DurationNano, dataEmissioneNotIn0OffsetRulesTransitions0DurationNegative, dataEmissioneNotIn0OffsetRulesTransitions0DurationSeconds, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0OffsetRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0OffsetRulesTransitions0DurationZero, dataEmissioneNotIn0OffsetRulesTransitions0Gap, dataEmissioneNotIn0OffsetRulesTransitions0Instant, dataEmissioneNotIn0OffsetRulesTransitions0Overlap, dataEmissioneNotIn0OffsetTotalSeconds, dataEmissioneNotIn0Second, dataEmissioneNotIn0Year, dataEmissioneNotIn0ZoneId, dataEmissioneNotIn0ZoneRulesFixedOffset, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfMonthIndicator, dataEmissioneNotIn0ZoneRulesTransitionRules0DayOfWeek, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeHour, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeMinute, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeNano, dataEmissioneNotIn0ZoneRulesTransitionRules0LocalTimeSecond, dataEmissioneNotIn0ZoneRulesTransitionRules0MidnightEndOfDay, dataEmissioneNotIn0ZoneRulesTransitionRules0Month, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetId, dataEmissioneNotIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitionRules0TimeDefinition, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeAfter, dataEmissioneNotIn0ZoneRulesTransitions0DateTimeBefore, dataEmissioneNotIn0ZoneRulesTransitions0DurationNano, dataEmissioneNotIn0ZoneRulesTransitions0DurationNegative, dataEmissioneNotIn0ZoneRulesTransitions0DurationSeconds, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DateBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, dataEmissioneNotIn0ZoneRulesTransitions0DurationUnits0TimeBased, dataEmissioneNotIn0ZoneRulesTransitions0DurationZero, dataEmissioneNotIn0ZoneRulesTransitions0Gap, dataEmissioneNotIn0ZoneRulesTransitions0Instant, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeId, dataEmissioneNotIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, dataEmissioneNotIn0ZoneRulesTransitions0Overlap, dataEmissioneSpecified, delegaIdEquals, delegaIdGreaterThan, delegaIdGreaterThanOrEqual, delegaIdIn, delegaIdLessThan, delegaIdLessThanOrEqual, delegaIdNotEquals, delegaIdNotIn, delegaIdSpecified, idEquals, idGreaterThan, idGreaterThanOrEqual, idIn, idLessThan, idLessThanOrEqual, idNotEquals, idNotIn, idSpecified, page, rifornimentoIdEquals, rifornimentoIdGreaterThan, rifornimentoIdGreaterThanOrEqual, rifornimentoIdIn, rifornimentoIdLessThan, rifornimentoIdLessThanOrEqual, rifornimentoIdNotEquals, rifornimentoIdNotIn, rifornimentoIdSpecified, size, sort, targaContains, targaDoesNotContain, targaEquals, targaIn, targaNotEquals, targaNotIn, targaSpecified, veicoloEquals, veicoloIn, veicoloNotEquals, veicoloNotIn, veicoloSpecified, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getTessera
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public getTesseraUsingGET(id: number, options?: any) {
    return TesseraResourceApiFp(this.configuration).getTesseraUsingGET(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary partialUpdateTessera
   * @param {Tessera} [tessera]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public partialUpdateTesseraUsingPATCH(tessera?: Tessera, options?: any) {
    return TesseraResourceApiFp(this.configuration).partialUpdateTesseraUsingPATCH(tessera, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateTessera
   * @param {Tessera} [tessera]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesseraResourceApi
   */
  public updateTesseraUsingPUT(tessera?: Tessera, options?: any) {
    return TesseraResourceApiFp(this.configuration).updateTesseraUsingPUT(tessera, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * UserJwtControllerApi - axios parameter creator
 * @export
 */
export const UserJwtControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} [loginVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeUsingPOST: async (loginVM?: LoginVM, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof loginVM !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(loginVM !== undefined ? loginVM : {})
        : (loginVM || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * UserJwtControllerApi - functional programming interface
 * @export
 */
export const UserJwtControllerApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} [loginVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authorizeUsingPOST(loginVM?: LoginVM, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken>> {
      const localVarAxiosArgs = await UserJwtControllerApiAxiosParamCreator(configuration).authorizeUsingPOST(loginVM, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * UserJwtControllerApi - factory interface
 * @export
 */
export const UserJwtControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} [loginVM]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeUsingPOST(loginVM?: LoginVM, options?: any): AxiosPromise<JWTToken> {
      return UserJwtControllerApiFp(configuration).authorizeUsingPOST(loginVM, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserJwtControllerApi - object-oriented interface
 * @export
 * @class UserJwtControllerApi
 * @extends {BaseAPI}
 */
export class UserJwtControllerApi extends BaseAPI {
  /**
   *
   * @summary authorize
   * @param {LoginVM} [loginVM]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserJwtControllerApi
   */
  public authorizeUsingPOST(loginVM?: LoginVM, options?: any) {
    AppDebugLog('ssss', this.configuration);

    return UserJwtControllerApiFp(this.configuration).authorizeUsingPOST(loginVM, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserUsingPOST: async (adminUserDTO?: AdminUserDTO, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof adminUserDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(adminUserDTO !== undefined ? adminUserDTO : {})
        : (adminUserDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary deleteUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingDELETE: async (login: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'login' is not null or undefined
      if (login === null || login === undefined) {
        throw new RequiredError('login', 'Required parameter login was null or undefined when calling deleteUserUsingDELETE.');
      }
      const localVarPath = `/api/admin/users/{login}`
        .replace(`{${'login'}}`, encodeURIComponent(String(login)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getAllUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsersUsingGET: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsingGET: async (login: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'login' is not null or undefined
      if (login === null || login === undefined) {
        throw new RequiredError('login', 'Required parameter login was null or undefined when calling getUserUsingGET.');
      }
      const localVarPath = `/api/admin/users/{login}`
        .replace(`{${'login'}}`, encodeURIComponent(String(login)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUsingPUT: async (adminUserDTO?: AdminUserDTO, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication benzappAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
          ? await configuration.accessToken()
          : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof adminUserDTO !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(adminUserDTO !== undefined ? adminUserDTO : {})
        : (adminUserDTO || '');

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary createUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserUsingPOST(adminUserDTO?: AdminUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).createUserUsingPOST(adminUserDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary deleteUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserUsingDELETE(login: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).deleteUserUsingDELETE(login, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getAllUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminUserDTO>>> {
      const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).getAllUsersUsingGET(page, size, sort, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsingGET(login: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
      const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).getUserUsingGET(login, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserUsingPUT(adminUserDTO?: AdminUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
      const localVarAxiosArgs = await UserResourceApiAxiosParamCreator(configuration).updateUserUsingPUT(adminUserDTO, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary createUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserUsingPOST(adminUserDTO?: AdminUserDTO, options?: any): AxiosPromise<User> {
      return UserResourceApiFp(configuration).createUserUsingPOST(adminUserDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary deleteUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingDELETE(login: string, options?: any): AxiosPromise<void> {
      return UserResourceApiFp(configuration).deleteUserUsingDELETE(login, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getAllUsers
     * @param {number} [page] Page number of the requested page
     * @param {number} [size] Size of a page
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<AdminUserDTO>> {
      return UserResourceApiFp(configuration).getAllUsersUsingGET(page, size, sort, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsingGET(login: string, options?: any): AxiosPromise<AdminUserDTO> {
      return UserResourceApiFp(configuration).getUserUsingGET(login, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateUser
     * @param {AdminUserDTO} [adminUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUsingPUT(adminUserDTO?: AdminUserDTO, options?: any): AxiosPromise<AdminUserDTO> {
      return UserResourceApiFp(configuration).updateUserUsingPUT(adminUserDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
  /**
   *
   * @summary createUser
   * @param {AdminUserDTO} [adminUserDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public createUserUsingPOST(adminUserDTO?: AdminUserDTO, options?: any) {
    return UserResourceApiFp(this.configuration).createUserUsingPOST(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deleteUser
   * @param {string} login login
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public deleteUserUsingDELETE(login: string, options?: any) {
    return UserResourceApiFp(this.configuration).deleteUserUsingDELETE(login, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getAllUsers
   * @param {number} [page] Page number of the requested page
   * @param {number} [size] Size of a page
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public getAllUsersUsingGET(page?: number, size?: number, sort?: Array<string>, options?: any) {
    return UserResourceApiFp(this.configuration).getAllUsersUsingGET(page, size, sort, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getUser
   * @param {string} login login
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public getUserUsingGET(login: string, options?: any) {
    return UserResourceApiFp(this.configuration).getUserUsingGET(login, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateUser
   * @param {AdminUserDTO} [adminUserDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public updateUserUsingPUT(adminUserDTO?: AdminUserDTO, options?: any) {
    return UserResourceApiFp(this.configuration).updateUserUsingPUT(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
  }
}


